# Dockerfile for building .proto files.

ARG GOLANG_VERSION=1.18
ARG GOGO_PROTOBUF_VERSION=1.3.2
ARG GRPC_GATEWAY_VERSION=1.16.0
ARG K8S_VERSION=0.24.1
ARG GO_SWAGGER_VERSION=0.23.0
ARG TEMPLIFY_VERSION=0.0.0-20190823200653-c12e62ca00c1

# We download the protoc binary from Maven. Set this argument to use an alternate Maven repo.
ARG MAVEN_URL=https://repo1.maven.org/maven2

ARG NUGET_URL=https://www.nuget.org/api/v2/package

# We check the sha1 of the downloaded protoc binary, which must be added here manually, e.g., from
# https://repo1.maven.org/maven2/com/google/protobuf/protoc/
ARG PROTOC_VERSION=3.17.3
ARG PROTOC_SHA1=bf2b1b42c7f84d447b15ee3f66a0f6af6c1498b1

# Populate with environment variables from shell by running docker build with
# --build-arg GOPROXY --build-arg GOPRIVATE
ARG GOPROXY=""
ARG GOPRIVATE=""

FROM --platform=linux/arm64 golang:${GOLANG_VERSION}-buster as builder

# Load GOPROXY and GOPRIVATE as environment varialbes in the build container.
# If not defined, these are set to "", which defaults to the standard go package source.
ARG GOPROXY
ARG GOPRIVATE
ENV GOPROXY=$GOPROXY
ENV GOPRIVATE=$GOPRIVATE

# Copy in the protoc toolchain (which must be downloaded and made available manually).
ARG PROTOC_VERSION
ARG PROTOC_SHA1
ARG MAVEN_URL
ARG NUGET_URL

RUN apt-get update -y
RUN apt-get install -y libicu-dev unzip

ARG DOTNET_ARM64_BUNDLE=dotnet-sdk-6.0.302-linux-arm64.tar.gz
ARG DOTNET_ARM64_URL=https://download.visualstudio.microsoft.com/download/pr/33389348-a7d7-41ae-850f-ec46d3ca9612/36bad11f948b05a4fa9faac93c35e574
ARG DOTNET_ARM64_SHA512=26e98a63665d707b1a7729f1794077316f9927edd88d12d82d0357fe597096b0d89b64a085fcdf0cf49807a443bbfebb48e10ea91cea890846cf4308e67c4ea5

RUN curl -OLk  ${DOTNET_ARM64_URL}/${DOTNET_ARM64_BUNDLE} && \
    echo "${DOTNET_ARM64_SHA512}  ${DOTNET_ARM64_BUNDLE}" | shasum -a 512 -c - && \
    mkdir dotnet && \
    tar xzf $DOTNET_ARM64_BUNDLE -C dotnet

RUN curl -OLk ${MAVEN_URL}/com/google/protobuf/protoc/${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-aarch_64.exe && \
    mv protoc-${PROTOC_VERSION}-linux-aarch_64.exe /usr/local/bin/protoc && \
    echo "${PROTOC_SHA1} /usr/local/bin/protoc" | sha1sum -c - && \
    chmod +x /usr/local/bin/protoc

# Install the csharp grpc plugin
RUN curl -sSL https://www.nuget.org/api/v2/package/Grpc.Tools/2.46.3 --output grpctools.zip && \
    unzip -q -d grpctools grpctools.zip && \
    mv grpctools/tools/linux_arm64/grpc_csharp_plugin /usr/local/bin/grpc_csharp_plugin && \
    chmod +x /usr/local/bin/grpc_csharp_plugin

ARG GOGO_PROTOBUF_VERSION
RUN go install github.com/gogo/protobuf/protoc-gen-gogofaster@v${GOGO_PROTOBUF_VERSION}

ARG GRPC_GATEWAY_VERSION
RUN go install \
   github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v${GRPC_GATEWAY_VERSION} \
   github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@v${GRPC_GATEWAY_VERSION}

ARG GOLANG_VERSION
FROM --platform=linux/arm64 golang:${GOLANG_VERSION}-buster
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /go/bin /usr/local/bin

RUN apt-get update -y
# dotnet requires the ICU libraries
RUN apt-get install -y libicu-dev 
COPY --from=builder /go/dotnet /dotnet
RUN mkdir /.dotnet && chmod 0777 /.dotnet
RUN mkdir /.nuget && chmod 0777 /.nuget
RUN mkdir /.local && chmod 0777 /.local

ENTRYPOINT ["/bin/bash"]
