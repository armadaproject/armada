version: "3.8"

networks:
  kind:
    external: true

volumes:
  gomod-cache:
  go-cache:

services:
  #
  # Infrastructure services.
  # A Kubernetes cluster (e.g., kind) must also be setup before starting Armada.
  #
  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
    networks:
      - kind

  postgres:
    container_name: postgres
    image: postgres:12.13-alpine
    environment:
      - POSTGRES_PASSWORD=psw
    ports:
      - "5432:5432"
    volumes:
      - ./developer/dependencies/postgres-init.sh:/docker-entrypoint-initdb.d/init-database.sh
    networks:
      - kind

  pulsar:
    image: ${PULSAR_IMAGE:-apachepulsar/pulsar:2.10.4}
    container_name: pulsar
    volumes:
      - ./developer/dependencies/pulsar.conf:/conf/pulsar.conf
    entrypoint: bin/pulsar standalone
    ports:
      - 0.0.0.0:6650:6650
    networks:
      - kind

  #
  # Armada services.
  #
  server:
    container_name: server
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - 50051:50051
      - 8080:8080
      - 4000:4000
    volumes:
      - "./developer/config/insecure-armada.yaml:/config/insecure-armada.yaml"
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    depends_on:
      - eventingester
    working_dir: /app
    env_file:
      - developer/env/docker/server.env
    command: sh -c "sleep 30 && ./server --config /config/insecure-armada.yaml"

  scheduler:
    container_name: scheduler
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - 9000:9000
      - 8081:8081
      - 50052:50052
    volumes:
      - "./developer/config/insecure-armada.yaml:/config/insecure-armada.yaml"
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    depends_on:
      - scheduleringester
    working_dir: /app
    env_file:
      - ./developer/env/docker/scheduler.env
    command: ./scheduler run --config /config/insecure-armada.yaml

  scheduler-migration:
    container_name: scheduler-migration
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    working_dir: /app
    command:  ./scheduler migrateDatabase

  scheduleringester:
    container_name: scheduleringester
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - 9003:9003
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    env_file:
      - ./developer/env/docker/scheduleringester.env
    depends_on:
      - scheduler-migration
    working_dir: /app
    command: ./scheduleringester

  executor:
    container_name: executor
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9001:9001
      - 4001:4000
    volumes:
      - "./.kube/internal:/.kube"
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    environment:
      - KUBECONFIG=/.kube/config
    env_file:
      - developer/env/docker/executor.env
    working_dir: /app
    command: ./executor

  binoculars:
    container_name: binoculars
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - 8082:8080
      - 4002:4000
    volumes:
      - "./.kube/internal:/.kube"
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    environment:
      - KUBECONFIG=/.kube/config
    env_file:
      - ./developer/env/docker/binoculars.env
    working_dir: /app
    command: ./binoculars

  eventingester:
    container_name: eventingester
    image: ${ARMADA_IMAGE:-gresearch/armada-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - 4003:4000
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    working_dir: /app
    command: ./eventingester

  lookoutv2:
    container_name: lookoutv2
    image: ${ARMADA_IMAGE:-gresearch/armada-lookout-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    ports:
      - "10000:10000"
      - "4005:4000"
    depends_on:
      - lookoutingesterv2
    volumes:
      - "./internal/lookout/ui/build:/app/internal/lookout/ui/build"
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    env_file:
      - ./developer/env/docker/lookoutv2.env
    working_dir: "/app"
    entrypoint: ./lookoutv2

  lookoutv2-migration:
    container_name: lookoutv2-migration
    image: ${ARMADA_IMAGE:-gresearch/armada-lookout-bundle}:${ARMADA_IMAGE_TAG:-latest}
    networks:
      - kind
    depends_on:
      - postgres
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    env_file:
      - ./developer/env/docker/lookoutv2.env
    working_dir: "/app"
    entrypoint: ./lookoutv2 --migrateDatabase

  lookoutingesterv2:
    container_name: lookoutingesterv2
    image: ${ARMADA_IMAGE:-gresearch/armada-lookout-bundle}:${ARMADA_IMAGE_TAG:-latest}
    ports:
      - 4007:4000
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    networks:
      - kind
    env_file:
      - ./developer/env/docker/lookoutv2.env
    working_dir: /app
    command: ./lookoutingesterv2

  jobservice:
    container_name: jobservice
    image: ${ARMADA_IMAGE:-gresearch/armada-jobservice}:${ARMADA_IMAGE_TAG:-latest}
    volumes:
      - "go-cache:/root/.cache/go-build:rw"
      - "gomod-cache:/go/pkg/mod:rw"
    networks:
      - kind
    ports:
      - 60003:60003
      - 4008:4000
    depends_on:
      - server
    env_file:
      - ./developer/env/docker/jobservice.env
    working_dir: /app
    command: ./jobservice run

  airflow:
    container_name: airflow
    image: python:3.8-buster
    networks:
      - kind
    ports:
      - 8081:8081
    volumes:
      - ".:/app:rw"
    working_dir: "/app"
    entrypoint: sh -c "developer/dependencies/airflow-start.sh"
