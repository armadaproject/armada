// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"sync"
)

// Ensure, that JobTableUpdaterMock does implement JobTableUpdater.
// If this is not the case, regenerate this file with moq.
var _ JobTableUpdater = &JobTableUpdaterMock{}

// JobTableUpdaterMock is a mock implementation of JobTableUpdater.
//
//	func TestSomethingThatUsesJobTableUpdater(t *testing.T) {
//
//		// make and configure a mocked JobTableUpdater
//		mockedJobTableUpdater := &JobTableUpdaterMock{
//			AddMessageIdAndClearSubscriptionErrorFunc: func(ctx context.Context, queue string, jobSet string, messageId string) error {
//				panic("mock out the AddMessageIdAndClearSubscriptionError method")
//			},
//			GetSubscribedJobSetsFunc: func(ctx context.Context) ([]SubscribedTuple, error) {
//				panic("mock out the GetSubscribedJobSets method")
//			},
//			GetSubscriptionErrorFunc: func(ctx context.Context, queue string, jobSet string) (string, error) {
//				panic("mock out the GetSubscriptionError method")
//			},
//			IsJobSetSubscribedFunc: func(ctx context.Context, queue string, jobSet string) (bool, string, error) {
//				panic("mock out the IsJobSetSubscribed method")
//			},
//			SetSubscriptionErrorFunc: func(ctx context.Context, queue string, jobSet string, err string, fromMessageId string) error {
//				panic("mock out the SetSubscriptionError method")
//			},
//			SubscribeJobSetFunc: func(ctx context.Context, queue string, jobSet string, fromMessageId string) error {
//				panic("mock out the SubscribeJobSet method")
//			},
//			UnsubscribeJobSetFunc: func(ctx context.Context, queue string, jobSet string) (int64, error) {
//				panic("mock out the UnsubscribeJobSet method")
//			},
//			UpdateJobServiceDbFunc: func(ctx context.Context, jobTable *JobStatus) error {
//				panic("mock out the UpdateJobServiceDb method")
//			},
//			UpdateJobSetDbFunc: func(ctx context.Context, queue string, jobSet string, fromMessageId string) error {
//				panic("mock out the UpdateJobSetDb method")
//			},
//		}
//
//		// use mockedJobTableUpdater in code that requires JobTableUpdater
//		// and then make assertions.
//
//	}
type JobTableUpdaterMock struct {
	// AddMessageIdAndClearSubscriptionErrorFunc mocks the AddMessageIdAndClearSubscriptionError method.
	AddMessageIdAndClearSubscriptionErrorFunc func(ctx context.Context, queue string, jobSet string, messageId string) error

	// GetSubscribedJobSetsFunc mocks the GetSubscribedJobSets method.
	GetSubscribedJobSetsFunc func(ctx context.Context) ([]SubscribedTuple, error)

	// GetSubscriptionErrorFunc mocks the GetSubscriptionError method.
	GetSubscriptionErrorFunc func(ctx context.Context, queue string, jobSet string) (string, error)

	// IsJobSetSubscribedFunc mocks the IsJobSetSubscribed method.
	IsJobSetSubscribedFunc func(ctx context.Context, queue string, jobSet string) (bool, string, error)

	// SetSubscriptionErrorFunc mocks the SetSubscriptionError method.
	SetSubscriptionErrorFunc func(ctx context.Context, queue string, jobSet string, err string, fromMessageId string) error

	// SubscribeJobSetFunc mocks the SubscribeJobSet method.
	SubscribeJobSetFunc func(ctx context.Context, queue string, jobSet string, fromMessageId string) error

	// UnsubscribeJobSetFunc mocks the UnsubscribeJobSet method.
	UnsubscribeJobSetFunc func(ctx context.Context, queue string, jobSet string) (int64, error)

	// UpdateJobServiceDbFunc mocks the UpdateJobServiceDb method.
	UpdateJobServiceDbFunc func(ctx context.Context, jobTable *JobStatus) error

	// UpdateJobSetDbFunc mocks the UpdateJobSetDb method.
	UpdateJobSetDbFunc func(ctx context.Context, queue string, jobSet string, fromMessageId string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddMessageIdAndClearSubscriptionError holds details about calls to the AddMessageIdAndClearSubscriptionError method.
		AddMessageIdAndClearSubscriptionError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
			// MessageId is the messageId argument value.
			MessageId string
		}
		// GetSubscribedJobSets holds details about calls to the GetSubscribedJobSets method.
		GetSubscribedJobSets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetSubscriptionError holds details about calls to the GetSubscriptionError method.
		GetSubscriptionError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
		}
		// IsJobSetSubscribed holds details about calls to the IsJobSetSubscribed method.
		IsJobSetSubscribed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
		}
		// SetSubscriptionError holds details about calls to the SetSubscriptionError method.
		SetSubscriptionError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
			// Err is the err argument value.
			Err string
			// FromMessageId is the fromMessageId argument value.
			FromMessageId string
		}
		// SubscribeJobSet holds details about calls to the SubscribeJobSet method.
		SubscribeJobSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
			// FromMessageId is the fromMessageId argument value.
			FromMessageId string
		}
		// UnsubscribeJobSet holds details about calls to the UnsubscribeJobSet method.
		UnsubscribeJobSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
		}
		// UpdateJobServiceDb holds details about calls to the UpdateJobServiceDb method.
		UpdateJobServiceDb []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobTable is the jobTable argument value.
			JobTable *JobStatus
		}
		// UpdateJobSetDb holds details about calls to the UpdateJobSetDb method.
		UpdateJobSetDb []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue string
			// JobSet is the jobSet argument value.
			JobSet string
			// FromMessageId is the fromMessageId argument value.
			FromMessageId string
		}
	}
	lockAddMessageIdAndClearSubscriptionError sync.RWMutex
	lockGetSubscribedJobSets                  sync.RWMutex
	lockGetSubscriptionError                  sync.RWMutex
	lockIsJobSetSubscribed                    sync.RWMutex
	lockSetSubscriptionError                  sync.RWMutex
	lockSubscribeJobSet                       sync.RWMutex
	lockUnsubscribeJobSet                     sync.RWMutex
	lockUpdateJobServiceDb                    sync.RWMutex
	lockUpdateJobSetDb                        sync.RWMutex
}

// AddMessageIdAndClearSubscriptionError calls AddMessageIdAndClearSubscriptionErrorFunc.
func (mock *JobTableUpdaterMock) AddMessageIdAndClearSubscriptionError(ctx context.Context, queue string, jobSet string, messageId string) error {
	if mock.AddMessageIdAndClearSubscriptionErrorFunc == nil {
		panic("JobTableUpdaterMock.AddMessageIdAndClearSubscriptionErrorFunc: method is nil but JobTableUpdater.AddMessageIdAndClearSubscriptionError was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Queue     string
		JobSet    string
		MessageId string
	}{
		Ctx:       ctx,
		Queue:     queue,
		JobSet:    jobSet,
		MessageId: messageId,
	}
	mock.lockAddMessageIdAndClearSubscriptionError.Lock()
	mock.calls.AddMessageIdAndClearSubscriptionError = append(mock.calls.AddMessageIdAndClearSubscriptionError, callInfo)
	mock.lockAddMessageIdAndClearSubscriptionError.Unlock()
	return mock.AddMessageIdAndClearSubscriptionErrorFunc(ctx, queue, jobSet, messageId)
}

// AddMessageIdAndClearSubscriptionErrorCalls gets all the calls that were made to AddMessageIdAndClearSubscriptionError.
// Check the length with:
//
//	len(mockedJobTableUpdater.AddMessageIdAndClearSubscriptionErrorCalls())
func (mock *JobTableUpdaterMock) AddMessageIdAndClearSubscriptionErrorCalls() []struct {
	Ctx       context.Context
	Queue     string
	JobSet    string
	MessageId string
} {
	var calls []struct {
		Ctx       context.Context
		Queue     string
		JobSet    string
		MessageId string
	}
	mock.lockAddMessageIdAndClearSubscriptionError.RLock()
	calls = mock.calls.AddMessageIdAndClearSubscriptionError
	mock.lockAddMessageIdAndClearSubscriptionError.RUnlock()
	return calls
}

// GetSubscribedJobSets calls GetSubscribedJobSetsFunc.
func (mock *JobTableUpdaterMock) GetSubscribedJobSets(ctx context.Context) ([]SubscribedTuple, error) {
	if mock.GetSubscribedJobSetsFunc == nil {
		panic("JobTableUpdaterMock.GetSubscribedJobSetsFunc: method is nil but JobTableUpdater.GetSubscribedJobSets was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSubscribedJobSets.Lock()
	mock.calls.GetSubscribedJobSets = append(mock.calls.GetSubscribedJobSets, callInfo)
	mock.lockGetSubscribedJobSets.Unlock()
	return mock.GetSubscribedJobSetsFunc(ctx)
}

// GetSubscribedJobSetsCalls gets all the calls that were made to GetSubscribedJobSets.
// Check the length with:
//
//	len(mockedJobTableUpdater.GetSubscribedJobSetsCalls())
func (mock *JobTableUpdaterMock) GetSubscribedJobSetsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSubscribedJobSets.RLock()
	calls = mock.calls.GetSubscribedJobSets
	mock.lockGetSubscribedJobSets.RUnlock()
	return calls
}

// GetSubscriptionError calls GetSubscriptionErrorFunc.
func (mock *JobTableUpdaterMock) GetSubscriptionError(ctx context.Context, queue string, jobSet string) (string, error) {
	if mock.GetSubscriptionErrorFunc == nil {
		panic("JobTableUpdaterMock.GetSubscriptionErrorFunc: method is nil but JobTableUpdater.GetSubscriptionError was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}{
		Ctx:    ctx,
		Queue:  queue,
		JobSet: jobSet,
	}
	mock.lockGetSubscriptionError.Lock()
	mock.calls.GetSubscriptionError = append(mock.calls.GetSubscriptionError, callInfo)
	mock.lockGetSubscriptionError.Unlock()
	return mock.GetSubscriptionErrorFunc(ctx, queue, jobSet)
}

// GetSubscriptionErrorCalls gets all the calls that were made to GetSubscriptionError.
// Check the length with:
//
//	len(mockedJobTableUpdater.GetSubscriptionErrorCalls())
func (mock *JobTableUpdaterMock) GetSubscriptionErrorCalls() []struct {
	Ctx    context.Context
	Queue  string
	JobSet string
} {
	var calls []struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}
	mock.lockGetSubscriptionError.RLock()
	calls = mock.calls.GetSubscriptionError
	mock.lockGetSubscriptionError.RUnlock()
	return calls
}

// IsJobSetSubscribed calls IsJobSetSubscribedFunc.
func (mock *JobTableUpdaterMock) IsJobSetSubscribed(ctx context.Context, queue string, jobSet string) (bool, string, error) {
	if mock.IsJobSetSubscribedFunc == nil {
		panic("JobTableUpdaterMock.IsJobSetSubscribedFunc: method is nil but JobTableUpdater.IsJobSetSubscribed was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}{
		Ctx:    ctx,
		Queue:  queue,
		JobSet: jobSet,
	}
	mock.lockIsJobSetSubscribed.Lock()
	mock.calls.IsJobSetSubscribed = append(mock.calls.IsJobSetSubscribed, callInfo)
	mock.lockIsJobSetSubscribed.Unlock()
	return mock.IsJobSetSubscribedFunc(ctx, queue, jobSet)
}

// IsJobSetSubscribedCalls gets all the calls that were made to IsJobSetSubscribed.
// Check the length with:
//
//	len(mockedJobTableUpdater.IsJobSetSubscribedCalls())
func (mock *JobTableUpdaterMock) IsJobSetSubscribedCalls() []struct {
	Ctx    context.Context
	Queue  string
	JobSet string
} {
	var calls []struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}
	mock.lockIsJobSetSubscribed.RLock()
	calls = mock.calls.IsJobSetSubscribed
	mock.lockIsJobSetSubscribed.RUnlock()
	return calls
}

// SetSubscriptionError calls SetSubscriptionErrorFunc.
func (mock *JobTableUpdaterMock) SetSubscriptionError(ctx context.Context, queue string, jobSet string, err string, fromMessageId string) error {
	if mock.SetSubscriptionErrorFunc == nil {
		panic("JobTableUpdaterMock.SetSubscriptionErrorFunc: method is nil but JobTableUpdater.SetSubscriptionError was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		Err           string
		FromMessageId string
	}{
		Ctx:           ctx,
		Queue:         queue,
		JobSet:        jobSet,
		Err:           err,
		FromMessageId: fromMessageId,
	}
	mock.lockSetSubscriptionError.Lock()
	mock.calls.SetSubscriptionError = append(mock.calls.SetSubscriptionError, callInfo)
	mock.lockSetSubscriptionError.Unlock()
	return mock.SetSubscriptionErrorFunc(ctx, queue, jobSet, err, fromMessageId)
}

// SetSubscriptionErrorCalls gets all the calls that were made to SetSubscriptionError.
// Check the length with:
//
//	len(mockedJobTableUpdater.SetSubscriptionErrorCalls())
func (mock *JobTableUpdaterMock) SetSubscriptionErrorCalls() []struct {
	Ctx           context.Context
	Queue         string
	JobSet        string
	Err           string
	FromMessageId string
} {
	var calls []struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		Err           string
		FromMessageId string
	}
	mock.lockSetSubscriptionError.RLock()
	calls = mock.calls.SetSubscriptionError
	mock.lockSetSubscriptionError.RUnlock()
	return calls
}

// SubscribeJobSet calls SubscribeJobSetFunc.
func (mock *JobTableUpdaterMock) SubscribeJobSet(ctx context.Context, queue string, jobSet string, fromMessageId string) error {
	if mock.SubscribeJobSetFunc == nil {
		panic("JobTableUpdaterMock.SubscribeJobSetFunc: method is nil but JobTableUpdater.SubscribeJobSet was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		FromMessageId string
	}{
		Ctx:           ctx,
		Queue:         queue,
		JobSet:        jobSet,
		FromMessageId: fromMessageId,
	}
	mock.lockSubscribeJobSet.Lock()
	mock.calls.SubscribeJobSet = append(mock.calls.SubscribeJobSet, callInfo)
	mock.lockSubscribeJobSet.Unlock()
	return mock.SubscribeJobSetFunc(ctx, queue, jobSet, fromMessageId)
}

// SubscribeJobSetCalls gets all the calls that were made to SubscribeJobSet.
// Check the length with:
//
//	len(mockedJobTableUpdater.SubscribeJobSetCalls())
func (mock *JobTableUpdaterMock) SubscribeJobSetCalls() []struct {
	Ctx           context.Context
	Queue         string
	JobSet        string
	FromMessageId string
} {
	var calls []struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		FromMessageId string
	}
	mock.lockSubscribeJobSet.RLock()
	calls = mock.calls.SubscribeJobSet
	mock.lockSubscribeJobSet.RUnlock()
	return calls
}

// UnsubscribeJobSet calls UnsubscribeJobSetFunc.
func (mock *JobTableUpdaterMock) UnsubscribeJobSet(ctx context.Context, queue string, jobSet string) (int64, error) {
	if mock.UnsubscribeJobSetFunc == nil {
		panic("JobTableUpdaterMock.UnsubscribeJobSetFunc: method is nil but JobTableUpdater.UnsubscribeJobSet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}{
		Ctx:    ctx,
		Queue:  queue,
		JobSet: jobSet,
	}
	mock.lockUnsubscribeJobSet.Lock()
	mock.calls.UnsubscribeJobSet = append(mock.calls.UnsubscribeJobSet, callInfo)
	mock.lockUnsubscribeJobSet.Unlock()
	return mock.UnsubscribeJobSetFunc(ctx, queue, jobSet)
}

// UnsubscribeJobSetCalls gets all the calls that were made to UnsubscribeJobSet.
// Check the length with:
//
//	len(mockedJobTableUpdater.UnsubscribeJobSetCalls())
func (mock *JobTableUpdaterMock) UnsubscribeJobSetCalls() []struct {
	Ctx    context.Context
	Queue  string
	JobSet string
} {
	var calls []struct {
		Ctx    context.Context
		Queue  string
		JobSet string
	}
	mock.lockUnsubscribeJobSet.RLock()
	calls = mock.calls.UnsubscribeJobSet
	mock.lockUnsubscribeJobSet.RUnlock()
	return calls
}

// UpdateJobServiceDb calls UpdateJobServiceDbFunc.
func (mock *JobTableUpdaterMock) UpdateJobServiceDb(ctx context.Context, jobTable *JobStatus) error {
	if mock.UpdateJobServiceDbFunc == nil {
		panic("JobTableUpdaterMock.UpdateJobServiceDbFunc: method is nil but JobTableUpdater.UpdateJobServiceDb was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		JobTable *JobStatus
	}{
		Ctx:      ctx,
		JobTable: jobTable,
	}
	mock.lockUpdateJobServiceDb.Lock()
	mock.calls.UpdateJobServiceDb = append(mock.calls.UpdateJobServiceDb, callInfo)
	mock.lockUpdateJobServiceDb.Unlock()
	return mock.UpdateJobServiceDbFunc(ctx, jobTable)
}

// UpdateJobServiceDbCalls gets all the calls that were made to UpdateJobServiceDb.
// Check the length with:
//
//	len(mockedJobTableUpdater.UpdateJobServiceDbCalls())
func (mock *JobTableUpdaterMock) UpdateJobServiceDbCalls() []struct {
	Ctx      context.Context
	JobTable *JobStatus
} {
	var calls []struct {
		Ctx      context.Context
		JobTable *JobStatus
	}
	mock.lockUpdateJobServiceDb.RLock()
	calls = mock.calls.UpdateJobServiceDb
	mock.lockUpdateJobServiceDb.RUnlock()
	return calls
}

// UpdateJobSetDb calls UpdateJobSetDbFunc.
func (mock *JobTableUpdaterMock) UpdateJobSetDb(ctx context.Context, queue string, jobSet string, fromMessageId string) error {
	if mock.UpdateJobSetDbFunc == nil {
		panic("JobTableUpdaterMock.UpdateJobSetDbFunc: method is nil but JobTableUpdater.UpdateJobSetDb was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		FromMessageId string
	}{
		Ctx:           ctx,
		Queue:         queue,
		JobSet:        jobSet,
		FromMessageId: fromMessageId,
	}
	mock.lockUpdateJobSetDb.Lock()
	mock.calls.UpdateJobSetDb = append(mock.calls.UpdateJobSetDb, callInfo)
	mock.lockUpdateJobSetDb.Unlock()
	return mock.UpdateJobSetDbFunc(ctx, queue, jobSet, fromMessageId)
}

// UpdateJobSetDbCalls gets all the calls that were made to UpdateJobSetDb.
// Check the length with:
//
//	len(mockedJobTableUpdater.UpdateJobSetDbCalls())
func (mock *JobTableUpdaterMock) UpdateJobSetDbCalls() []struct {
	Ctx           context.Context
	Queue         string
	JobSet        string
	FromMessageId string
} {
	var calls []struct {
		Ctx           context.Context
		Queue         string
		JobSet        string
		FromMessageId string
	}
	mock.lockUpdateJobSetDb.RLock()
	calls = mock.calls.UpdateJobSetDb
	mock.lockUpdateJobSetDb.RUnlock()
	return calls
}
