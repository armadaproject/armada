// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package eventscheduler

import (
	"context"

	"github.com/google/uuid"
)

const getTopicMessageIds = `-- name: GetTopicMessageIds :many




SELECT topic, ledger_id, entry_id, batch_idx, partition_idx FROM pulsar WHERE topic = $1
`

// -- name: UpsertRecord :exec
// INSERT INTO records (id, value, payload) VALUES ($1, $2, $3)
// ON CONFLICT (id) DO UPDATE SET value = EXCLUDED.value, payload = EXCLUDED.payload;
// -- name: UpsertRecords :exec
// INSERT INTO records (id, value, payload)
// SELECT unnest(@ids) AS id,
//
//	unnest(@values) AS names,
//	unnest(@payloads) AS payloads
//
// ON CONFLICT (id) DO UPDATE SET value = EXCLUDED.value, payload = EXCLUDED.payload;
// -- name: UpdateRecord :exec
// UPDATE records SET value = $2, payload = $3 WHERE id = $1;
// -- name: DeleteRecord :exec
// DELETE FROM records WHERE id = $1;
func (q *Queries) GetTopicMessageIds(ctx context.Context, topic string) ([]Pulsar, error) {
	rows, err := q.db.Query(ctx, getTopicMessageIds, topic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pulsar
	for rows.Next() {
		var i Pulsar
		if err := rows.Scan(
			&i.Topic,
			&i.LedgerID,
			&i.EntryID,
			&i.BatchIdx,
			&i.PartitionIdx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodeInfo = `-- name: ListNodeInfo :many
SELECT node_name, message, serial, last_modified FROM nodeinfo ORDER BY serial
`

func (q *Queries) ListNodeInfo(ctx context.Context) ([]Nodeinfo, error) {
	rows, err := q.db.Query(ctx, listNodeInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nodeinfo
	for rows.Next() {
		var i Nodeinfo
		if err := rows.Scan(
			&i.NodeName,
			&i.Message,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRuns = `-- name: ListRuns :many

SELECT run_id, job_id, executor, assignment, sent_to_executor, cancelled, serial, last_modified FROM runs ORDER BY run_id
`

// -- name: GetRecord :one
// SELECT * FROM records WHERE id = $1 LIMIT 1;
func (q *Queries) ListRuns(ctx context.Context) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRuns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.RunID,
			&i.JobID,
			&i.Executor,
			&i.Assignment,
			&i.SentToExecutor,
			&i.Cancelled,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markRunAsSent = `-- name: MarkRunAsSent :exec
UPDATE runs SET sent_to_executor = true WHERE run_id = $1
`

func (q *Queries) MarkRunAsSent(ctx context.Context, runID uuid.UUID) error {
	_, err := q.db.Exec(ctx, markRunAsSent, runID)
	return err
}

const markRunsAsSent = `-- name: MarkRunsAsSent :exec
UPDATE runs SET sent_to_executor = true WHERE run_id = ANY($1::UUID[])
`

func (q *Queries) MarkRunsAsSent(ctx context.Context, runIds []uuid.UUID) error {
	_, err := q.db.Exec(ctx, markRunsAsSent, runIds)
	return err
}

const selectJobsFromIds = `-- name: SelectJobsFromIds :many
SELECT job_id, job_set, queue, user_id, groups, priority, submit_message, serial, last_modified FROM jobs WHERE job_id = ANY($1::UUID[])
`

func (q *Queries) SelectJobsFromIds(ctx context.Context, jobIds []uuid.UUID) ([]Job, error) {
	rows, err := q.db.Query(ctx, selectJobsFromIds, jobIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.JobID,
			&i.JobSet,
			&i.Queue,
			&i.UserID,
			&i.Groups,
			&i.Priority,
			&i.SubmitMessage,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNewRunsForExecutor = `-- name: SelectNewRunsForExecutor :many
SELECT run_id, job_id, executor, assignment, sent_to_executor, cancelled, serial, last_modified FROM runs WHERE (executor = $1 AND sent_to_executor = false)
`

func (q *Queries) SelectNewRunsForExecutor(ctx context.Context, executor string) ([]Run, error) {
	rows, err := q.db.Query(ctx, selectNewRunsForExecutor, executor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.RunID,
			&i.JobID,
			&i.Executor,
			&i.Assignment,
			&i.SentToExecutor,
			&i.Cancelled,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNewRunsForExecutorWithLimit = `-- name: SelectNewRunsForExecutorWithLimit :many
SELECT run_id, job_id, executor, assignment, sent_to_executor, cancelled, serial, last_modified FROM runs WHERE (executor = $1 AND sent_to_executor = false) LIMIT $2
`

type SelectNewRunsForExecutorWithLimitParams struct {
	Executor string `db:"executor"`
	Limit    int32  `db:"limit"`
}

func (q *Queries) SelectNewRunsForExecutorWithLimit(ctx context.Context, arg SelectNewRunsForExecutorWithLimitParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, selectNewRunsForExecutorWithLimit, arg.Executor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.RunID,
			&i.JobID,
			&i.Executor,
			&i.Assignment,
			&i.SentToExecutor,
			&i.Cancelled,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectQueueJobSetFromId = `-- name: SelectQueueJobSetFromId :one

SELECT job_id, queue, job_set FROM jobs where job_id = $1
`

type SelectQueueJobSetFromIdRow struct {
	JobID  uuid.UUID `db:"job_id"`
	Queue  string    `db:"queue"`
	JobSet string    `db:"job_set"`
}

// SELECT (user_id, groups, queue, submit_message) FROM jobs WHERE job_id = ANY(sqlc.arg(job_ids)::UUID[]);
func (q *Queries) SelectQueueJobSetFromId(ctx context.Context, jobID uuid.UUID) (SelectQueueJobSetFromIdRow, error) {
	row := q.db.QueryRow(ctx, selectQueueJobSetFromId, jobID)
	var i SelectQueueJobSetFromIdRow
	err := row.Scan(&i.JobID, &i.Queue, &i.JobSet)
	return i, err
}

const selectQueueJobSetFromIds = `-- name: SelectQueueJobSetFromIds :many
SELECT job_id, queue, job_set FROM jobs where job_id = ANY($1::UUID[])
`

type SelectQueueJobSetFromIdsRow struct {
	JobID  uuid.UUID `db:"job_id"`
	Queue  string    `db:"queue"`
	JobSet string    `db:"job_set"`
}

func (q *Queries) SelectQueueJobSetFromIds(ctx context.Context, jobIds []uuid.UUID) ([]SelectQueueJobSetFromIdsRow, error) {
	rows, err := q.db.Query(ctx, selectQueueJobSetFromIds, jobIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectQueueJobSetFromIdsRow
	for rows.Next() {
		var i SelectQueueJobSetFromIdsRow
		if err := rows.Scan(&i.JobID, &i.Queue, &i.JobSet); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRunsFromExecutorAndJobs = `-- name: SelectRunsFromExecutorAndJobs :many
SELECT run_id, job_id, executor, assignment, sent_to_executor, cancelled, serial, last_modified FROM runs WHERE (executor = $1 AND job_id = ANY($2::UUID[]))
`

type SelectRunsFromExecutorAndJobsParams struct {
	Executor string      `db:"executor"`
	JobIds   []uuid.UUID `db:"job_ids"`
}

func (q *Queries) SelectRunsFromExecutorAndJobs(ctx context.Context, arg SelectRunsFromExecutorAndJobsParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, selectRunsFromExecutorAndJobs, arg.Executor, arg.JobIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.RunID,
			&i.JobID,
			&i.Executor,
			&i.Assignment,
			&i.SentToExecutor,
			&i.Cancelled,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertMessageId = `-- name: UpsertMessageId :exec
INSERT INTO pulsar (topic, ledger_id, entry_id, batch_idx, partition_idx) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (topic, partition_idx) DO UPDATE SET ledger_id = EXCLUDED.ledger_id, entry_id = EXCLUDED.entry_id, batch_idx = EXCLUDED.batch_idx
`

type UpsertMessageIdParams struct {
	Topic        string `db:"topic"`
	LedgerID     int64  `db:"ledger_id"`
	EntryID      int64  `db:"entry_id"`
	BatchIdx     int32  `db:"batch_idx"`
	PartitionIdx int32  `db:"partition_idx"`
}

func (q *Queries) UpsertMessageId(ctx context.Context, arg UpsertMessageIdParams) error {
	_, err := q.db.Exec(ctx, upsertMessageId,
		arg.Topic,
		arg.LedgerID,
		arg.EntryID,
		arg.BatchIdx,
		arg.PartitionIdx,
	)
	return err
}
