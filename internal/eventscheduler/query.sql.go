// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package eventscheduler

import (
	"context"
)

const getTopicMessageIds = `-- name: GetTopicMessageIds :many




SELECT topic, ledger_id, entry_id, batch_idx, partition_idx FROM pulsar WHERE topic = $1
`

// -- name: UpsertRecord :exec
// INSERT INTO records (id, value, payload) VALUES ($1, $2, $3)
// ON CONFLICT (id) DO UPDATE SET value = EXCLUDED.value, payload = EXCLUDED.payload;
// -- name: UpsertRecords :exec
// INSERT INTO records (id, value, payload)
// SELECT unnest(@ids) AS id,
//
//	unnest(@values) AS names,
//	unnest(@payloads) AS payloads
//
// ON CONFLICT (id) DO UPDATE SET value = EXCLUDED.value, payload = EXCLUDED.payload;
// -- name: UpdateRecord :exec
// UPDATE records SET value = $2, payload = $3 WHERE id = $1;
// -- name: DeleteRecord :exec
// DELETE FROM records WHERE id = $1;
func (q *Queries) GetTopicMessageIds(ctx context.Context, topic string) ([]Pulsar, error) {
	rows, err := q.db.Query(ctx, getTopicMessageIds, topic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pulsar
	for rows.Next() {
		var i Pulsar
		if err := rows.Scan(
			&i.Topic,
			&i.LedgerID,
			&i.EntryID,
			&i.BatchIdx,
			&i.PartitionIdx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodeInfo = `-- name: ListNodeInfo :many
SELECT node_name, message, serial, last_modified FROM nodeinfo ORDER BY serial
`

func (q *Queries) ListNodeInfo(ctx context.Context) ([]Nodeinfo, error) {
	rows, err := q.db.Query(ctx, listNodeInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nodeinfo
	for rows.Next() {
		var i Nodeinfo
		if err := rows.Scan(
			&i.NodeName,
			&i.Message,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRuns = `-- name: ListRuns :many

SELECT run_id, job_id, executor, assignment, sent_to_executor, serial, last_modified FROM runs ORDER BY run_id
`

// -- name: GetRecord :one
// SELECT * FROM records WHERE id = $1 LIMIT 1;
func (q *Queries) ListRuns(ctx context.Context) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRuns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.RunID,
			&i.JobID,
			&i.Executor,
			&i.Assignment,
			&i.SentToExecutor,
			&i.Serial,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertMessageId = `-- name: UpsertMessageId :exec
INSERT INTO pulsar (topic, ledger_id, entry_id, batch_idx, partition_idx) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (topic, partition_idx) DO UPDATE SET ledger_id = EXCLUDED.ledger_id, entry_id = EXCLUDED.entry_id, batch_idx = EXCLUDED.batch_idx
`

type UpsertMessageIdParams struct {
	Topic        string `db:"topic"`
	LedgerID     int64  `db:"ledger_id"`
	EntryID      int64  `db:"entry_id"`
	BatchIdx     int32  `db:"batch_idx"`
	PartitionIdx int32  `db:"partition_idx"`
}

func (q *Queries) UpsertMessageId(ctx context.Context, arg UpsertMessageIdParams) error {
	_, err := q.db.Exec(ctx, upsertMessageId,
		arg.Topic,
		arg.LedgerID,
		arg.EntryID,
		arg.BatchIdx,
		arg.PartitionIdx,
	)
	return err
}
