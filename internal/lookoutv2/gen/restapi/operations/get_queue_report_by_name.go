// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetQueueReportByNameHandlerFunc turns a function with the right signature into a get queue report by name handler
type GetQueueReportByNameHandlerFunc func(GetQueueReportByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQueueReportByNameHandlerFunc) Handle(params GetQueueReportByNameParams) middleware.Responder {
	return fn(params)
}

// GetQueueReportByNameHandler interface for that can handle valid get queue report by name params
type GetQueueReportByNameHandler interface {
	Handle(GetQueueReportByNameParams) middleware.Responder
}

// NewGetQueueReportByName creates a new http.Handler for the get queue report by name operation
func NewGetQueueReportByName(ctx *middleware.Context, handler GetQueueReportByNameHandler) *GetQueueReportByName {
	return &GetQueueReportByName{Context: ctx, Handler: handler}
}

/*
	GetQueueReportByName swagger:route GET /api/v1/queues/{queueName}/report getQueueReportByName

Get the most recent scheduling report for each executor for a queue by queue name
*/
type GetQueueReportByName struct {
	Context *middleware.Context
	Handler GetQueueReportByNameHandler
}

func (o *GetQueueReportByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetQueueReportByNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
