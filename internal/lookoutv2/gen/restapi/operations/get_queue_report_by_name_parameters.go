// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQueueReportByNameParams creates a new GetQueueReportByNameParams object
// with the default values initialized.
func NewGetQueueReportByNameParams() GetQueueReportByNameParams {

	var (
		// initialize parameters with default values

		verbosityDefault = int64(0)
	)

	return GetQueueReportByNameParams{
		Verbosity: &verbosityDefault,
	}
}

// GetQueueReportByNameParams contains all the bound params for the get queue report by name operation
// typically these are obtained from a http.Request
//
// swagger:parameters getQueueReportByName
type GetQueueReportByNameParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	QueueName string
	/*Verbosity level of the queue report.
	  In: query
	  Default: 0
	*/
	Verbosity *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetQueueReportByNameParams() beforehand.
func (o *GetQueueReportByNameParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rQueueName, rhkQueueName, _ := route.Params.GetOK("queueName")
	if err := o.bindQueueName(rQueueName, rhkQueueName, route.Formats); err != nil {
		res = append(res, err)
	}

	qVerbosity, qhkVerbosity, _ := qs.GetOK("verbosity")
	if err := o.bindVerbosity(qVerbosity, qhkVerbosity, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindQueueName binds and validates parameter QueueName from path.
func (o *GetQueueReportByNameParams) bindQueueName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.QueueName = raw

	return nil
}

// bindVerbosity binds and validates parameter Verbosity from query.
func (o *GetQueueReportByNameParams) bindVerbosity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetQueueReportByNameParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("verbosity", "query", "int64", raw)
	}
	o.Verbosity = &value

	return nil
}
