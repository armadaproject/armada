// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada/pkg/priorityoverride (interfaces: PriorityOverrideServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./priority_override.go -package=schedulermocks github.com/armadaproject/armada/pkg/priorityoverride PriorityOverrideServiceClient
//

// Package schedulermocks is a generated GoMock package.
package schedulermocks

import (
	context "context"
	reflect "reflect"

	priorityoverride "github.com/armadaproject/armada/pkg/priorityoverride"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPriorityOverrideServiceClient is a mock of PriorityOverrideServiceClient interface.
type MockPriorityOverrideServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPriorityOverrideServiceClientMockRecorder
	isgomock struct{}
}

// MockPriorityOverrideServiceClientMockRecorder is the mock recorder for MockPriorityOverrideServiceClient.
type MockPriorityOverrideServiceClientMockRecorder struct {
	mock *MockPriorityOverrideServiceClient
}

// NewMockPriorityOverrideServiceClient creates a new mock instance.
func NewMockPriorityOverrideServiceClient(ctrl *gomock.Controller) *MockPriorityOverrideServiceClient {
	mock := &MockPriorityOverrideServiceClient{ctrl: ctrl}
	mock.recorder = &MockPriorityOverrideServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriorityOverrideServiceClient) EXPECT() *MockPriorityOverrideServiceClientMockRecorder {
	return m.recorder
}

// GetPriorityOverrides mocks base method.
func (m *MockPriorityOverrideServiceClient) GetPriorityOverrides(ctx context.Context, in *priorityoverride.PriorityOverrideRequest, opts ...grpc.CallOption) (*priorityoverride.PriorityOverrideResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPriorityOverrides", varargs...)
	ret0, _ := ret[0].(*priorityoverride.PriorityOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriorityOverrides indicates an expected call of GetPriorityOverrides.
func (mr *MockPriorityOverrideServiceClientMockRecorder) GetPriorityOverrides(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriorityOverrides", reflect.TypeOf((*MockPriorityOverrideServiceClient)(nil).GetPriorityOverrides), varargs...)
}
