// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada/internal/scheduler/queue (interfaces: QueueCache)

// Package schedulermocks is a generated GoMock package.
package schedulermocks

import (
	reflect "reflect"

	armadacontext "github.com/armadaproject/armada/internal/common/armadacontext"
	api "github.com/armadaproject/armada/pkg/api"
	gomock "github.com/golang/mock/gomock"
)

// MockQueueCache is a mock of QueueCache interface.
type MockQueueCache struct {
	ctrl     *gomock.Controller
	recorder *MockQueueCacheMockRecorder
}

// MockQueueCacheMockRecorder is the mock recorder for MockQueueCache.
type MockQueueCacheMockRecorder struct {
	mock *MockQueueCache
}

// NewMockQueueCache creates a new mock instance.
func NewMockQueueCache(ctrl *gomock.Controller) *MockQueueCache {
	mock := &MockQueueCache{ctrl: ctrl}
	mock.recorder = &MockQueueCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueCache) EXPECT() *MockQueueCacheMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockQueueCache) GetAll(arg0 *armadacontext.Context) ([]*api.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*api.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQueueCacheMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQueueCache)(nil).GetAll), arg0)
}
