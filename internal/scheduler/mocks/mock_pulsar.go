// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/pulsar-client-go/pulsar (interfaces: Client,Producer)

// Package schedulermocks is a generated GoMock package.
package schedulermocks

import (
	context "context"
	reflect "reflect"

	pulsar "github.com/apache/pulsar-client-go/pulsar"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateProducer mocks base method.
func (m *MockClient) CreateProducer(arg0 pulsar.ProducerOptions) (pulsar.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducer", arg0)
	ret0, _ := ret[0].(pulsar.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducer indicates an expected call of CreateProducer.
func (mr *MockClientMockRecorder) CreateProducer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducer", reflect.TypeOf((*MockClient)(nil).CreateProducer), arg0)
}

// CreateReader mocks base method.
func (m *MockClient) CreateReader(arg0 pulsar.ReaderOptions) (pulsar.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReader", arg0)
	ret0, _ := ret[0].(pulsar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReader indicates an expected call of CreateReader.
func (mr *MockClientMockRecorder) CreateReader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReader", reflect.TypeOf((*MockClient)(nil).CreateReader), arg0)
}

// CreateTableView mocks base method.
func (m *MockClient) CreateTableView(arg0 pulsar.TableViewOptions) (pulsar.TableView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableView", arg0)
	ret0, _ := ret[0].(pulsar.TableView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableView indicates an expected call of CreateTableView.
func (mr *MockClientMockRecorder) CreateTableView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableView", reflect.TypeOf((*MockClient)(nil).CreateTableView), arg0)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(arg0 pulsar.ConsumerOptions) (pulsar.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(pulsar.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), arg0)
}

// TopicPartitions mocks base method.
func (m *MockClient) TopicPartitions(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicPartitions", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicPartitions indicates an expected call of TopicPartitions.
func (mr *MockClientMockRecorder) TopicPartitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicPartitions", reflect.TypeOf((*MockClient)(nil).TopicPartitions), arg0)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Flush mocks base method.
func (m *MockProducer) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockProducerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockProducer)(nil).Flush))
}

// LastSequenceID mocks base method.
func (m *MockProducer) LastSequenceID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSequenceID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// LastSequenceID indicates an expected call of LastSequenceID.
func (mr *MockProducerMockRecorder) LastSequenceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSequenceID", reflect.TypeOf((*MockProducer)(nil).LastSequenceID))
}

// Name mocks base method.
func (m *MockProducer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProducerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProducer)(nil).Name))
}

// Send mocks base method.
func (m *MockProducer) Send(arg0 context.Context, arg1 *pulsar.ProducerMessage) (pulsar.MessageID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(pulsar.MessageID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), arg0, arg1)
}

// SendAsync mocks base method.
func (m *MockProducer) SendAsync(arg0 context.Context, arg1 *pulsar.ProducerMessage, arg2 func(pulsar.MessageID, *pulsar.ProducerMessage, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAsync", arg0, arg1, arg2)
}

// SendAsync indicates an expected call of SendAsync.
func (mr *MockProducerMockRecorder) SendAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsync", reflect.TypeOf((*MockProducer)(nil).SendAsync), arg0, arg1, arg2)
}

// Topic mocks base method.
func (m *MockProducer) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockProducerMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockProducer)(nil).Topic))
}
