// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada/pkg/executorapi (interfaces: ExecutorApi_LeaseJobRunsServer)

// Package schedulermocks is a generated GoMock package.
package schedulermocks

import (
	context "context"
	reflect "reflect"

	executorapi "github.com/armadaproject/armada/pkg/executorapi"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockExecutorApi_LeaseJobRunsServer is a mock of ExecutorApi_LeaseJobRunsServer interface.
type MockExecutorApi_LeaseJobRunsServer struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorApi_LeaseJobRunsServerMockRecorder
}

// MockExecutorApi_LeaseJobRunsServerMockRecorder is the mock recorder for MockExecutorApi_LeaseJobRunsServer.
type MockExecutorApi_LeaseJobRunsServerMockRecorder struct {
	mock *MockExecutorApi_LeaseJobRunsServer
}

// NewMockExecutorApi_LeaseJobRunsServer creates a new mock instance.
func NewMockExecutorApi_LeaseJobRunsServer(ctrl *gomock.Controller) *MockExecutorApi_LeaseJobRunsServer {
	mock := &MockExecutorApi_LeaseJobRunsServer{ctrl: ctrl}
	mock.recorder = &MockExecutorApi_LeaseJobRunsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorApi_LeaseJobRunsServer) EXPECT() *MockExecutorApi_LeaseJobRunsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) Recv() (*executorapi.LeaseRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*executorapi.LeaseRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) Send(arg0 *executorapi.LeaseStreamMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockExecutorApi_LeaseJobRunsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockExecutorApi_LeaseJobRunsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockExecutorApi_LeaseJobRunsServer)(nil).SetTrailer), arg0)
}
