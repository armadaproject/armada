// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada/internal/armada/submit (interfaces: Deduplicator,Publisher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	armadacontext "github.com/armadaproject/armada/internal/common/armadacontext"
	api "github.com/armadaproject/armada/pkg/api"
	armadaevents "github.com/armadaproject/armada/pkg/armadaevents"
	gomock "github.com/golang/mock/gomock"
)

// MockDeduplicator is a mock of Deduplicator interface.
type MockDeduplicator struct {
	ctrl     *gomock.Controller
	recorder *MockDeduplicatorMockRecorder
}

// MockDeduplicatorMockRecorder is the mock recorder for MockDeduplicator.
type MockDeduplicatorMockRecorder struct {
	mock *MockDeduplicator
}

// NewMockDeduplicator creates a new mock instance.
func NewMockDeduplicator(ctrl *gomock.Controller) *MockDeduplicator {
	mock := &MockDeduplicator{ctrl: ctrl}
	mock.recorder = &MockDeduplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeduplicator) EXPECT() *MockDeduplicatorMockRecorder {
	return m.recorder
}

// GetOriginalJobIds mocks base method.
func (m *MockDeduplicator) GetOriginalJobIds(arg0 *armadacontext.Context, arg1 string, arg2 []*api.JobSubmitRequestItem) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalJobIds", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalJobIds indicates an expected call of GetOriginalJobIds.
func (mr *MockDeduplicatorMockRecorder) GetOriginalJobIds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalJobIds", reflect.TypeOf((*MockDeduplicator)(nil).GetOriginalJobIds), arg0, arg1, arg2)
}

// StoreOriginalJobIds mocks base method.
func (m *MockDeduplicator) StoreOriginalJobIds(arg0 *armadacontext.Context, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOriginalJobIds", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOriginalJobIds indicates an expected call of StoreOriginalJobIds.
func (mr *MockDeduplicatorMockRecorder) StoreOriginalJobIds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOriginalJobIds", reflect.TypeOf((*MockDeduplicator)(nil).StoreOriginalJobIds), arg0, arg1, arg2)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPublisher) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPublisher)(nil).Close))
}

// PublishMessages mocks base method.
func (m *MockPublisher) PublishMessages(arg0 *armadacontext.Context, arg1 *armadaevents.EventSequence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessages indicates an expected call of PublishMessages.
func (mr *MockPublisherMockRecorder) PublishMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessages", reflect.TypeOf((*MockPublisher)(nil).PublishMessages), arg0, arg1)
}
