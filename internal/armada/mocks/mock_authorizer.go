// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada/internal/armada/server (interfaces: ActionAuthorizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	armadacontext "github.com/armadaproject/armada/internal/common/armadacontext"
	permission "github.com/armadaproject/armada/internal/common/auth/permission"
	queue "github.com/armadaproject/armada/pkg/client/queue"
	gomock "github.com/golang/mock/gomock"
)

// MockActionAuthorizer is a mock of ActionAuthorizer interface.
type MockActionAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockActionAuthorizerMockRecorder
}

// MockActionAuthorizerMockRecorder is the mock recorder for MockActionAuthorizer.
type MockActionAuthorizerMockRecorder struct {
	mock *MockActionAuthorizer
}

// NewMockActionAuthorizer creates a new mock instance.
func NewMockActionAuthorizer(ctrl *gomock.Controller) *MockActionAuthorizer {
	mock := &MockActionAuthorizer{ctrl: ctrl}
	mock.recorder = &MockActionAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionAuthorizer) EXPECT() *MockActionAuthorizerMockRecorder {
	return m.recorder
}

// AuthorizeAction mocks base method.
func (m *MockActionAuthorizer) AuthorizeAction(arg0 *armadacontext.Context, arg1 permission.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeAction indicates an expected call of AuthorizeAction.
func (mr *MockActionAuthorizerMockRecorder) AuthorizeAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeAction", reflect.TypeOf((*MockActionAuthorizer)(nil).AuthorizeAction), arg0, arg1)
}

// AuthorizeQueueAction mocks base method.
func (m *MockActionAuthorizer) AuthorizeQueueAction(arg0 *armadacontext.Context, arg1 queue.Queue, arg2 permission.Permission, arg3 queue.PermissionVerb) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeQueueAction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeQueueAction indicates an expected call of AuthorizeQueueAction.
func (mr *MockActionAuthorizerMockRecorder) AuthorizeQueueAction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeQueueAction", reflect.TypeOf((*MockActionAuthorizer)(nil).AuthorizeQueueAction), arg0, arg1, arg2, arg3)
}
