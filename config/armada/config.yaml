grpcPort: 50051
httpPort: 8080
metricsPort: 9000
corsAllowedOrigins:
  - http://localhost:3000
  - http://localhost:8089
  - http://localhost:10000
cancelJobsBatchSize: 1000
grpc:
  keepaliveParams:
    maxConnectionIdle: 5m
    time: 120s
    timeout: 20s
  keepaliveEnforcementPolicy:
    minTime: 10s
    permitWithoutStream: true
redis:
  addrs:
    - redis:6379
  password: ""
  db: 0
  poolSize: 1000
eventsRedis:
  addrs:
    - redis:6379
  password: ""
  db: 0
  poolSize: 1000
eventsApiRedis:
  addrs:
    - redis:6379
  password: ""
  db: 1
  poolSize: 1000
defaultToLegacyEvents: true
scheduling:
  preemption:
    enabled: true
    priorityClasses:
      armada-default:
        priority: 1000
        maximalResourceFractionPerQueue:
          memory: 0.99
          cpu: 0.99
      armada-preemptible:
        priority: 900
        maximalResourceFractionPerQueue:
          memory: 0.99
          cpu: 0.99
    defaultPriorityClass: armada-default
  queueLeaseBatchSize: 1000
  minimumResourceToSchedule:
    memory: 1000000 # 1Mb
    cpu: 0.1
  maximalResourceFractionToSchedulePerQueue:
    memory: 1.0
    cpu: 1.0
  maximalResourceFractionPerQueue:
    memory: 1.0
    cpu: 1.0
  maximalClusterFractionToSchedule:
    memory: 1.0
    cpu: 1.0
  maximumJobsToSchedule: 5000
  maxQueueReportsToStore: 1000
  MaxJobReportsToStore: 10000
  lease:
    expireAfter: 15m
    expiryLoopInterval: 5s
  defaultJobLimits:
    cpu: 1
    memory: 1Gi
    ephemeral-storage: 8Gi
  defaultJobTolerations:
    - key: "armadaproject.io/armada"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  defaultJobTolerationsByPriorityClass:
    "":
      - key: "armadaproject.io/pc-armada-default"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
    armada-default:
      - key: "armadaproject.io/pc-armada-default"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
    armada-preemptible:
      - key: "armadaproject.io/pc-armada-preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  maxRetries: 5
  resourceScarcity:
    cpu: 1.0
  maxPodSpecSizeBytes: 65535
  minJobResources:
    memory: 1Mi
  indexedResources:
    - cpu
    - memory
  minTerminationGracePeriod: 1s
  maxTerminationGracePeriod: 300s
  gangIdAnnotation: armadaproject.io/gangId
  gangCardinalityAnnotation: armadaproject.io/gangCardinality
queueManagement:
  defaultPriorityFactor: 1000
  defaultQueuedJobsLimit: 0  # No Limit
  autoCreateQueues: true
events:
  storeQueue: "ArmadaEventRedisProcessor"
  jobStatusQueue: "ArmadaEventJobStatusProcessor"
  processorBatchSize: 100
  processorMaxTimeBetweenBatches: 1s
  processorTimeout: 10s
eventsNats:
  clusterID: "test-cluster"
  subject: "ArmadaTest"
  timeout: 10s
  servers:
    - "nats://localhost:4223"
    - "nats://stan:4223"
databaseRetention:
  jobRetentionDuration: 168h
eventRetention:
  expiryEnabled: true
  retentionDuration: 336h
metrics:
  refreshInterval: 5m
pulsar:
  URL: "pulsar://pulsar:6650"
  jobsetEventsTopic: "events"
  redisFromPulsarSubscription: "RedisFromPulsar"
  hostnameSuffix: "svc"
  certNameSuffix: "ingress-tls-certificate"
  dedupTable: pulsar_submit_dedup
  maxConnectionsPerBroker: 1
  compressionType: zlib
  compressionLevel: faster
  eventsPrinter: false
  eventsPrinterSubscription: "EventsPrinter"
  maxAllowedMessageSize: 4194304 # 4MB
postgres:
  maxOpenConns: 100
  maxIdleConns: 25
  connMaxLifetime: 30m
  connection:
    host: postgres
    port: 5432
    user: postgres
    password: psw
    dbname: postgres
    sslmode: disable