grpcPort: 50051
httpPort: 8080
metricsPort: 9000
corsAllowedOrigins: []
priorityHalfTime: 20m
cancelJobsBatchSize: 1000
grpc:
  keepaliveParams:
    maxConnectionIdle: 5m
    time: 2h
    timeout: 20s
  keepaliveEnforcementPolicy:
    minTime: 10s
    permitWithoutStream: false
redis:
  addrs:
    - "localhost:6379"
  password: ""
  db: 0
  poolSize: 1000
eventsRedis:
  addrs:
    - "localhost:6379"
  password: ""
  db: 0
  poolSize: 1000
eventsApiRedis:
  addrs:
    - "localhost:6379"
  password: ""
  db: 1
  poolSize: 1000
defaultToLegacyEvents: true
scheduling:
  preemption:
    # if enabled, Armada will accept submitted jobs which have a priorityClassName field
    # otherwise it will refuse the jobs on submit
    enabled: false
    # priorityClasses field is a map of priority class names to priority values
    # defined priority classes should exist with the same priority in all executor clusters
    priorityClasses: {}
    # if preemption is enabled, Armada server will set the priorityClassName in the job's podSpec
    # with the value of defaultPriorityClass, if the podSpec does not already reference a priority class
    defaultPriorityClass: ""
  useProbabilisticSchedulingForAllResources: true
  queueLeaseBatchSize: 200
  maximumLeasePayloadSizeBytes: 7340032 # 1024 * 1024 * 7
  minimumResourceToSchedule:
    memory: 100000000 # 100Mb
    cpu: 0.25
  maximalClusterFractionToSchedule:
    memory: 0.25
    cpu: 0.25
  maximumJobsToSchedule: 5000
  maxQueueReportsToStore: 1000
  MaxJobReportsToStore: 100000
  lease:
    expireAfter: 15m
    expiryLoopInterval: 5s
  maxRetries: 5
  maxPodSpecSizeBytes: 65535
  minJobResources:
    memory: 1Mi
  preemption:
    enabled: false
  minTerminationGracePeriod: 0s
  maxTerminationGracePeriod: 300s
  defaultTerminationGracePeriod: 5s
queueManagement:
  defaultPriorityFactor: 1000
  defaultQueuedJobsLimit: 0  # No Limit
events:
  storeQueue: "ArmadaEventRedisProcessor"
  jobStatusQueue: "ArmadaEventJobStatusProcessor"
  processorBatchSize: 100
  processorMaxTimeBetweenBatches: 1s
  processorTimeout: 10s
eventsNats:
  timeout: 10s
databaseRetention:
  jobRetentionDuration: 168h # Specified as a Go duration
eventRetention:
  expiryEnabled: true
  retentionDuration: 336h # Specified as a Go duration
metrics:
  refreshInterval: 30s
pulsar:
  enabled: true
  URL: "pulsar://localhost:6650"
  maxAllowedMessageSize: 4194304 # 4MB
  jobsetEventsTopic: "persistent://armada/armada/events"
  redisFromPulsarSubscription: "RedisFromPulsar"
  hostnameSuffix: "svc"
  certNameSuffix: "ingress-tls-certificate"
  eventsPrinter: false
  eventsPrinterSubscription: "EventsPrinter"
