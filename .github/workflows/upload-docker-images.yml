name: Release Armada

on:
  workflow_call: {}

jobs:
  upload-docker-images:
    runs-on: ubuntu-latest
    environment: armada-dockerhub
    steps:
      - name: Download saved docker-images artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: docker-images
      - name: Unzip docker-images artifacts
        run: |
          tar xf docker-images.tar.gz
          rm docker-images.tar.gz
      - name: Upload images to docker
        run: |
          # Note(JayF): All the offical docker actions for uploading these
          # containers also assume you need to rebuild them. That makes them
          # ill-suited for our workflow.
          TAG_SUFFIX=$(echo "${{ github.sha }}" | sed 's|/|-|g')

          if [ "${{github.ref_name}}" = "master" ]; then
            TAG="$TAG_SUFFIX"
          else
            TAG="${{ github.ref_name }}-$TAG_SUFFIX"
          fi

          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

          # Map local images to Docker Hub remote repos, because the source
          # image names have inconsistent prefixes and do not map exactly
          # to the pre-configured DH repo names.
          declare -A uploads

          uploads['armada']='armada-server'
          uploads['armada-binoculars']='armada-binoculars'
          uploads['armada-event-ingester']='armada-event-ingester'
          uploads['armada-executor']='armada-executor'
          uploads['armada-jobservice']='armada-jobservice'
          uploads['armada-lookout']='armada-lookout'
          uploads['armada-lookout-ingester']='armada-lookout-ingester'
          uploads['armadactl']='armada-armadactl'
          uploads['testsuite']='armada-testsuite'

          for img in "${!uploads[@]}" ; do
            remote="gresearch/${uploads[$img]}:${TAG}"
            docker load -i docker-images/$img.tar.gz
            docker tag $img:latest $remote
            echo "Pushing $img to Docker Hub $remote"
            docker push $remote
          done
