name: "Lint"

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: read

jobs:
  ts-lint:
    # TODO(JayF): Determine what nodejs versions we target, and setup matrix-based testing similar to what we do for go
    name: Lint TypeScript
    runs-on: ubuntu-22.04

    steps:
      - name: Adding markdown
        run: echo '### Lint TypeScript ✨' >> $GITHUB_STEP_SUMMARY

      - name: Checkout 
        uses: actions/checkout@v3.3.0

      - name: Setup Node 
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
          cache: yarn
          cache-dependency-path: ./internal/lookout/ui/yarn.lock

      - name: Check TypeScript formatting 
        run: |
          yarn install --frozen-lockfile && yarn run fmt || exit 1
          git status -s -uno | grep '^.T' >> $GITHUB_ENV.LINT_ISSUES || true
        working-directory: ./internal/lookout/ui

      - name: Set Lint issues output for Typescript
        if: failure()
        run: echo "::set-output name=lint-issues::$(cat $GITHUB_ENV.LINT_ISSUES)"

      - name: Generate list using Markdown
        if: always()
        run: |
          echo "- ✔️ Checked out the repository" >> $GITHUB_STEP_SUMMARY
          echo "- ✔️ Set up Node.js with version 16.14.2 and cached Yarn dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ✔️ Checked TypeScript formatting" >> $GITHUB_STEP_SUMMARY
          if [ -s "$GITHUB_ENV.LINT_ISSUES" ]; then
            echo "- ❌ TypeScript lint issues found:" >> $GITHUB_STEP_SUMMARY
            cat "$GITHUB_ENV.LINT_ISSUES" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "- ✔️ No lint issues in TypeScript code" >> $GITHUB_STEP_SUMMARY
          fi

  go-lint:
    name: Lint Go
    runs-on: ubuntu-22.04

    steps:
      - name: Adding markdown
        run: echo '### Lint Go ✨' >> $GITHUB_STEP_SUMMARY

      - name: Checkout 
        uses: actions/checkout@v3.3.0

      - name: Setup Golang with Cache 
        uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "1.20"

      - name: Lint using golangci-lint 
        uses: golangci/golangci-lint-action@v3
        with:
          skip-pkg-cache: true
          skip-build-cache: true
          version: v1.52.2
          only-new-issues: true
          args: --timeout=10m --issues-exit-code=1 --sort-results ./...

      - name: Set Lint issues output for Go
        if: failure()
        run: echo "::set-output name=lint-issues::$(cat ${{ steps.go-lint.outputs.lint-result-path }})"

      - name: Generate list using Markdown
        if: always()
        run: |
          echo "- ✔️ Checked out the repository" >> $GITHUB_STEP_SUMMARY
          echo "- ✔️ Set up Go with version 1.20 and cached dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ✔️ Linted Go code using golangci-lint" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.go-lint.outputs.lint-result-path }}" ]; then
            echo "- ❌ Lint issues found in Golang code" >> $GITHUB_STEP_SUMMARY
            echo "Lint issues:"
            echo "$(cat ${{ steps.go-lint.outputs.lint-result-path }})"
            exit 1
          else
            echo "- ✔️ No lint issues in Golang code" >> $GITHUB_STEP_SUMMARY
          fi
