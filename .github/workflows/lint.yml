name: "Lint"

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: read

jobs:
  ts-lint:
    # TODO(JayF): Determine what nodejs versions we target, and setup matrix-based testing similar to what we do for go
    name: Lint TypeScript
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
          cache: yarn
          cache-dependency-path: ./internal/lookoutui/yarn.lock

      - name: Install Dependencies
        working-directory: ./internal/lookoutui
        run: |
          yarn install --frozen-lockfile

      - name: Generating TypeScript lint results as summary
        working-directory: ./internal/lookoutui
        run: |
          yarn lint &> lint_results.txt || true
          lint_results=$(cat lint_results.txt)
          echo -e "## ðŸª§ Typescript Lint Results\n" >> $GITHUB_STEP_SUMMARY
          if [[ $lint_results =~ "problem" ]]; then
             echo -e "### List of Lint Issues \n" >> $GITHUB_STEP_SUMMARY
             echo -e "${lint_results}" >> $GITHUB_STEP_SUMMARY
             echo -e "${lint_results}"
             exit 1
          else
             echo -e "### No Lint issues found.\n" >> $GITHUB_STEP_SUMMARY
             echo -e "No Lint issues found."
             exit 0
          fi

  go-lint:
    name: Lint Go
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: ./.github/actions/setup-go-cache
        with:
          cache-prefix: go-lint

      - name: Lint using golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0
          only-new-issues: true
          skip-cache: true
          args: --timeout=10m --issues-exit-code=1 ./...

      - name: Generating Golang lint results as summary
        if: ${{ always() }}
        run: |
          golangci-lint run > lint_results.txt || true
          lint_results=$(cat lint_results.txt)
          echo -e "## ðŸª§ Go Lint Results\n" >> $GITHUB_STEP_SUMMARY
          if [ -z "$lint_results" ]; then
            echo -e "### No Lint Issues found.\n" >> $GITHUB_STEP_SUMMARY
          else
              echo -e "###  List of Lint Issues \n" >> $GITHUB_STEP_SUMMARY
              echo -e "${lint_results}" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  protobuf-lint:
    name: Lint Protobuf
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: ./.github/actions/setup-go-cache
        with:
          cache-prefix: protobuf-lint

      - name: Lint using clang-format 17
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: "17"
          fallback-style: Google
          exclude-regex: '^proto\/'
          include-regex: '^.*\.proto$'
        continue-on-error: true

      - name: Lint using protolint
        uses: plexsystems/protolint-action@v0.7.0
        with:
          configDirectory: "."
        continue-on-error: true

      - name: Generating Protobuf lint results as summary
        if: ${{ always() }}
        run: |
          protolint lint . > protolint_results.txt || true
          protolint_results=$(cat protolint_results.txt)
          echo -e "## ðŸª§ Protolint Lint Results\n" >> $GITHUB_STEP_SUMMARY
          if [ -z "$protolint_results" ]; then
            echo -e "### No Lint Issues found.\n" >> $GITHUB_STEP_SUMMARY
          else
              echo -e "###  List of Lint Issues \n" >> $GITHUB_STEP_SUMMARY
              echo -e "${protolint_results}" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true
