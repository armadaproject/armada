corsAllowedOrigins: ["http://localhost:3000", "http://localhost:8089"]
auth:
  basicAuth:
    enableAuthentication: false
  anonymousAuth: true
  permissionGroupMapping:
    submit_jobs: ["everyone"]
    submit_any_jobs: ["everyone"]
    create_queue: ["everyone"]
    delete_queue: ["everyone"]
    cancel_jobs: ["everyone"]
    cancel_any_jobs: ["everyone"]
    reprioritize_jobs: ["everyone"]
    reprioritize_any_jobs: ["everyone"]
    watch_events: ["everyone"]
    watch_all_events: ["everyone"]
    execute_jobs: ["everyone"]
redis:
  addrs:
    - "redis:6379"
eventsRedis:
  addrs:
    - "redis:6379"
eventapi:
  postgres:
    connection:
      host: "postgres"
pulsar:
  enabled: true
  URL: "pulsar://pulsar:6650"
  jobsetEventsTopic: "persistent://armada/armada/events"
  redisFromPulsarSubscription: "RedisFromPulsar"
  pulsarFromPulsarSubscription: "PulsarFromPulsar"
  hostnameSuffix: "svc"
  certNameSuffix: "ingress-tls-certificate"
  dedupTable: pulsar_submit_dedup
  eventsPrinter: true
  eventsPrinterSubscription: "EventsPrinter"
  maxAllowedMessageSize: 4194304 # 4MB
postgres:
  maxOpenConns: 100
  maxIdleConns: 25
  connMaxLifetime: 30m
  connection:
    host: postgres
    port: 5432
    user: postgres
    password: psw
    dbname: postgres
    sslmode: disable
eventsNats:
  Servers:
    - "nats://stan:4223"
  ClusterID: "test-cluster"
  Subject: "ArmadaTest"
  QueueGroup: "ArmadaEventRedisProcessor"
    
