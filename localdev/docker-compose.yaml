version: "3.8"

networks:
  kind:
    external: true

volumes:
  # shared gopath volume for armada services
  # with this, modules do not need to be redundantly downloaded
  # and persist through restarts
  gopath:
  # shared gocache volume for armada services
  # with this, build artifacts do not need to be redundantly downloaded
  # and persist through restarts
  go-cache:

services:
  #
  # Armada services.
  #
  server:
    container_name: server
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - 50051:50051
      - 8080:8080
    volumes:
      - "../developer:/developer:rw"
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    env_file:
      - ../developer/env/armada.env
    working_dir: /app
    entrypoint: go
    command: run cmd/armada/main.go --config /developer/config/insecure-armada.yaml

  lookout:
    container_name: lookout
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - "8089:8080"
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    depends_on:
      - server
      - lookout-ingester
    env_file:
      - ../developer/env/lookout.env
    working_dir: "/app"
    entrypoint: sh -c "go run ./cmd/lookout/main.go --migrateDatabase && go run ./cmd/lookout/main.go"

  lookoutv2:
    container_name: lookoutv2
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - "10000:10000"
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    depends_on:
      - server
      - lookout-ingesterv2
    env_file:
      - ../developer/env/lookoutv2.env
    working_dir: "/app"
    entrypoint: sh -c "go run ./cmd/lookoutv2/main.go --migrateDatabase && go run ./cmd/lookoutv2/main.go"

  executor:
    container_name: executor
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - 9001:9001
    depends_on:
      - server
    volumes:
      - ../.kube/internal:/.kube
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    environment:
      - KUBECONFIG=/.kube/config
    env_file:
      - ../developer/env/executor.env
    working_dir: /app
    entrypoint: go
    command: run cmd/executor/main.go

  binoculars:
    container_name: binoculars
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - 8082:8082
    depends_on:
      - server
    volumes:
      - ../.kube/internal:/.kube
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    environment:
      - KUBECONFIG=/.kube/config
    working_dir: /app
    entrypoint: go
    command: run cmd/binoculars/main.go

  jobservice:
    container_name: jobservice
    image: golang:1.18-buster
    networks:
      - kind
    ports:
      - 60003:60003
    depends_on:
      - server
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    working_dir: "/app"
    entrypoint: go
    command: run cmd/jobservice/main.go run

  lookout-ingester:
    container_name: lookout-ingester
    image: golang:1.18-buster
    networks:
      - kind
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    working_dir: /app
    entrypoint: go
    command: run cmd/lookoutingester/main.go

  lookout-ingesterv2:
    container_name: lookout-ingesterv2
    image: golang:1.18-buster
    networks:
      - kind
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    env_file:
      - ../developer/env/lookoutv2.env
    working_dir: /app
    entrypoint: go
    command: run cmd/lookoutingesterv2/main.go

  event-ingester:
    container_name: event-ingester
    image: golang:1.18-buster
    networks:
      - kind
    volumes:
      - "..:/app:rw"
      - "gopath:/go:rw"
      - "go-cache:/root/.cache/go-build:rw"
    working_dir: /app
    entrypoint: go
    command: run cmd/eventingester/main.go

  airflow:
    container_name: airflow
    image: python:3.8-buster
    networks:
      - kind
    ports:
      - 8081:8081
    volumes:
      - "..:/app:rw"
    working_dir: "/app"
    entrypoint: sh -c "localdev/scripts/airflow-start.sh"