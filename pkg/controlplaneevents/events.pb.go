// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/controlplaneevents/events.proto

package controlplaneevents

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A subset of JobState including only non-terminal states
type ActiveJobState int32

const (
	ActiveJobState_UNKNOWN ActiveJobState = 0
	ActiveJobState_QUEUED  ActiveJobState = 1
	ActiveJobState_LEASED  ActiveJobState = 2
	ActiveJobState_PENDING ActiveJobState = 3
	ActiveJobState_RUNNING ActiveJobState = 4
)

var ActiveJobState_name = map[int32]string{
	0: "UNKNOWN",
	1: "QUEUED",
	2: "LEASED",
	3: "PENDING",
	4: "RUNNING",
}

var ActiveJobState_value = map[string]int32{
	"UNKNOWN": 0,
	"QUEUED":  1,
	"LEASED":  2,
	"PENDING": 3,
	"RUNNING": 4,
}

func (x ActiveJobState) String() string {
	return proto.EnumName(ActiveJobState_name, int32(x))
}

func (ActiveJobState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{0}
}

type Event struct {
	Created *types.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_ExecutorSettingsUpsert
	//	*Event_ExecutorSettingsDelete
	//	*Event_PreemptOnExecutor
	//	*Event_CancelOnExecutor
	//	*Event_PreemptOnQueue
	//	*Event_CancelOnQueue
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ExecutorSettingsUpsert struct {
	ExecutorSettingsUpsert *ExecutorSettingsUpsert `protobuf:"bytes,2,opt,name=executorSettingsUpsert,proto3,oneof" json:"executorSettingsUpsert,omitempty"`
}
type Event_ExecutorSettingsDelete struct {
	ExecutorSettingsDelete *ExecutorSettingsDelete `protobuf:"bytes,3,opt,name=executorSettingsDelete,proto3,oneof" json:"executorSettingsDelete,omitempty"`
}
type Event_PreemptOnExecutor struct {
	PreemptOnExecutor *PreemptOnExecutor `protobuf:"bytes,4,opt,name=preemptOnExecutor,proto3,oneof" json:"preemptOnExecutor,omitempty"`
}
type Event_CancelOnExecutor struct {
	CancelOnExecutor *CancelOnExecutor `protobuf:"bytes,5,opt,name=cancelOnExecutor,proto3,oneof" json:"cancelOnExecutor,omitempty"`
}
type Event_PreemptOnQueue struct {
	PreemptOnQueue *PreemptOnQueue `protobuf:"bytes,6,opt,name=preemptOnQueue,proto3,oneof" json:"preemptOnQueue,omitempty"`
}
type Event_CancelOnQueue struct {
	CancelOnQueue *CancelOnQueue `protobuf:"bytes,7,opt,name=cancelOnQueue,proto3,oneof" json:"cancelOnQueue,omitempty"`
}

func (*Event_ExecutorSettingsUpsert) isEvent_Event() {}
func (*Event_ExecutorSettingsDelete) isEvent_Event() {}
func (*Event_PreemptOnExecutor) isEvent_Event()      {}
func (*Event_CancelOnExecutor) isEvent_Event()       {}
func (*Event_PreemptOnQueue) isEvent_Event()         {}
func (*Event_CancelOnQueue) isEvent_Event()          {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Event) GetExecutorSettingsUpsert() *ExecutorSettingsUpsert {
	if x, ok := m.GetEvent().(*Event_ExecutorSettingsUpsert); ok {
		return x.ExecutorSettingsUpsert
	}
	return nil
}

func (m *Event) GetExecutorSettingsDelete() *ExecutorSettingsDelete {
	if x, ok := m.GetEvent().(*Event_ExecutorSettingsDelete); ok {
		return x.ExecutorSettingsDelete
	}
	return nil
}

func (m *Event) GetPreemptOnExecutor() *PreemptOnExecutor {
	if x, ok := m.GetEvent().(*Event_PreemptOnExecutor); ok {
		return x.PreemptOnExecutor
	}
	return nil
}

func (m *Event) GetCancelOnExecutor() *CancelOnExecutor {
	if x, ok := m.GetEvent().(*Event_CancelOnExecutor); ok {
		return x.CancelOnExecutor
	}
	return nil
}

func (m *Event) GetPreemptOnQueue() *PreemptOnQueue {
	if x, ok := m.GetEvent().(*Event_PreemptOnQueue); ok {
		return x.PreemptOnQueue
	}
	return nil
}

func (m *Event) GetCancelOnQueue() *CancelOnQueue {
	if x, ok := m.GetEvent().(*Event_CancelOnQueue); ok {
		return x.CancelOnQueue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_ExecutorSettingsUpsert)(nil),
		(*Event_ExecutorSettingsDelete)(nil),
		(*Event_PreemptOnExecutor)(nil),
		(*Event_CancelOnExecutor)(nil),
		(*Event_PreemptOnQueue)(nil),
		(*Event_CancelOnQueue)(nil),
	}
}

type ExecutorSettingsUpsert struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cordoned     bool   `protobuf:"varint,2,opt,name=cordoned,proto3" json:"cordoned,omitempty"`
	CordonReason string `protobuf:"bytes,3,opt,name=cordonReason,proto3" json:"cordonReason,omitempty"`
	SetByUser    string `protobuf:"bytes,4,opt,name=setByUser,proto3" json:"setByUser,omitempty"`
}

func (m *ExecutorSettingsUpsert) Reset()         { *m = ExecutorSettingsUpsert{} }
func (m *ExecutorSettingsUpsert) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsUpsert) ProtoMessage()    {}
func (*ExecutorSettingsUpsert) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{1}
}
func (m *ExecutorSettingsUpsert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsUpsert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsUpsert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsUpsert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsUpsert.Merge(m, src)
}
func (m *ExecutorSettingsUpsert) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsUpsert) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsUpsert.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsUpsert proto.InternalMessageInfo

func (m *ExecutorSettingsUpsert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorSettingsUpsert) GetCordoned() bool {
	if m != nil {
		return m.Cordoned
	}
	return false
}

func (m *ExecutorSettingsUpsert) GetCordonReason() string {
	if m != nil {
		return m.CordonReason
	}
	return ""
}

func (m *ExecutorSettingsUpsert) GetSetByUser() string {
	if m != nil {
		return m.SetByUser
	}
	return ""
}

type ExecutorSettingsDelete struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ExecutorSettingsDelete) Reset()         { *m = ExecutorSettingsDelete{} }
func (m *ExecutorSettingsDelete) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsDelete) ProtoMessage()    {}
func (*ExecutorSettingsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{2}
}
func (m *ExecutorSettingsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsDelete.Merge(m, src)
}
func (m *ExecutorSettingsDelete) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsDelete proto.InternalMessageInfo

func (m *ExecutorSettingsDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PreemptOnExecutor struct {
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues          []string `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	PriorityClasses []string `protobuf:"bytes,3,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
}

func (m *PreemptOnExecutor) Reset()         { *m = PreemptOnExecutor{} }
func (m *PreemptOnExecutor) String() string { return proto.CompactTextString(m) }
func (*PreemptOnExecutor) ProtoMessage()    {}
func (*PreemptOnExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{3}
}
func (m *PreemptOnExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreemptOnExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreemptOnExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreemptOnExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptOnExecutor.Merge(m, src)
}
func (m *PreemptOnExecutor) XXX_Size() int {
	return m.Size()
}
func (m *PreemptOnExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptOnExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptOnExecutor proto.InternalMessageInfo

func (m *PreemptOnExecutor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreemptOnExecutor) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *PreemptOnExecutor) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

type CancelOnExecutor struct {
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues          []string `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	PriorityClasses []string `protobuf:"bytes,3,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
}

func (m *CancelOnExecutor) Reset()         { *m = CancelOnExecutor{} }
func (m *CancelOnExecutor) String() string { return proto.CompactTextString(m) }
func (*CancelOnExecutor) ProtoMessage()    {}
func (*CancelOnExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{4}
}
func (m *CancelOnExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOnExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOnExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOnExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOnExecutor.Merge(m, src)
}
func (m *CancelOnExecutor) XXX_Size() int {
	return m.Size()
}
func (m *CancelOnExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOnExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOnExecutor proto.InternalMessageInfo

func (m *CancelOnExecutor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelOnExecutor) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *CancelOnExecutor) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

type PreemptOnQueue struct {
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
}

func (m *PreemptOnQueue) Reset()         { *m = PreemptOnQueue{} }
func (m *PreemptOnQueue) String() string { return proto.CompactTextString(m) }
func (*PreemptOnQueue) ProtoMessage()    {}
func (*PreemptOnQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{5}
}
func (m *PreemptOnQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreemptOnQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreemptOnQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreemptOnQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptOnQueue.Merge(m, src)
}
func (m *PreemptOnQueue) XXX_Size() int {
	return m.Size()
}
func (m *PreemptOnQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptOnQueue.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptOnQueue proto.InternalMessageInfo

func (m *PreemptOnQueue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreemptOnQueue) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

type CancelOnQueue struct {
	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string         `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	JobStates       []ActiveJobState `protobuf:"varint,3,rep,packed,name=jobStates,proto3,enum=controlplaneevents.ActiveJobState" json:"jobStates,omitempty"`
}

func (m *CancelOnQueue) Reset()         { *m = CancelOnQueue{} }
func (m *CancelOnQueue) String() string { return proto.CompactTextString(m) }
func (*CancelOnQueue) ProtoMessage()    {}
func (*CancelOnQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{6}
}
func (m *CancelOnQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOnQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOnQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOnQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOnQueue.Merge(m, src)
}
func (m *CancelOnQueue) XXX_Size() int {
	return m.Size()
}
func (m *CancelOnQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOnQueue.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOnQueue proto.InternalMessageInfo

func (m *CancelOnQueue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelOnQueue) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

func (m *CancelOnQueue) GetJobStates() []ActiveJobState {
	if m != nil {
		return m.JobStates
	}
	return nil
}

func init() {
	proto.RegisterEnum("controlplaneevents.ActiveJobState", ActiveJobState_name, ActiveJobState_value)
	proto.RegisterType((*Event)(nil), "controlplaneevents.Event")
	proto.RegisterType((*ExecutorSettingsUpsert)(nil), "controlplaneevents.ExecutorSettingsUpsert")
	proto.RegisterType((*ExecutorSettingsDelete)(nil), "controlplaneevents.ExecutorSettingsDelete")
	proto.RegisterType((*PreemptOnExecutor)(nil), "controlplaneevents.PreemptOnExecutor")
	proto.RegisterType((*CancelOnExecutor)(nil), "controlplaneevents.CancelOnExecutor")
	proto.RegisterType((*PreemptOnQueue)(nil), "controlplaneevents.PreemptOnQueue")
	proto.RegisterType((*CancelOnQueue)(nil), "controlplaneevents.CancelOnQueue")
}

func init() {
	proto.RegisterFile("pkg/controlplaneevents/events.proto", fileDescriptor_2ccee8bdbf348752)
}

var fileDescriptor_2ccee8bdbf348752 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcf, 0x6e, 0xd3, 0x4a,
	0x18, 0xc5, 0xe3, 0xa4, 0x4d, 0x9a, 0xe9, 0x6d, 0x6e, 0x3a, 0xf7, 0x92, 0x9a, 0x14, 0x32, 0x25,
	0x2d, 0xa8, 0xaa, 0x2a, 0x47, 0x2a, 0x82, 0x25, 0xa2, 0x6e, 0xa2, 0x52, 0x8a, 0xdc, 0x34, 0x25,
	0x42, 0xb0, 0x73, 0x9c, 0x69, 0x70, 0x89, 0x3d, 0xc6, 0x9e, 0x44, 0x74, 0xc9, 0x96, 0x15, 0xcf,
	0xc1, 0x0e, 0x36, 0xbc, 0x02, 0xcb, 0x2e, 0x91, 0x90, 0x2c, 0xd4, 0xee, 0xcc, 0x4b, 0x20, 0xcf,
	0x24, 0xa9, 0xff, 0x51, 0x45, 0x2c, 0x10, 0xab, 0x78, 0x66, 0x7e, 0xe7, 0x3b, 0x67, 0x46, 0xf3,
	0xc5, 0x06, 0xab, 0xd6, 0xab, 0x5e, 0x4d, 0x23, 0x26, 0xb5, 0x49, 0xdf, 0xea, 0xab, 0x26, 0xc6,
	0x43, 0x6c, 0x52, 0xa7, 0xc6, 0x7f, 0x24, 0xcb, 0x26, 0x94, 0x40, 0x18, 0x07, 0xca, 0xa8, 0x47,
	0x48, 0xaf, 0x8f, 0x6b, 0x8c, 0xe8, 0x0c, 0x8e, 0x6b, 0x54, 0x37, 0xb0, 0x43, 0x55, 0xc3, 0xe2,
	0xa2, 0xea, 0xe7, 0x2c, 0x98, 0x6d, 0xf8, 0x2c, 0xdc, 0x07, 0x39, 0xcd, 0xc6, 0x2a, 0xc5, 0x5d,
	0x51, 0x58, 0x11, 0xd6, 0xe7, 0xb7, 0xca, 0x12, 0x17, 0x4b, 0x63, 0xb1, 0xf4, 0x74, 0x2c, 0x96,
	0xaf, 0x79, 0x2e, 0x5a, 0x1c, 0xe1, 0x9b, 0xc4, 0xd0, 0x29, 0x36, 0x2c, 0x7a, 0xda, 0x1a, 0x57,
	0x80, 0xef, 0x04, 0x50, 0xc2, 0x6f, 0xb0, 0x36, 0xa0, 0xc4, 0x3e, 0xc2, 0x94, 0xea, 0x66, 0xcf,
	0x69, 0x5b, 0x0e, 0xb6, 0xa9, 0x98, 0x66, 0xc5, 0x37, 0xa4, 0x78, 0x5a, 0xa9, 0x91, 0xa8, 0x90,
	0xd7, 0x3c, 0x17, 0xad, 0x24, 0x57, 0xbb, 0xf4, 0x7e, 0x94, 0x6a, 0xfd, 0xc2, 0x31, 0x31, 0x4c,
	0x1d, 0xf7, 0x31, 0xc5, 0x62, 0x66, 0xfa, 0x30, 0x5c, 0x91, 0x1c, 0x86, 0xaf, 0x5d, 0x1d, 0x86,
	0x33, 0x70, 0x08, 0x16, 0x2d, 0x1b, 0xfb, 0xd4, 0x81, 0x39, 0xb6, 0x10, 0x67, 0x58, 0x8c, 0xdb,
	0x49, 0x31, 0x9a, 0x51, 0x58, 0x46, 0x9e, 0x8b, 0x96, 0x63, 0x35, 0x42, 0xe6, 0x71, 0x0b, 0x68,
	0x83, 0xa2, 0xa6, 0x9a, 0x1a, 0xee, 0x07, 0x6c, 0x67, 0x99, 0xed, 0x5a, 0x92, 0xed, 0x4e, 0x84,
	0x95, 0x2b, 0x9e, 0x8b, 0xca, 0xd1, 0x0a, 0x21, 0xd3, 0x58, 0x7d, 0x78, 0x02, 0x0a, 0x93, 0x20,
	0x87, 0x03, 0x3c, 0xc0, 0x62, 0x96, 0x39, 0x56, 0xaf, 0xdc, 0x28, 0x23, 0xe5, 0x1b, 0x9e, 0x8b,
	0xc4, 0xb0, 0x3a, 0xe4, 0x16, 0xa9, 0x0c, 0x8f, 0xc1, 0xc2, 0xd8, 0x9f, 0x5b, 0xe5, 0x98, 0xd5,
	0xad, 0xab, 0x36, 0xc7, 0x9d, 0x96, 0x3d, 0x17, 0x2d, 0x85, 0xb4, 0x21, 0xa3, 0x70, 0x59, 0x39,
	0x07, 0x66, 0x59, 0x95, 0xea, 0x0f, 0x01, 0x94, 0x92, 0x2f, 0x2c, 0xbc, 0x03, 0x66, 0x4c, 0xd5,
	0xc0, 0xac, 0x8f, 0xf2, 0x32, 0xf4, 0x5c, 0x54, 0xf0, 0xc7, 0x81, 0x46, 0x61, 0xeb, 0x70, 0x0b,
	0xcc, 0x69, 0xc4, 0xee, 0x12, 0x13, 0x77, 0x59, 0x5b, 0xcc, 0xc9, 0x25, 0xcf, 0x45, 0x70, 0x3c,
	0x17, 0xe0, 0x27, 0x1c, 0x7c, 0x00, 0xfe, 0xe1, 0xcf, 0x2d, 0xac, 0x3a, 0xc4, 0x64, 0x37, 0x38,
	0x2f, 0x97, 0x3d, 0x17, 0x95, 0x82, 0xf3, 0x01, 0x6d, 0x88, 0x87, 0xf7, 0x40, 0xde, 0xc1, 0x54,
	0x3e, 0x6d, 0x3b, 0x98, 0xdf, 0xbb, 0xbc, 0xbc, 0xe4, 0xb9, 0xe8, 0xbf, 0xc9, 0x64, 0x40, 0x79,
	0x49, 0x56, 0x1f, 0xc6, 0x37, 0x3b, 0xba, 0xd0, 0x53, 0x6e, 0xb6, 0xfa, 0x49, 0x00, 0x8b, 0xb1,
	0xcb, 0x3c, 0xf5, 0x51, 0x6d, 0x82, 0xec, 0x6b, 0xff, 0xfc, 0x1d, 0x31, 0xbd, 0x92, 0x59, 0xcf,
	0xcb, 0xff, 0x7b, 0x2e, 0x2a, 0xf2, 0x99, 0x00, 0x3b, 0x62, 0xe0, 0x2e, 0xf8, 0xd7, 0xb2, 0x75,
	0x62, 0xeb, 0xf4, 0x74, 0xa7, 0xaf, 0x3a, 0x0e, 0x76, 0xc4, 0x0c, 0x93, 0xdd, 0xf4, 0x5c, 0x74,
	0x3d, 0xb2, 0x14, 0xd0, 0x47, 0x55, 0xd5, 0x8f, 0x02, 0x28, 0x46, 0x5b, 0xe1, 0x6f, 0xcf, 0xfc,
	0x56, 0x00, 0x85, 0x70, 0x33, 0x4d, 0x9d, 0x38, 0x21, 0x43, 0xfa, 0xb7, 0x32, 0x7c, 0x13, 0xc0,
	0x42, 0xa8, 0xcb, 0xfe, 0x78, 0x04, 0xf8, 0x1c, 0xe4, 0x4f, 0x48, 0xe7, 0x88, 0xaa, 0x74, 0x74,
	0x92, 0x85, 0xe4, 0xff, 0x9d, 0x6d, 0x8d, 0xea, 0x43, 0xfc, 0x78, 0x84, 0xf2, 0x66, 0x98, 0x08,
	0x83, 0xcd, 0x30, 0x99, 0xdc, 0x38, 0x00, 0x85, 0xb0, 0x0a, 0xce, 0x83, 0x5c, 0x5b, 0xd9, 0x57,
	0x0e, 0x9e, 0x29, 0xc5, 0x14, 0x04, 0x20, 0x7b, 0xd8, 0x6e, 0xb4, 0x1b, 0xf5, 0xa2, 0xe0, 0x3f,
	0x3f, 0x69, 0x6c, 0x1f, 0x35, 0xea, 0xc5, 0xb4, 0x0f, 0x35, 0x1b, 0x4a, 0x7d, 0x4f, 0xd9, 0x2d,
	0x66, 0xfc, 0x41, 0xab, 0xad, 0x28, 0xfe, 0x60, 0x46, 0x1e, 0x7e, 0x39, 0xaf, 0x08, 0x67, 0xe7,
	0x15, 0xe1, 0xfb, 0x79, 0x45, 0x78, 0x7f, 0x51, 0x49, 0x9d, 0x5d, 0x54, 0x52, 0x5f, 0x2f, 0x2a,
	0xa9, 0x17, 0xf7, 0x7b, 0x3a, 0x7d, 0x39, 0xe8, 0x48, 0x1a, 0x31, 0x6a, 0xaa, 0x6d, 0xa8, 0x5d,
	0xd5, 0xb2, 0xc9, 0x09, 0xd6, 0xe8, 0x68, 0x54, 0x4b, 0xfe, 0x32, 0xf8, 0x90, 0x5e, 0xdd, 0x66,
	0xeb, 0x4d, 0x4e, 0x4b, 0x7b, 0x44, 0xda, 0xe1, 0x54, 0xd3, 0xa7, 0xd8, 0x2b, 0xdf, 0xe9, 0x64,
	0xd9, 0xab, 0xfd, 0xee, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xd1, 0xf1, 0xaf, 0x60, 0x08,
	0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ExecutorSettingsUpsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ExecutorSettingsUpsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutorSettingsUpsert != nil {
		{
			size, err := m.ExecutorSettingsUpsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Event_ExecutorSettingsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ExecutorSettingsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutorSettingsDelete != nil {
		{
			size, err := m.ExecutorSettingsDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_PreemptOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_PreemptOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreemptOnExecutor != nil {
		{
			size, err := m.PreemptOnExecutor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_CancelOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_CancelOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelOnExecutor != nil {
		{
			size, err := m.CancelOnExecutor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event_PreemptOnQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_PreemptOnQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreemptOnQueue != nil {
		{
			size, err := m.PreemptOnQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Event_CancelOnQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_CancelOnQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelOnQueue != nil {
		{
			size, err := m.CancelOnQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ExecutorSettingsUpsert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsUpsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsUpsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SetByUser) > 0 {
		i -= len(m.SetByUser)
		copy(dAtA[i:], m.SetByUser)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SetByUser)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CordonReason) > 0 {
		i -= len(m.CordonReason)
		copy(dAtA[i:], m.CordonReason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CordonReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cordoned {
		i--
		if m.Cordoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorSettingsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreemptOnExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreemptOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreemptOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Queues[iNdEx])
			copy(dAtA[i:], m.Queues[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Queues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelOnExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Queues[iNdEx])
			copy(dAtA[i:], m.Queues[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Queues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreemptOnQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreemptOnQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreemptOnQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelOnQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOnQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOnQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobStates) > 0 {
		dAtA9 := make([]byte, len(m.JobStates)*10)
		var j8 int
		for _, num := range m.JobStates {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintEvents(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_ExecutorSettingsUpsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutorSettingsUpsert != nil {
		l = m.ExecutorSettingsUpsert.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_ExecutorSettingsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutorSettingsDelete != nil {
		l = m.ExecutorSettingsDelete.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_PreemptOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreemptOnExecutor != nil {
		l = m.PreemptOnExecutor.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_CancelOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelOnExecutor != nil {
		l = m.CancelOnExecutor.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_PreemptOnQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreemptOnQueue != nil {
		l = m.PreemptOnQueue.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_CancelOnQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelOnQueue != nil {
		l = m.CancelOnQueue.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *ExecutorSettingsUpsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Cordoned {
		n += 2
	}
	l = len(m.CordonReason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SetByUser)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ExecutorSettingsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *PreemptOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Queues) > 0 {
		for _, s := range m.Queues {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *CancelOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Queues) > 0 {
		for _, s := range m.Queues {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *PreemptOnQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *CancelOnQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.JobStates) > 0 {
		l = 0
		for _, e := range m.JobStates {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorSettingsUpsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecutorSettingsUpsert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_ExecutorSettingsUpsert{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorSettingsDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecutorSettingsDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_ExecutorSettingsDelete{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptOnExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PreemptOnExecutor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_PreemptOnExecutor{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOnExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelOnExecutor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_CancelOnExecutor{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptOnQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PreemptOnQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_PreemptOnQueue{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOnQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelOnQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_CancelOnQueue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorSettingsUpsert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsUpsert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsUpsert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cordoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cordoned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CordonReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CordonReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetByUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetByUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorSettingsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreemptOnExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreemptOnExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreemptOnExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOnExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOnExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOnExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreemptOnQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreemptOnQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreemptOnQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOnQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOnQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOnQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v ActiveJobState
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ActiveJobState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.JobStates = append(m.JobStates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.JobStates) == 0 {
					m.JobStates = make([]ActiveJobState, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ActiveJobState
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ActiveJobState(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.JobStates = append(m.JobStates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field JobStates", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
