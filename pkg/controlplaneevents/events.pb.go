// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/controlplaneevents/events.proto

package controlplaneevents

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Created *types.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_ExecutorSettingsUpsert
	//	*Event_ExecutorSettingsDelete
	//	*Event_PreemptOnExecutor
	//	*Event_CancelOnExecutor
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ExecutorSettingsUpsert struct {
	ExecutorSettingsUpsert *ExecutorSettingsUpsert `protobuf:"bytes,2,opt,name=executorSettingsUpsert,proto3,oneof" json:"executorSettingsUpsert,omitempty"`
}
type Event_ExecutorSettingsDelete struct {
	ExecutorSettingsDelete *ExecutorSettingsDelete `protobuf:"bytes,3,opt,name=executorSettingsDelete,proto3,oneof" json:"executorSettingsDelete,omitempty"`
}
type Event_PreemptOnExecutor struct {
	PreemptOnExecutor *PreemptOnExecutor `protobuf:"bytes,4,opt,name=preemptOnExecutor,proto3,oneof" json:"preemptOnExecutor,omitempty"`
}
type Event_CancelOnExecutor struct {
	CancelOnExecutor *CancelOnExecutor `protobuf:"bytes,5,opt,name=cancelOnExecutor,proto3,oneof" json:"cancelOnExecutor,omitempty"`
}

func (*Event_ExecutorSettingsUpsert) isEvent_Event() {}
func (*Event_ExecutorSettingsDelete) isEvent_Event() {}
func (*Event_PreemptOnExecutor) isEvent_Event()      {}
func (*Event_CancelOnExecutor) isEvent_Event()       {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Event) GetExecutorSettingsUpsert() *ExecutorSettingsUpsert {
	if x, ok := m.GetEvent().(*Event_ExecutorSettingsUpsert); ok {
		return x.ExecutorSettingsUpsert
	}
	return nil
}

func (m *Event) GetExecutorSettingsDelete() *ExecutorSettingsDelete {
	if x, ok := m.GetEvent().(*Event_ExecutorSettingsDelete); ok {
		return x.ExecutorSettingsDelete
	}
	return nil
}

func (m *Event) GetPreemptOnExecutor() *PreemptOnExecutor {
	if x, ok := m.GetEvent().(*Event_PreemptOnExecutor); ok {
		return x.PreemptOnExecutor
	}
	return nil
}

func (m *Event) GetCancelOnExecutor() *CancelOnExecutor {
	if x, ok := m.GetEvent().(*Event_CancelOnExecutor); ok {
		return x.CancelOnExecutor
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_ExecutorSettingsUpsert)(nil),
		(*Event_ExecutorSettingsDelete)(nil),
		(*Event_PreemptOnExecutor)(nil),
		(*Event_CancelOnExecutor)(nil),
	}
}

type ExecutorSettingsUpsert struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cordoned     bool   `protobuf:"varint,2,opt,name=cordoned,proto3" json:"cordoned,omitempty"`
	CordonReason string `protobuf:"bytes,3,opt,name=cordonReason,proto3" json:"cordonReason,omitempty"`
	SetByUser    string `protobuf:"bytes,4,opt,name=setByUser,proto3" json:"setByUser,omitempty"`
}

func (m *ExecutorSettingsUpsert) Reset()         { *m = ExecutorSettingsUpsert{} }
func (m *ExecutorSettingsUpsert) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsUpsert) ProtoMessage()    {}
func (*ExecutorSettingsUpsert) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{1}
}
func (m *ExecutorSettingsUpsert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsUpsert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsUpsert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsUpsert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsUpsert.Merge(m, src)
}
func (m *ExecutorSettingsUpsert) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsUpsert) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsUpsert.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsUpsert proto.InternalMessageInfo

func (m *ExecutorSettingsUpsert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorSettingsUpsert) GetCordoned() bool {
	if m != nil {
		return m.Cordoned
	}
	return false
}

func (m *ExecutorSettingsUpsert) GetCordonReason() string {
	if m != nil {
		return m.CordonReason
	}
	return ""
}

func (m *ExecutorSettingsUpsert) GetSetByUser() string {
	if m != nil {
		return m.SetByUser
	}
	return ""
}

type ExecutorSettingsDelete struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ExecutorSettingsDelete) Reset()         { *m = ExecutorSettingsDelete{} }
func (m *ExecutorSettingsDelete) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsDelete) ProtoMessage()    {}
func (*ExecutorSettingsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{2}
}
func (m *ExecutorSettingsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsDelete.Merge(m, src)
}
func (m *ExecutorSettingsDelete) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsDelete proto.InternalMessageInfo

func (m *ExecutorSettingsDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PreemptOnExecutor struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// We select jobs to preempt on the executor based on the provided Select message
	//
	// Types that are valid to be assigned to Select:
	//
	//	*PreemptOnExecutor_PriorityClasses
	//	*PreemptOnExecutor_Queues
	Select isPreemptOnExecutor_Select `protobuf_oneof:"Select"`
}

func (m *PreemptOnExecutor) Reset()         { *m = PreemptOnExecutor{} }
func (m *PreemptOnExecutor) String() string { return proto.CompactTextString(m) }
func (*PreemptOnExecutor) ProtoMessage()    {}
func (*PreemptOnExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{3}
}
func (m *PreemptOnExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreemptOnExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreemptOnExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreemptOnExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptOnExecutor.Merge(m, src)
}
func (m *PreemptOnExecutor) XXX_Size() int {
	return m.Size()
}
func (m *PreemptOnExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptOnExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptOnExecutor proto.InternalMessageInfo

type isPreemptOnExecutor_Select interface {
	isPreemptOnExecutor_Select()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PreemptOnExecutor_PriorityClasses struct {
	PriorityClasses *ByPriorityClass `protobuf:"bytes,2,opt,name=priorityClasses,proto3,oneof" json:"priorityClasses,omitempty"`
}
type PreemptOnExecutor_Queues struct {
	Queues *ByPriorityQueue `protobuf:"bytes,3,opt,name=queues,proto3,oneof" json:"queues,omitempty"`
}

func (*PreemptOnExecutor_PriorityClasses) isPreemptOnExecutor_Select() {}
func (*PreemptOnExecutor_Queues) isPreemptOnExecutor_Select()          {}

func (m *PreemptOnExecutor) GetSelect() isPreemptOnExecutor_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *PreemptOnExecutor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreemptOnExecutor) GetPriorityClasses() *ByPriorityClass {
	if x, ok := m.GetSelect().(*PreemptOnExecutor_PriorityClasses); ok {
		return x.PriorityClasses
	}
	return nil
}

func (m *PreemptOnExecutor) GetQueues() *ByPriorityQueue {
	if x, ok := m.GetSelect().(*PreemptOnExecutor_Queues); ok {
		return x.Queues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PreemptOnExecutor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PreemptOnExecutor_PriorityClasses)(nil),
		(*PreemptOnExecutor_Queues)(nil),
	}
}

type CancelOnExecutor struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// We select jobs on the executor to cancel based on the provided Select message
	//
	// Types that are valid to be assigned to Select:
	//
	//	*CancelOnExecutor_PriorityClasses
	//	*CancelOnExecutor_Queues
	Select isCancelOnExecutor_Select `protobuf_oneof:"Select"`
}

func (m *CancelOnExecutor) Reset()         { *m = CancelOnExecutor{} }
func (m *CancelOnExecutor) String() string { return proto.CompactTextString(m) }
func (*CancelOnExecutor) ProtoMessage()    {}
func (*CancelOnExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{4}
}
func (m *CancelOnExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOnExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOnExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOnExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOnExecutor.Merge(m, src)
}
func (m *CancelOnExecutor) XXX_Size() int {
	return m.Size()
}
func (m *CancelOnExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOnExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOnExecutor proto.InternalMessageInfo

type isCancelOnExecutor_Select interface {
	isCancelOnExecutor_Select()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CancelOnExecutor_PriorityClasses struct {
	PriorityClasses *ByPriorityClass `protobuf:"bytes,2,opt,name=priorityClasses,proto3,oneof" json:"priorityClasses,omitempty"`
}
type CancelOnExecutor_Queues struct {
	Queues *ByPriorityQueue `protobuf:"bytes,3,opt,name=queues,proto3,oneof" json:"queues,omitempty"`
}

func (*CancelOnExecutor_PriorityClasses) isCancelOnExecutor_Select() {}
func (*CancelOnExecutor_Queues) isCancelOnExecutor_Select()          {}

func (m *CancelOnExecutor) GetSelect() isCancelOnExecutor_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *CancelOnExecutor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelOnExecutor) GetPriorityClasses() *ByPriorityClass {
	if x, ok := m.GetSelect().(*CancelOnExecutor_PriorityClasses); ok {
		return x.PriorityClasses
	}
	return nil
}

func (m *CancelOnExecutor) GetQueues() *ByPriorityQueue {
	if x, ok := m.GetSelect().(*CancelOnExecutor_Queues); ok {
		return x.Queues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CancelOnExecutor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CancelOnExecutor_PriorityClasses)(nil),
		(*CancelOnExecutor_Queues)(nil),
	}
}

type ByPriorityClass struct {
	PriorityClasses []string `protobuf:"bytes,1,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
}

func (m *ByPriorityClass) Reset()         { *m = ByPriorityClass{} }
func (m *ByPriorityClass) String() string { return proto.CompactTextString(m) }
func (*ByPriorityClass) ProtoMessage()    {}
func (*ByPriorityClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{5}
}
func (m *ByPriorityClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByPriorityClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByPriorityClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByPriorityClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByPriorityClass.Merge(m, src)
}
func (m *ByPriorityClass) XXX_Size() int {
	return m.Size()
}
func (m *ByPriorityClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ByPriorityClass.DiscardUnknown(m)
}

var xxx_messageInfo_ByPriorityClass proto.InternalMessageInfo

func (m *ByPriorityClass) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

type ByPriorityQueue struct {
	Queues []string `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (m *ByPriorityQueue) Reset()         { *m = ByPriorityQueue{} }
func (m *ByPriorityQueue) String() string { return proto.CompactTextString(m) }
func (*ByPriorityQueue) ProtoMessage()    {}
func (*ByPriorityQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ccee8bdbf348752, []int{6}
}
func (m *ByPriorityQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByPriorityQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByPriorityQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByPriorityQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByPriorityQueue.Merge(m, src)
}
func (m *ByPriorityQueue) XXX_Size() int {
	return m.Size()
}
func (m *ByPriorityQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ByPriorityQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ByPriorityQueue proto.InternalMessageInfo

func (m *ByPriorityQueue) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "controlplaneevents.Event")
	proto.RegisterType((*ExecutorSettingsUpsert)(nil), "controlplaneevents.ExecutorSettingsUpsert")
	proto.RegisterType((*ExecutorSettingsDelete)(nil), "controlplaneevents.ExecutorSettingsDelete")
	proto.RegisterType((*PreemptOnExecutor)(nil), "controlplaneevents.PreemptOnExecutor")
	proto.RegisterType((*CancelOnExecutor)(nil), "controlplaneevents.CancelOnExecutor")
	proto.RegisterType((*ByPriorityClass)(nil), "controlplaneevents.ByPriorityClass")
	proto.RegisterType((*ByPriorityQueue)(nil), "controlplaneevents.ByPriorityQueue")
}

func init() {
	proto.RegisterFile("pkg/controlplaneevents/events.proto", fileDescriptor_2ccee8bdbf348752)
}

var fileDescriptor_2ccee8bdbf348752 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0x4d, 0x6f, 0xd3, 0x3e,
	0x18, 0x6f, 0xba, 0xd7, 0xfa, 0xff, 0x17, 0xdb, 0x0c, 0x94, 0x52, 0x44, 0x3c, 0x65, 0x03, 0x4d,
	0x68, 0x4a, 0xa4, 0x21, 0x38, 0xf2, 0xe2, 0x31, 0x01, 0xe2, 0x40, 0xd9, 0xd8, 0x65, 0xb7, 0x2c,
	0x7d, 0x28, 0x81, 0x24, 0x0e, 0xb6, 0x3b, 0xd1, 0x8f, 0xc0, 0x4e, 0x7c, 0x0e, 0x3e, 0x09, 0xc7,
	0x1d, 0x39, 0x45, 0x68, 0xbd, 0x85, 0x2f, 0x81, 0x6a, 0xa7, 0x5d, 0x9a, 0x04, 0xd6, 0x3b, 0xa7,
	0x36, 0xf6, 0xef, 0xed, 0xf1, 0xf3, 0x58, 0x46, 0x1b, 0xf1, 0xc7, 0x9e, 0xe3, 0xb1, 0x48, 0x72,
	0x16, 0xc4, 0x81, 0x1b, 0x01, 0x9c, 0x40, 0x24, 0x85, 0xa3, 0x7f, 0xec, 0x98, 0x33, 0xc9, 0x30,
	0x2e, 0x03, 0xda, 0xa4, 0xc7, 0x58, 0x2f, 0x00, 0x47, 0x21, 0x8e, 0xfb, 0xef, 0x1c, 0xe9, 0x87,
	0x20, 0xa4, 0x1b, 0xc6, 0x9a, 0x64, 0x0d, 0xe7, 0xd1, 0xc2, 0xde, 0x08, 0x8b, 0x5f, 0xa1, 0x25,
	0x8f, 0x83, 0x2b, 0xa1, 0xdb, 0x32, 0xd6, 0x8d, 0xad, 0xff, 0x76, 0xda, 0xb6, 0x26, 0xdb, 0x63,
	0xb2, 0xfd, 0x76, 0x4c, 0xa6, 0xd7, 0xd3, 0x84, 0xac, 0x65, 0xf0, 0x6d, 0x16, 0xfa, 0x12, 0xc2,
	0x58, 0x0e, 0xf6, 0xc7, 0x0a, 0xf8, 0xd4, 0x40, 0x4d, 0xf8, 0x0c, 0x5e, 0x5f, 0x32, 0x7e, 0x00,
	0x52, 0xfa, 0x51, 0x4f, 0x1c, 0xc6, 0x02, 0xb8, 0x6c, 0xd5, 0x95, 0xf8, 0x3d, 0xbb, 0x9c, 0xd6,
	0xde, 0xab, 0x64, 0xd0, 0xcd, 0x34, 0x21, 0xeb, 0xd5, 0x6a, 0x17, 0xde, 0x2f, 0x6a, 0xfb, 0x7f,
	0x70, 0xac, 0x0c, 0xf3, 0x0c, 0x02, 0x90, 0xd0, 0x9a, 0x9b, 0x3d, 0x8c, 0x66, 0x54, 0x87, 0xd1,
	0x7b, 0x7f, 0x0f, 0xa3, 0x31, 0xf8, 0x04, 0xad, 0xc5, 0x1c, 0x46, 0xa8, 0xd7, 0xd1, 0xd8, 0xa2,
	0x35, 0xaf, 0x62, 0xdc, 0xa9, 0x8a, 0xd1, 0x29, 0x82, 0x29, 0x49, 0x13, 0x72, 0xab, 0xa4, 0x31,
	0x65, 0x5e, 0xb6, 0xc0, 0x1c, 0xad, 0x7a, 0x6e, 0xe4, 0x41, 0x90, 0xb3, 0x5d, 0x50, 0xb6, 0x9b,
	0x55, 0xb6, 0xbb, 0x05, 0x2c, 0x35, 0xd3, 0x84, 0xb4, 0x8b, 0x0a, 0x53, 0xa6, 0x25, 0x7d, 0xba,
	0x84, 0x16, 0x94, 0x9c, 0xf5, 0xcb, 0x40, 0xcd, 0xea, 0xe6, 0xe2, 0xbb, 0x68, 0x3e, 0x72, 0x43,
	0x50, 0x33, 0xd7, 0xa0, 0x38, 0x4d, 0xc8, 0x95, 0xd1, 0x77, 0x6e, 0xa8, 0xd4, 0x3e, 0xde, 0x41,
	0xcb, 0x1e, 0xe3, 0x5d, 0x16, 0x41, 0x57, 0x8d, 0xd0, 0x32, 0x6d, 0xa6, 0x09, 0xc1, 0xe3, 0xb5,
	0x1c, 0x7e, 0x82, 0xc3, 0x8f, 0xd0, 0xff, 0xfa, 0xff, 0x3e, 0xb8, 0x82, 0x45, 0xaa, 0xdb, 0x0d,
	0xda, 0x4e, 0x13, 0xd2, 0xcc, 0xaf, 0xe7, 0xb8, 0x53, 0x78, 0xfc, 0x00, 0x35, 0x04, 0x48, 0x3a,
	0x38, 0x14, 0xa0, 0x7b, 0xd4, 0xa0, 0x37, 0xd2, 0x84, 0x5c, 0x9d, 0x2c, 0xe6, 0x98, 0x17, 0x48,
	0xeb, 0x49, 0xb9, 0xd8, 0xac, 0xf9, 0x33, 0x16, 0x6b, 0x9d, 0xd6, 0xd1, 0x5a, 0xa9, 0xf1, 0x33,
	0x1f, 0x55, 0x84, 0x56, 0x62, 0xee, 0x33, 0xee, 0xcb, 0xc1, 0x6e, 0xe0, 0x0a, 0x01, 0x22, 0xbb,
	0x74, 0x1b, 0x55, 0x9d, 0xa6, 0x83, 0x4e, 0x1e, 0x4c, 0x6f, 0xa7, 0x09, 0xb9, 0x59, 0xe0, 0x4f,
	0xf5, 0xb9, 0x28, 0x8e, 0x0f, 0xd0, 0xe2, 0xa7, 0x3e, 0xf4, 0x41, 0x64, 0xd7, 0xe9, 0x12, 0x9b,
	0x37, 0x23, 0x2c, 0xbd, 0x96, 0x26, 0x64, 0x55, 0xd3, 0xa6, 0xd4, 0x33, 0x29, 0xba, 0x8c, 0x16,
	0x0f, 0x20, 0x00, 0x4f, 0x5a, 0x5f, 0xea, 0x68, 0xb5, 0x38, 0x8e, 0xff, 0xea, 0x59, 0x1c, 0xa1,
	0x95, 0x42, 0x46, 0xfc, 0xbc, 0x5c, 0xa1, 0xb1, 0x3e, 0xb7, 0xd5, 0xb8, 0x24, 0x7c, 0x29, 0xba,
	0xf5, 0x38, 0xaf, 0xad, 0x82, 0xe1, 0xed, 0x49, 0x35, 0x5a, 0xb2, 0x32, 0xe8, 0x24, 0xe6, 0xc9,
	0xf7, 0x73, 0xd3, 0x38, 0x3b, 0x37, 0x8d, 0x9f, 0xe7, 0xa6, 0xf1, 0x75, 0x68, 0xd6, 0xce, 0x86,
	0x66, 0xed, 0xc7, 0xd0, 0xac, 0x1d, 0x3d, 0xec, 0xf9, 0xf2, 0x7d, 0xff, 0xd8, 0xf6, 0x58, 0xe8,
	0xb8, 0x3c, 0x74, 0xbb, 0x6e, 0xcc, 0xd9, 0x07, 0xf0, 0x64, 0xf6, 0xe5, 0x54, 0xbf, 0x6f, 0xdf,
	0xea, 0x1b, 0x4f, 0xd5, 0x7e, 0x47, 0xa3, 0xed, 0x97, 0xcc, 0xde, 0xd5, 0xa8, 0xce, 0x08, 0xa5,
	0x1e, 0x2e, 0x71, 0xbc, 0xa8, 0x1e, 0xa8, 0xfb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xdf,
	0x04, 0xa4, 0x26, 0x07, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ExecutorSettingsUpsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ExecutorSettingsUpsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutorSettingsUpsert != nil {
		{
			size, err := m.ExecutorSettingsUpsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Event_ExecutorSettingsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ExecutorSettingsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutorSettingsDelete != nil {
		{
			size, err := m.ExecutorSettingsDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_PreemptOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_PreemptOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreemptOnExecutor != nil {
		{
			size, err := m.PreemptOnExecutor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_CancelOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_CancelOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelOnExecutor != nil {
		{
			size, err := m.CancelOnExecutor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ExecutorSettingsUpsert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsUpsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsUpsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SetByUser) > 0 {
		i -= len(m.SetByUser)
		copy(dAtA[i:], m.SetByUser)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SetByUser)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CordonReason) > 0 {
		i -= len(m.CordonReason)
		copy(dAtA[i:], m.CordonReason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CordonReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cordoned {
		i--
		if m.Cordoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorSettingsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreemptOnExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreemptOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreemptOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Select != nil {
		{
			size := m.Select.Size()
			i -= size
			if _, err := m.Select.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreemptOnExecutor_PriorityClasses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreemptOnExecutor_PriorityClasses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PriorityClasses != nil {
		{
			size, err := m.PriorityClasses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PreemptOnExecutor_Queues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreemptOnExecutor_Queues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Queues != nil {
		{
			size, err := m.Queues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CancelOnExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOnExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOnExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Select != nil {
		{
			size := m.Select.Size()
			i -= size
			if _, err := m.Select.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelOnExecutor_PriorityClasses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOnExecutor_PriorityClasses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PriorityClasses != nil {
		{
			size, err := m.PriorityClasses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CancelOnExecutor_Queues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOnExecutor_Queues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Queues != nil {
		{
			size, err := m.Queues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ByPriorityClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByPriorityClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByPriorityClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ByPriorityQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByPriorityQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByPriorityQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Queues[iNdEx])
			copy(dAtA[i:], m.Queues[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Queues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_ExecutorSettingsUpsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutorSettingsUpsert != nil {
		l = m.ExecutorSettingsUpsert.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_ExecutorSettingsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutorSettingsDelete != nil {
		l = m.ExecutorSettingsDelete.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_PreemptOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreemptOnExecutor != nil {
		l = m.PreemptOnExecutor.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_CancelOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelOnExecutor != nil {
		l = m.CancelOnExecutor.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *ExecutorSettingsUpsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Cordoned {
		n += 2
	}
	l = len(m.CordonReason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SetByUser)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ExecutorSettingsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *PreemptOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Select != nil {
		n += m.Select.Size()
	}
	return n
}

func (m *PreemptOnExecutor_PriorityClasses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriorityClasses != nil {
		l = m.PriorityClasses.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *PreemptOnExecutor_Queues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queues != nil {
		l = m.Queues.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *CancelOnExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Select != nil {
		n += m.Select.Size()
	}
	return n
}

func (m *CancelOnExecutor_PriorityClasses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriorityClasses != nil {
		l = m.PriorityClasses.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *CancelOnExecutor_Queues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queues != nil {
		l = m.Queues.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *ByPriorityClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *ByPriorityQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, s := range m.Queues {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorSettingsUpsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecutorSettingsUpsert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_ExecutorSettingsUpsert{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorSettingsDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecutorSettingsDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_ExecutorSettingsDelete{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptOnExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PreemptOnExecutor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_PreemptOnExecutor{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOnExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelOnExecutor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_CancelOnExecutor{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorSettingsUpsert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsUpsert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsUpsert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cordoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cordoned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CordonReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CordonReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetByUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetByUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorSettingsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreemptOnExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreemptOnExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreemptOnExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &PreemptOnExecutor_PriorityClasses{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &PreemptOnExecutor_Queues{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOnExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOnExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOnExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &CancelOnExecutor_PriorityClasses{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &CancelOnExecutor_Queues{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByPriorityClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByPriorityClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByPriorityClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByPriorityQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByPriorityQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByPriorityQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
