// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pkg/controlplaneevents/events.proto

package controlplaneevents

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A subset of JobState including only non-terminal states
type ActiveJobState int32

const (
	ActiveJobState_UNKNOWN ActiveJobState = 0
	ActiveJobState_QUEUED  ActiveJobState = 1
	ActiveJobState_LEASED  ActiveJobState = 2
	ActiveJobState_PENDING ActiveJobState = 3
	ActiveJobState_RUNNING ActiveJobState = 4
)

// Enum value maps for ActiveJobState.
var (
	ActiveJobState_name = map[int32]string{
		0: "UNKNOWN",
		1: "QUEUED",
		2: "LEASED",
		3: "PENDING",
		4: "RUNNING",
	}
	ActiveJobState_value = map[string]int32{
		"UNKNOWN": 0,
		"QUEUED":  1,
		"LEASED":  2,
		"PENDING": 3,
		"RUNNING": 4,
	}
)

func (x ActiveJobState) Enum() *ActiveJobState {
	p := new(ActiveJobState)
	*p = x
	return p
}

func (x ActiveJobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActiveJobState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_controlplaneevents_events_proto_enumTypes[0].Descriptor()
}

func (ActiveJobState) Type() protoreflect.EnumType {
	return &file_pkg_controlplaneevents_events_proto_enumTypes[0]
}

func (x ActiveJobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActiveJobState.Descriptor instead.
func (ActiveJobState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{0}
}

type Event struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*Event_ExecutorSettingsUpsert
	//	*Event_ExecutorSettingsDelete
	//	*Event_PreemptOnExecutor
	//	*Event_CancelOnExecutor
	//	*Event_PreemptOnQueue
	//	*Event_CancelOnQueue
	Event         isEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Event) GetEvent() isEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event) GetExecutorSettingsUpsert() *ExecutorSettingsUpsert {
	if x != nil {
		if x, ok := x.Event.(*Event_ExecutorSettingsUpsert); ok {
			return x.ExecutorSettingsUpsert
		}
	}
	return nil
}

func (x *Event) GetExecutorSettingsDelete() *ExecutorSettingsDelete {
	if x != nil {
		if x, ok := x.Event.(*Event_ExecutorSettingsDelete); ok {
			return x.ExecutorSettingsDelete
		}
	}
	return nil
}

func (x *Event) GetPreemptOnExecutor() *PreemptOnExecutor {
	if x != nil {
		if x, ok := x.Event.(*Event_PreemptOnExecutor); ok {
			return x.PreemptOnExecutor
		}
	}
	return nil
}

func (x *Event) GetCancelOnExecutor() *CancelOnExecutor {
	if x != nil {
		if x, ok := x.Event.(*Event_CancelOnExecutor); ok {
			return x.CancelOnExecutor
		}
	}
	return nil
}

func (x *Event) GetPreemptOnQueue() *PreemptOnQueue {
	if x != nil {
		if x, ok := x.Event.(*Event_PreemptOnQueue); ok {
			return x.PreemptOnQueue
		}
	}
	return nil
}

func (x *Event) GetCancelOnQueue() *CancelOnQueue {
	if x != nil {
		if x, ok := x.Event.(*Event_CancelOnQueue); ok {
			return x.CancelOnQueue
		}
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_ExecutorSettingsUpsert struct {
	ExecutorSettingsUpsert *ExecutorSettingsUpsert `protobuf:"bytes,2,opt,name=executorSettingsUpsert,proto3,oneof"`
}

type Event_ExecutorSettingsDelete struct {
	ExecutorSettingsDelete *ExecutorSettingsDelete `protobuf:"bytes,3,opt,name=executorSettingsDelete,proto3,oneof"`
}

type Event_PreemptOnExecutor struct {
	PreemptOnExecutor *PreemptOnExecutor `protobuf:"bytes,4,opt,name=preemptOnExecutor,proto3,oneof"`
}

type Event_CancelOnExecutor struct {
	CancelOnExecutor *CancelOnExecutor `protobuf:"bytes,5,opt,name=cancelOnExecutor,proto3,oneof"`
}

type Event_PreemptOnQueue struct {
	PreemptOnQueue *PreemptOnQueue `protobuf:"bytes,6,opt,name=preemptOnQueue,proto3,oneof"`
}

type Event_CancelOnQueue struct {
	CancelOnQueue *CancelOnQueue `protobuf:"bytes,7,opt,name=cancelOnQueue,proto3,oneof"`
}

func (*Event_ExecutorSettingsUpsert) isEvent_Event() {}

func (*Event_ExecutorSettingsDelete) isEvent_Event() {}

func (*Event_PreemptOnExecutor) isEvent_Event() {}

func (*Event_CancelOnExecutor) isEvent_Event() {}

func (*Event_PreemptOnQueue) isEvent_Event() {}

func (*Event_CancelOnQueue) isEvent_Event() {}

type ExecutorSettingsUpsert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cordoned      bool                   `protobuf:"varint,2,opt,name=cordoned,proto3" json:"cordoned,omitempty"`
	CordonReason  string                 `protobuf:"bytes,3,opt,name=cordonReason,proto3" json:"cordonReason,omitempty"`
	SetByUser     string                 `protobuf:"bytes,4,opt,name=setByUser,proto3" json:"setByUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutorSettingsUpsert) Reset() {
	*x = ExecutorSettingsUpsert{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutorSettingsUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorSettingsUpsert) ProtoMessage() {}

func (x *ExecutorSettingsUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorSettingsUpsert.ProtoReflect.Descriptor instead.
func (*ExecutorSettingsUpsert) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutorSettingsUpsert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutorSettingsUpsert) GetCordoned() bool {
	if x != nil {
		return x.Cordoned
	}
	return false
}

func (x *ExecutorSettingsUpsert) GetCordonReason() string {
	if x != nil {
		return x.CordonReason
	}
	return ""
}

func (x *ExecutorSettingsUpsert) GetSetByUser() string {
	if x != nil {
		return x.SetByUser
	}
	return ""
}

type ExecutorSettingsDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutorSettingsDelete) Reset() {
	*x = ExecutorSettingsDelete{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutorSettingsDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorSettingsDelete) ProtoMessage() {}

func (x *ExecutorSettingsDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorSettingsDelete.ProtoReflect.Descriptor instead.
func (*ExecutorSettingsDelete) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutorSettingsDelete) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PreemptOnExecutor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues          []string               `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,3,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PreemptOnExecutor) Reset() {
	*x = PreemptOnExecutor{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreemptOnExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptOnExecutor) ProtoMessage() {}

func (x *PreemptOnExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptOnExecutor.ProtoReflect.Descriptor instead.
func (*PreemptOnExecutor) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{3}
}

func (x *PreemptOnExecutor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreemptOnExecutor) GetQueues() []string {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *PreemptOnExecutor) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

type CancelOnExecutor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues          []string               `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,3,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CancelOnExecutor) Reset() {
	*x = CancelOnExecutor{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOnExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOnExecutor) ProtoMessage() {}

func (x *CancelOnExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOnExecutor.ProtoReflect.Descriptor instead.
func (*CancelOnExecutor) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{4}
}

func (x *CancelOnExecutor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CancelOnExecutor) GetQueues() []string {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *CancelOnExecutor) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

type PreemptOnQueue struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PreemptOnQueue) Reset() {
	*x = PreemptOnQueue{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreemptOnQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptOnQueue) ProtoMessage() {}

func (x *PreemptOnQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptOnQueue.ProtoReflect.Descriptor instead.
func (*PreemptOnQueue) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{5}
}

func (x *PreemptOnQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreemptOnQueue) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

type CancelOnQueue struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	JobStates       []ActiveJobState       `protobuf:"varint,3,rep,packed,name=jobStates,proto3,enum=controlplaneevents.ActiveJobState" json:"jobStates,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CancelOnQueue) Reset() {
	*x = CancelOnQueue{}
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOnQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOnQueue) ProtoMessage() {}

func (x *CancelOnQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_controlplaneevents_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOnQueue.ProtoReflect.Descriptor instead.
func (*CancelOnQueue) Descriptor() ([]byte, []int) {
	return file_pkg_controlplaneevents_events_proto_rawDescGZIP(), []int{6}
}

func (x *CancelOnQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CancelOnQueue) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

func (x *CancelOnQueue) GetJobStates() []ActiveJobState {
	if x != nil {
		return x.JobStates
	}
	return nil
}

var File_pkg_controlplaneevents_events_proto protoreflect.FileDescriptor

var file_pkg_controlplaneevents_events_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x04, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x16, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x64, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a,
	0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x49, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69,
	0x0a, 0x11, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x2a, 0x4f, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42, 0x3e, 0x5a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0xaa, 0x02, 0x23, 0x41, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_controlplaneevents_events_proto_rawDescOnce sync.Once
	file_pkg_controlplaneevents_events_proto_rawDescData []byte
)

func file_pkg_controlplaneevents_events_proto_rawDescGZIP() []byte {
	file_pkg_controlplaneevents_events_proto_rawDescOnce.Do(func() {
		file_pkg_controlplaneevents_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_controlplaneevents_events_proto_rawDesc), len(file_pkg_controlplaneevents_events_proto_rawDesc)))
	})
	return file_pkg_controlplaneevents_events_proto_rawDescData
}

var file_pkg_controlplaneevents_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_controlplaneevents_events_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pkg_controlplaneevents_events_proto_goTypes = []any{
	(ActiveJobState)(0),            // 0: controlplaneevents.ActiveJobState
	(*Event)(nil),                  // 1: controlplaneevents.Event
	(*ExecutorSettingsUpsert)(nil), // 2: controlplaneevents.ExecutorSettingsUpsert
	(*ExecutorSettingsDelete)(nil), // 3: controlplaneevents.ExecutorSettingsDelete
	(*PreemptOnExecutor)(nil),      // 4: controlplaneevents.PreemptOnExecutor
	(*CancelOnExecutor)(nil),       // 5: controlplaneevents.CancelOnExecutor
	(*PreemptOnQueue)(nil),         // 6: controlplaneevents.PreemptOnQueue
	(*CancelOnQueue)(nil),          // 7: controlplaneevents.CancelOnQueue
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
}
var file_pkg_controlplaneevents_events_proto_depIdxs = []int32{
	8, // 0: controlplaneevents.Event.created:type_name -> google.protobuf.Timestamp
	2, // 1: controlplaneevents.Event.executorSettingsUpsert:type_name -> controlplaneevents.ExecutorSettingsUpsert
	3, // 2: controlplaneevents.Event.executorSettingsDelete:type_name -> controlplaneevents.ExecutorSettingsDelete
	4, // 3: controlplaneevents.Event.preemptOnExecutor:type_name -> controlplaneevents.PreemptOnExecutor
	5, // 4: controlplaneevents.Event.cancelOnExecutor:type_name -> controlplaneevents.CancelOnExecutor
	6, // 5: controlplaneevents.Event.preemptOnQueue:type_name -> controlplaneevents.PreemptOnQueue
	7, // 6: controlplaneevents.Event.cancelOnQueue:type_name -> controlplaneevents.CancelOnQueue
	0, // 7: controlplaneevents.CancelOnQueue.jobStates:type_name -> controlplaneevents.ActiveJobState
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pkg_controlplaneevents_events_proto_init() }
func file_pkg_controlplaneevents_events_proto_init() {
	if File_pkg_controlplaneevents_events_proto != nil {
		return
	}
	file_pkg_controlplaneevents_events_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_ExecutorSettingsUpsert)(nil),
		(*Event_ExecutorSettingsDelete)(nil),
		(*Event_PreemptOnExecutor)(nil),
		(*Event_CancelOnExecutor)(nil),
		(*Event_PreemptOnQueue)(nil),
		(*Event_CancelOnQueue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_controlplaneevents_events_proto_rawDesc), len(file_pkg_controlplaneevents_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_controlplaneevents_events_proto_goTypes,
		DependencyIndexes: file_pkg_controlplaneevents_events_proto_depIdxs,
		EnumInfos:         file_pkg_controlplaneevents_events_proto_enumTypes,
		MessageInfos:      file_pkg_controlplaneevents_events_proto_msgTypes,
	}.Build()
	File_pkg_controlplaneevents_events_proto = out.File
	file_pkg_controlplaneevents_events_proto_goTypes = nil
	file_pkg_controlplaneevents_events_proto_depIdxs = nil
}
