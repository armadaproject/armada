// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/market/bids.proto

package market

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueueJobSet struct {
	Queue  string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobSet string `protobuf:"bytes,2,opt,name=job_set,json=jobSet,proto3" json:"jobSet,omitempty"`
}

func (m *QueueJobSet) Reset()         { *m = QueueJobSet{} }
func (m *QueueJobSet) String() string { return proto.CompactTextString(m) }
func (*QueueJobSet) ProtoMessage()    {}
func (*QueueJobSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{0}
}
func (m *QueueJobSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueJobSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueJobSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueJobSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueJobSet.Merge(m, src)
}
func (m *QueueJobSet) XXX_Size() int {
	return m.Size()
}
func (m *QueueJobSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueJobSet.DiscardUnknown(m)
}

var xxx_messageInfo_QueueJobSet proto.InternalMessageInfo

func (m *QueueJobSet) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *QueueJobSet) GetJobSet() string {
	if m != nil {
		return m.JobSet
	}
	return ""
}

type BidQueryRequest struct {
	QueueJobSet []*QueueJobSet `protobuf:"bytes,1,rep,name=queue_job_set,json=queueJobSet,proto3" json:"queueJobSet,omitempty"`
}

func (m *BidQueryRequest) Reset()         { *m = BidQueryRequest{} }
func (m *BidQueryRequest) String() string { return proto.CompactTextString(m) }
func (*BidQueryRequest) ProtoMessage()    {}
func (*BidQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{1}
}
func (m *BidQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidQueryRequest.Merge(m, src)
}
func (m *BidQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *BidQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BidQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BidQueryRequest proto.InternalMessageInfo

func (m *BidQueryRequest) GetQueueJobSet() []*QueueJobSet {
	if m != nil {
		return m.QueueJobSet
	}
	return nil
}

type JobSetBid struct {
	BidPrice int64 `protobuf:"varint,1,opt,name=bid_price,json=bidPrice,proto3" json:"bidPrice,omitempty"`
}

func (m *JobSetBid) Reset()         { *m = JobSetBid{} }
func (m *JobSetBid) String() string { return proto.CompactTextString(m) }
func (*JobSetBid) ProtoMessage()    {}
func (*JobSetBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{2}
}
func (m *JobSetBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetBid.Merge(m, src)
}
func (m *JobSetBid) XXX_Size() int {
	return m.Size()
}
func (m *JobSetBid) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetBid.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetBid proto.InternalMessageInfo

func (m *JobSetBid) GetBidPrice() int64 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

type JobSetBids struct {
	BidsByJobSet map[string]*JobSetBid `protobuf:"bytes,1,rep,name=bids_by_job_set,json=bidsByJobSet,proto3" json:"bidsByJobSet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *JobSetBids) Reset()         { *m = JobSetBids{} }
func (m *JobSetBids) String() string { return proto.CompactTextString(m) }
func (*JobSetBids) ProtoMessage()    {}
func (*JobSetBids) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{3}
}
func (m *JobSetBids) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetBids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetBids.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetBids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetBids.Merge(m, src)
}
func (m *JobSetBids) XXX_Size() int {
	return m.Size()
}
func (m *JobSetBids) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetBids.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetBids proto.InternalMessageInfo

func (m *JobSetBids) GetBidsByJobSet() map[string]*JobSetBid {
	if m != nil {
		return m.BidsByJobSet
	}
	return nil
}

type QueueBids struct {
	BidsByQueue map[string]*JobSetBids `protobuf:"bytes,1,rep,name=bids_by_queue,json=bidsByQueue,proto3" json:"bidsByQueue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueueBids) Reset()         { *m = QueueBids{} }
func (m *QueueBids) String() string { return proto.CompactTextString(m) }
func (*QueueBids) ProtoMessage()    {}
func (*QueueBids) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{4}
}
func (m *QueueBids) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueBids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueBids.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueBids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueBids.Merge(m, src)
}
func (m *QueueBids) XXX_Size() int {
	return m.Size()
}
func (m *QueueBids) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueBids.DiscardUnknown(m)
}

var xxx_messageInfo_QueueBids proto.InternalMessageInfo

func (m *QueueBids) GetBidsByQueue() map[string]*JobSetBids {
	if m != nil {
		return m.BidsByQueue
	}
	return nil
}

type BidQueryResponse struct {
	BidsByPool map[string]*QueueBids `protobuf:"bytes,1,rep,name=bids_by_pool,json=bidsByPool,proto3" json:"bidsByPool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BidQueryResponse) Reset()         { *m = BidQueryResponse{} }
func (m *BidQueryResponse) String() string { return proto.CompactTextString(m) }
func (*BidQueryResponse) ProtoMessage()    {}
func (*BidQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f85ff25f671bcd1a, []int{5}
}
func (m *BidQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidQueryResponse.Merge(m, src)
}
func (m *BidQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *BidQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BidQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BidQueryResponse proto.InternalMessageInfo

func (m *BidQueryResponse) GetBidsByPool() map[string]*QueueBids {
	if m != nil {
		return m.BidsByPool
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueJobSet)(nil), "market.QueueJobSet")
	proto.RegisterType((*BidQueryRequest)(nil), "market.BidQueryRequest")
	proto.RegisterType((*JobSetBid)(nil), "market.JobSetBid")
	proto.RegisterType((*JobSetBids)(nil), "market.JobSetBids")
	proto.RegisterMapType((map[string]*JobSetBid)(nil), "market.JobSetBids.BidsByJobSetEntry")
	proto.RegisterType((*QueueBids)(nil), "market.QueueBids")
	proto.RegisterMapType((map[string]*JobSetBids)(nil), "market.QueueBids.BidsByQueueEntry")
	proto.RegisterType((*BidQueryResponse)(nil), "market.BidQueryResponse")
	proto.RegisterMapType((map[string]*QueueBids)(nil), "market.BidQueryResponse.BidsByPoolEntry")
}

func init() { proto.RegisterFile("pkg/market/bids.proto", fileDescriptor_f85ff25f671bcd1a) }

var fileDescriptor_f85ff25f671bcd1a = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0x73, 0x8d, 0x1a, 0xc8, 0x93, 0x46, 0x69, 0xae, 0x2f, 0x84, 0x0c, 0x76, 0x65, 0x18,
	0x02, 0x02, 0x47, 0x4a, 0x17, 0x84, 0x40, 0x42, 0x16, 0x08, 0x89, 0xa9, 0x4d, 0xc5, 0xc2, 0x12,
	0xf9, 0xe2, 0x53, 0x70, 0x12, 0xf7, 0x1c, 0xfb, 0x5c, 0xe1, 0x7e, 0x0a, 0x3e, 0x16, 0x63, 0x47,
	0x26, 0x0b, 0x25, 0x9b, 0x37, 0xf8, 0x04, 0xc8, 0x77, 0x76, 0x7c, 0x4d, 0x84, 0x8a, 0xd4, 0x25,
	0xd2, 0xfd, 0xf3, 0xbc, 0xfd, 0xee, 0xff, 0xf8, 0xe0, 0xc8, 0x9f, 0x4d, 0xfa, 0x9e, 0x1d, 0xcc,
	0x28, 0xef, 0x13, 0xd7, 0x09, 0x4d, 0x3f, 0x60, 0x9c, 0xe1, 0x9a, 0x94, 0x8c, 0x09, 0x34, 0xce,
	0x23, 0x1a, 0xd1, 0x4f, 0x8c, 0x5c, 0x50, 0x8e, 0x9f, 0xc1, 0xee, 0x22, 0x3b, 0x76, 0xd0, 0x09,
	0xea, 0xd5, 0xad, 0x83, 0x34, 0xd1, 0x5b, 0x42, 0x78, 0xc1, 0x3c, 0x97, 0x53, 0xcf, 0xe7, 0xf1,
	0x50, 0x46, 0xe0, 0x97, 0xf0, 0x60, 0xca, 0xc8, 0x28, 0xa4, 0xbc, 0xb3, 0x23, 0x82, 0x0f, 0xd3,
	0x44, 0xdf, 0x9f, 0x8a, 0x3a, 0x4a, 0x74, 0x4d, 0x2a, 0x06, 0x85, 0x96, 0xe5, 0x3a, 0xe7, 0x11,
	0x0d, 0xe2, 0x21, 0x5d, 0x44, 0x34, 0xe4, 0x78, 0x08, 0x4d, 0x51, 0x6a, 0x54, 0xd4, 0x41, 0x27,
	0xd5, 0x5e, 0x63, 0x70, 0x60, 0xca, 0xd9, 0x4c, 0x65, 0x30, 0xeb, 0x71, 0x9a, 0xe8, 0x47, 0x8b,
	0x52, 0x50, 0x3a, 0x34, 0x14, 0xd9, 0x78, 0x07, 0xf5, 0x3c, 0xc3, 0x75, 0xf0, 0x29, 0xd4, 0x89,
	0xeb, 0x8c, 0xfc, 0xc0, 0x1d, 0x4b, 0xa2, 0xaa, 0x75, 0x9c, 0x26, 0x3a, 0x26, 0xae, 0x73, 0x96,
	0x69, 0x4a, 0x91, 0x87, 0x85, 0x66, 0xfc, 0x46, 0x00, 0xeb, 0x12, 0x21, 0x9e, 0x40, 0x2b, 0xbb,
	0xb6, 0x11, 0x89, 0x37, 0xc6, 0x7c, 0x5a, 0x8c, 0x59, 0x06, 0x9b, 0xd9, 0x8f, 0x15, 0x4b, 0xe1,
	0xc3, 0x25, 0x0f, 0x62, 0xab, 0x9b, 0x26, 0xfa, 0x31, 0x51, 0x64, 0xa5, 0xe7, 0x9e, 0xaa, 0x77,
	0xaf, 0xa1, 0xbd, 0x95, 0x8e, 0x9f, 0x40, 0x75, 0x46, 0xe3, 0xdc, 0x8d, 0x76, 0x9a, 0xe8, 0xcd,
	0x19, 0x8d, 0x95, 0x12, 0xd9, 0xbf, 0xf8, 0x0d, 0xec, 0x5e, 0xd9, 0xf3, 0x88, 0x0a, 0x1f, 0x1a,
	0x83, 0xf6, 0xd6, 0x60, 0xd2, 0x47, 0x11, 0xa3, 0xfa, 0x28, 0x84, 0xd7, 0x3b, 0xaf, 0x90, 0x91,
	0x22, 0xa8, 0x8b, 0xdb, 0x16, 0xc8, 0x36, 0x34, 0x0b, 0xe4, 0x62, 0x19, 0x32, 0x60, 0xe3, 0x96,
	0x2f, 0x0a, 0xaf, 0x38, 0x4b, 0x5c, 0x61, 0x13, 0x29, 0x55, 0xd5, 0x26, 0x45, 0xee, 0x5e, 0xc3,
	0xfe, 0x66, 0xee, 0xff, 0xb1, 0xbe, 0xbd, 0xcd, 0x8a, 0xb7, 0x4d, 0xb8, 0x13, 0xf6, 0x0f, 0x12,
	0xcd, 0xf3, 0x55, 0x0c, 0x7d, 0x76, 0x19, 0x52, 0xec, 0xc0, 0x5e, 0xc1, 0xec, 0x33, 0x36, 0xcf,
	0x91, 0x7b, 0x45, 0xf9, 0xcd, 0xf8, 0x9c, 0xfc, 0x8c, 0xb1, 0xb9, 0x04, 0xef, 0xa4, 0x89, 0x7e,
	0x48, 0xd6, 0xa2, 0xd2, 0x19, 0x4a, 0xb5, 0xfb, 0x4d, 0x7c, 0x04, 0x6a, 0xe2, 0xfd, 0x1c, 0x5e,
	0x3b, 0x71, 0x17, 0xf4, 0xe0, 0xb3, 0xe8, 0x2c, 0x36, 0xfc, 0x82, 0x06, 0x57, 0xee, 0x98, 0x62,
	0x0b, 0x9a, 0x1f, 0x29, 0x57, 0x56, 0xfd, 0xd1, 0x36, 0xad, 0xf8, 0x50, 0xbb, 0x9d, 0x7f, 0x5d,
	0x83, 0xf5, 0xfe, 0xc7, 0x52, 0x43, 0x37, 0x4b, 0x0d, 0xfd, 0x5a, 0x6a, 0xe8, 0xfb, 0x4a, 0xab,
	0xdc, 0xac, 0xb4, 0xca, 0xcf, 0x95, 0x56, 0xf9, 0xf2, 0x7c, 0xe2, 0xf2, 0xaf, 0x11, 0x31, 0xc7,
	0xcc, 0xeb, 0xdb, 0x81, 0x67, 0x3b, 0xb6, 0x1f, 0xb0, 0x29, 0x1d, 0xf3, 0xfc, 0xd4, 0x2f, 0xdf,
	0x25, 0x52, 0x13, 0x6f, 0xd2, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x04, 0x7a, 0xf1,
	0xac, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BidPriceServiceClient is the client API for BidPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BidPriceServiceClient interface {
	GetJobSetBids(ctx context.Context, in *BidQueryRequest, opts ...grpc.CallOption) (*BidQueryResponse, error)
}

type bidPriceServiceClient struct {
	cc *grpc.ClientConn
}

func NewBidPriceServiceClient(cc *grpc.ClientConn) BidPriceServiceClient {
	return &bidPriceServiceClient{cc}
}

func (c *bidPriceServiceClient) GetJobSetBids(ctx context.Context, in *BidQueryRequest, opts ...grpc.CallOption) (*BidQueryResponse, error) {
	out := new(BidQueryResponse)
	err := c.cc.Invoke(ctx, "/market.BidPriceService/GetJobSetBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidPriceServiceServer is the server API for BidPriceService service.
type BidPriceServiceServer interface {
	GetJobSetBids(context.Context, *BidQueryRequest) (*BidQueryResponse, error)
}

// UnimplementedBidPriceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBidPriceServiceServer struct {
}

func (*UnimplementedBidPriceServiceServer) GetJobSetBids(ctx context.Context, req *BidQueryRequest) (*BidQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobSetBids not implemented")
}

func RegisterBidPriceServiceServer(s *grpc.Server, srv BidPriceServiceServer) {
	s.RegisterService(&_BidPriceService_serviceDesc, srv)
}

func _BidPriceService_GetJobSetBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidPriceServiceServer).GetJobSetBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.BidPriceService/GetJobSetBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidPriceServiceServer).GetJobSetBids(ctx, req.(*BidQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BidPriceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "market.BidPriceService",
	HandlerType: (*BidPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobSetBids",
			Handler:    _BidPriceService_GetJobSetBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/market/bids.proto",
}

func (m *QueueJobSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueJobSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueJobSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobSet) > 0 {
		i -= len(m.JobSet)
		copy(dAtA[i:], m.JobSet)
		i = encodeVarintBids(dAtA, i, uint64(len(m.JobSet)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintBids(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BidQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueueJobSet) > 0 {
		for iNdEx := len(m.QueueJobSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueueJobSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBids(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobSetBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSetBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidPrice != 0 {
		i = encodeVarintBids(dAtA, i, uint64(m.BidPrice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JobSetBids) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetBids) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSetBids) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidsByJobSet) > 0 {
		for k := range m.BidsByJobSet {
			v := m.BidsByJobSet[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBids(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBids(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBids(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueBids) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueBids) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueBids) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidsByQueue) > 0 {
		for k := range m.BidsByQueue {
			v := m.BidsByQueue[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBids(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBids(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBids(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BidQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidsByPool) > 0 {
		for k := range m.BidsByPool {
			v := m.BidsByPool[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBids(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBids(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBids(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBids(dAtA []byte, offset int, v uint64) int {
	offset -= sovBids(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueJobSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovBids(uint64(l))
	}
	l = len(m.JobSet)
	if l > 0 {
		n += 1 + l + sovBids(uint64(l))
	}
	return n
}

func (m *BidQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueueJobSet) > 0 {
		for _, e := range m.QueueJobSet {
			l = e.Size()
			n += 1 + l + sovBids(uint64(l))
		}
	}
	return n
}

func (m *JobSetBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidPrice != 0 {
		n += 1 + sovBids(uint64(m.BidPrice))
	}
	return n
}

func (m *JobSetBids) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BidsByJobSet) > 0 {
		for k, v := range m.BidsByJobSet {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBids(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBids(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBids(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueueBids) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BidsByQueue) > 0 {
		for k, v := range m.BidsByQueue {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBids(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBids(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBids(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BidQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BidsByPool) > 0 {
		for k, v := range m.BidsByPool {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBids(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBids(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBids(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBids(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBids(x uint64) (n int) {
	return sovBids(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueJobSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueJobSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueJobSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueJobSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueJobSet = append(m.QueueJobSet, &QueueJobSet{})
			if err := m.QueueJobSet[len(m.QueueJobSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			m.BidPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetBids) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetBids: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetBids: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidsByJobSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidsByJobSet == nil {
				m.BidsByJobSet = make(map[string]*JobSetBid)
			}
			var mapkey string
			var mapvalue *JobSetBid
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBids
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBids
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBids
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBids
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBids
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JobSetBid{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBids(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBids
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BidsByJobSet[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueBids) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueBids: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueBids: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidsByQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidsByQueue == nil {
				m.BidsByQueue = make(map[string]*JobSetBids)
			}
			var mapkey string
			var mapvalue *JobSetBids
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBids
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBids
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBids
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBids
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBids
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JobSetBids{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBids(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBids
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BidsByQueue[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBids
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidsByPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBids
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBids
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBids
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidsByPool == nil {
				m.BidsByPool = make(map[string]*QueueBids)
			}
			var mapkey string
			var mapvalue *QueueBids
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBids
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBids
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBids
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBids
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBids
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBids
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QueueBids{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBids(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBids
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BidsByPool[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBids(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBids
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBids(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBids
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBids
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBids
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBids
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBids
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBids
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBids        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBids          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBids = fmt.Errorf("proto: unexpected end of group")
)
