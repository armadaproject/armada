// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/metricevents/events.proto

package metricevents

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Created *types.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*Event_CycleMetrics
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_932dcac363ef0bc9, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_CycleMetrics struct {
	CycleMetrics *CycleMetrics `protobuf:"bytes,2,opt,name=cycle_metrics,json=cycleMetrics,proto3,oneof" json:"cycleMetrics,omitempty"`
}

func (*Event_CycleMetrics) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Event) GetCycleMetrics() *CycleMetrics {
	if x, ok := m.GetEvent().(*Event_CycleMetrics); ok {
		return x.CycleMetrics
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_CycleMetrics)(nil),
	}
}

type QueueMetrics struct {
	// Fraction of the pool allocated
	ActualShare float64 `protobuf:"fixed64,1,opt,name=actual_share,json=actualShare,proto3" json:"actualShare,omitempty"`
	// Fraction of the pool demanded. May be greater than 1
	Demand float64 `protobuf:"fixed64,2,opt,name=demand,proto3" json:"demand,omitempty"`
	// Fraction of the pool demanded, limited by scheduling constraints. May be greater than 1
	ConstrainedDemand float64 `protobuf:"fixed64,3,opt,name=constrained_demand,json=constrainedDemand,proto3" json:"constrainedDemand,omitempty"`
}

func (m *QueueMetrics) Reset()         { *m = QueueMetrics{} }
func (m *QueueMetrics) String() string { return proto.CompactTextString(m) }
func (*QueueMetrics) ProtoMessage()    {}
func (*QueueMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_932dcac363ef0bc9, []int{1}
}
func (m *QueueMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMetrics.Merge(m, src)
}
func (m *QueueMetrics) XXX_Size() int {
	return m.Size()
}
func (m *QueueMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMetrics proto.InternalMessageInfo

func (m *QueueMetrics) GetActualShare() float64 {
	if m != nil {
		return m.ActualShare
	}
	return 0
}

func (m *QueueMetrics) GetDemand() float64 {
	if m != nil {
		return m.Demand
	}
	return 0
}

func (m *QueueMetrics) GetConstrainedDemand() float64 {
	if m != nil {
		return m.ConstrainedDemand
	}
	return 0
}

type CycleMetrics struct {
	// Pool that these metrics pertain to
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// Per-Queue Metrics
	QueueMetrics map[string]*QueueMetrics `protobuf:"bytes,2,rep,name=queue_metrics,json=queueMetrics,proto3" json:"queueMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Allocatable resources
	AllocatableResources map[string]*resource.Quantity `protobuf:"bytes,3,rep,name=allocatable_resources,json=allocatableResources,proto3" json:"allocatableResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CycleMetrics) Reset()         { *m = CycleMetrics{} }
func (m *CycleMetrics) String() string { return proto.CompactTextString(m) }
func (*CycleMetrics) ProtoMessage()    {}
func (*CycleMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_932dcac363ef0bc9, []int{2}
}
func (m *CycleMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CycleMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CycleMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CycleMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CycleMetrics.Merge(m, src)
}
func (m *CycleMetrics) XXX_Size() int {
	return m.Size()
}
func (m *CycleMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_CycleMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_CycleMetrics proto.InternalMessageInfo

func (m *CycleMetrics) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *CycleMetrics) GetQueueMetrics() map[string]*QueueMetrics {
	if m != nil {
		return m.QueueMetrics
	}
	return nil
}

func (m *CycleMetrics) GetAllocatableResources() map[string]*resource.Quantity {
	if m != nil {
		return m.AllocatableResources
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "metricevents.Event")
	proto.RegisterType((*QueueMetrics)(nil), "metricevents.QueueMetrics")
	proto.RegisterType((*CycleMetrics)(nil), "metricevents.CycleMetrics")
	proto.RegisterMapType((map[string]*resource.Quantity)(nil), "metricevents.CycleMetrics.AllocatableResourcesEntry")
	proto.RegisterMapType((map[string]*QueueMetrics)(nil), "metricevents.CycleMetrics.QueueMetricsEntry")
}

func init() { proto.RegisterFile("pkg/metricevents/events.proto", fileDescriptor_932dcac363ef0bc9) }

var fileDescriptor_932dcac363ef0bc9 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xde, 0xe9, 0xf6, 0x0f, 0xbf, 0x69, 0xfa, 0xd3, 0x1d, 0x5b, 0xd9, 0x46, 0x4c, 0x64, 0x05,
	0xe9, 0x61, 0x99, 0x48, 0xed, 0xa1, 0x88, 0x17, 0xa3, 0x0b, 0xa2, 0x28, 0x74, 0xf5, 0xa2, 0x20,
	0xcb, 0xec, 0xec, 0x98, 0x8d, 0x9b, 0x64, 0xd2, 0xc9, 0xa4, 0x90, 0xb3, 0x67, 0xc1, 0x6f, 0xe0,
	0x17, 0xf1, 0x03, 0x88, 0xa7, 0x1e, 0xbd, 0x18, 0x64, 0xf7, 0x96, 0x4f, 0x21, 0xc9, 0x24, 0x74,
	0x6c, 0xb7, 0xea, 0x29, 0xe4, 0x79, 0xde, 0xf7, 0x79, 0xde, 0xf7, 0x61, 0x66, 0xe0, 0xcd, 0x78,
	0xe6, 0x39, 0x21, 0x93, 0xc2, 0xa7, 0xec, 0x84, 0x45, 0x32, 0x71, 0xd4, 0x07, 0xc7, 0x82, 0x4b,
	0x8e, 0x0c, 0x9d, 0x32, 0x6d, 0x8f, 0x73, 0x2f, 0x60, 0x4e, 0xc5, 0x8d, 0xd3, 0x77, 0x8e, 0xf4,
	0x43, 0x96, 0x48, 0x12, 0xc6, 0xaa, 0xdc, 0x3c, 0x98, 0x1d, 0x26, 0xd8, 0xe7, 0x0e, 0x89, 0xfd,
	0x90, 0xd0, 0xa9, 0x1f, 0x31, 0x91, 0x39, 0xa5, 0x03, 0x89, 0x7d, 0x47, 0xb0, 0x84, 0xa7, 0x82,
	0x32, 0xc7, 0x63, 0x11, 0x13, 0x44, 0xb2, 0x89, 0xea, 0xea, 0x7d, 0x01, 0x70, 0x6d, 0x50, 0x3a,
	0xa0, 0x67, 0x70, 0x83, 0x0a, 0x56, 0x52, 0x5d, 0x70, 0x0b, 0xec, 0x6d, 0xee, 0x9b, 0x58, 0x59,
	0xe2, 0xc6, 0x12, 0xbf, 0x6a, 0x2c, 0xdd, 0x9d, 0x22, 0xb7, 0x3b, 0x75, 0x79, 0x9f, 0x87, 0xbe,
	0x64, 0x61, 0x2c, 0xb3, 0x61, 0xa3, 0x80, 0xde, 0xc2, 0x2d, 0x9a, 0xd1, 0x80, 0x8d, 0xd4, 0x0e,
	0x49, 0x77, 0xa5, 0x96, 0xd4, 0x77, 0xc2, 0x8f, 0xca, 0x92, 0xe7, 0xaa, 0xc2, 0x35, 0x8b, 0xdc,
	0xbe, 0x4e, 0x35, 0xe4, 0x4c, 0xf7, 0x49, 0x6b, 0x68, 0xe8, 0x8c, 0xbb, 0x01, 0xd7, 0x2a, 0x89,
	0xde, 0x37, 0x00, 0x8d, 0xa3, 0x94, 0xa5, 0x0d, 0x83, 0x1e, 0x40, 0x83, 0x50, 0x99, 0x92, 0x60,
	0x94, 0x4c, 0x89, 0x60, 0xd5, 0x2a, 0xc0, 0xdd, 0x2d, 0x72, 0x7b, 0x47, 0xe1, 0x2f, 0x4b, 0x58,
	0x1b, 0x79, 0x53, 0x83, 0x51, 0x1f, 0xae, 0x4f, 0x58, 0x48, 0xa2, 0x49, 0x35, 0x2f, 0x70, 0xb7,
	0x8b, 0xdc, 0xbe, 0xaa, 0x10, 0xad, 0xa5, 0xae, 0x41, 0x2f, 0x20, 0xa2, 0x3c, 0x4a, 0xa4, 0x20,
	0x7e, 0xc4, 0x26, 0xa3, 0xba, 0xb3, 0x5d, 0x75, 0xda, 0x45, 0x6e, 0xdf, 0xd0, 0xd8, 0xc7, 0xe7,
	0x45, 0x3a, 0x17, 0xc8, 0xde, 0x8f, 0x55, 0x68, 0xe8, 0x91, 0xa0, 0x3b, 0x70, 0x35, 0xe6, 0x3c,
	0xa8, 0x96, 0xf8, 0xcf, 0x45, 0x45, 0x6e, 0xff, 0x5f, 0xfe, 0x6b, 0x2a, 0x15, 0x8f, 0x42, 0xb8,
	0x75, 0x5c, 0x86, 0xa0, 0xa5, 0xdd, 0xde, 0xdb, 0xdc, 0xef, 0x5f, 0x9e, 0x36, 0xd6, 0x43, 0x1b,
	0x44, 0x52, 0x64, 0x2a, 0xff, 0x63, 0x0d, 0xd6, 0x6c, 0x0c, 0x1d, 0x47, 0x1f, 0x01, 0xdc, 0x21,
	0x41, 0xc0, 0x29, 0x91, 0x64, 0x1c, 0xb0, 0x51, 0x73, 0xb8, 0x92, 0x6e, 0xbb, 0xf2, 0x3d, 0xf8,
	0x83, 0xef, 0xc3, 0xb3, 0xbe, 0x61, 0xd3, 0xa6, 0xfc, 0x7b, 0x45, 0x6e, 0x5b, 0x64, 0x09, 0xad,
	0xcd, 0xb1, 0xbd, 0x8c, 0x37, 0x3f, 0x00, 0xd8, 0xb9, 0xb0, 0x0f, 0xba, 0x0d, 0xdb, 0x33, 0x96,
	0xd5, 0xd9, 0x75, 0x8a, 0xdc, 0xde, 0x9a, 0xb1, 0x4c, 0xd3, 0x2a, 0x59, 0x34, 0x80, 0x6b, 0x27,
	0x24, 0x48, 0xd9, 0xf2, 0xf3, 0xa9, 0x8b, 0xba, 0xd7, 0x8a, 0xdc, 0xbe, 0x52, 0x15, 0x6b, 0x22,
	0xaa, 0xfb, 0xfe, 0xca, 0x21, 0x30, 0x3f, 0x03, 0xb8, 0x7b, 0xe9, 0x76, 0xff, 0x36, 0xcd, 0xeb,
	0xdf, 0xa7, 0xc1, 0x58, 0x5d, 0x69, 0xac, 0x5f, 0x69, 0x1c, 0xcf, 0xbc, 0x12, 0xc0, 0x4d, 0xea,
	0xf8, 0x28, 0x25, 0x91, 0xf4, 0x65, 0xf6, 0xb7, 0x09, 0xdd, 0xa7, 0x5f, 0xe7, 0x16, 0x38, 0x9d,
	0x5b, 0xe0, 0xe7, 0xdc, 0x02, 0x9f, 0x16, 0x56, 0xeb, 0x74, 0x61, 0xb5, 0xbe, 0x2f, 0xac, 0xd6,
	0x9b, 0xbb, 0x9e, 0x2f, 0xa7, 0xe9, 0x18, 0x53, 0x1e, 0x3a, 0x44, 0x84, 0x64, 0x42, 0x62, 0xc1,
	0xdf, 0x33, 0x2a, 0xeb, 0x3f, 0xe7, 0xfc, 0x4b, 0x35, 0x5e, 0xaf, 0x1e, 0x85, 0x7b, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xea, 0x54, 0x11, 0x8e, 0xc4, 0x04, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_CycleMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_CycleMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CycleMetrics != nil {
		{
			size, err := m.CycleMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueueMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConstrainedDemand != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConstrainedDemand))))
		i--
		dAtA[i] = 0x19
	}
	if m.Demand != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Demand))))
		i--
		dAtA[i] = 0x11
	}
	if m.ActualShare != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActualShare))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *CycleMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CycleMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CycleMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllocatableResources) > 0 {
		for k := range m.AllocatableResources {
			v := m.AllocatableResources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEvents(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEvents(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEvents(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QueueMetrics) > 0 {
		for k := range m.QueueMetrics {
			v := m.QueueMetrics[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEvents(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEvents(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEvents(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_CycleMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CycleMetrics != nil {
		l = m.CycleMetrics.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *QueueMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActualShare != 0 {
		n += 9
	}
	if m.Demand != 0 {
		n += 9
	}
	if m.ConstrainedDemand != 0 {
		n += 9
	}
	return n
}

func (m *CycleMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.QueueMetrics) > 0 {
		for k, v := range m.QueueMetrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEvents(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovEvents(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	if len(m.AllocatableResources) > 0 {
		for k, v := range m.AllocatableResources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEvents(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovEvents(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CycleMetrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_CycleMetrics{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualShare", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActualShare = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demand", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Demand = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstrainedDemand", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConstrainedDemand = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CycleMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CycleMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CycleMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueueMetrics == nil {
				m.QueueMetrics = make(map[string]*QueueMetrics)
			}
			var mapkey string
			var mapvalue *QueueMetrics
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEvents
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEvents
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QueueMetrics{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QueueMetrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatableResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllocatableResources == nil {
				m.AllocatableResources = make(map[string]*resource.Quantity)
			}
			var mapkey string
			var mapvalue *resource.Quantity
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEvents
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEvents
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllocatableResources[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
