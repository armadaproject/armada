syntax = 'proto3';

package executorapi;
option go_package = "github.com/armadaproject/armada/pkg/executorapi";

import "pkg/armadaevents/events.proto";
import "pkg/api/submit.proto";
import "google/protobuf/empty.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";


// Used by the scheduler when allocating jobs to executors.
message NodeInfo {
  reserved 7, 11;
  string name = 1;
  repeated k8s.io.api.core.v1.Taint taints = 2;
  map<string,string> labels = 3;
  // To be deprecated in favour of total_resources + allocated_resources.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable_resources = 4;
  // To be deprecated in favour of total_resources + allocated_resources.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> available_resources = 5;
  // Total node resources.
  // Resources available for allocation is given by the difference between this and allocated_resources.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> total_resources = 6;
  // All run ids of jobs on the node, mapped to their current state
  map<string, api.JobState>  run_ids_by_state = 8;
  // The amount of resource allocated to non-armada pods by priority
  map<int32, ComputeResource> non_armada_allocated_resources = 9;
  bool unschedulable = 10;
  // This should only be used for metrics
  // This is the type the node should be reported as. It is simple a label to categorise the group the node belongs to
  string node_type = 12;
  // The pool that this node belongs to, this is used for scheduling purposes
  string pool = 13;
  // Replaces resource_usage_by_queue
  repeated PoolQueueResource resource_usage_by_queue_and_pool = 14;
}

message ComputeResource {
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 1;
}

message PoolQueueResource {
  string pool = 1;
  string queue = 2;
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 3;
}

message EventList {
  repeated armadaevents.EventSequence events = 1;
}

message LeaseRequest{
  // Each executor has a unique name associated with it.
  string executor_id = 1;
  // Nodes are split into pools. This field indicates for which pool jobs are leased.
  string pool = 2;
  // Total resources available for scheduling across all nodes.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 3;
  // Jobs submitted to this executor must require at least this amount of resources.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> minimum_job_size = 4;
  // For each node in the cluster:
  // - The total allocatable resources on that node.
  // - The job runs running on those nodes,
  // - Any taints and labels on the node.
  repeated NodeInfo nodes = 5;
  // Max number of jobs this request should return
  uint32 max_jobs_to_lease = 7;
  // Run Ids of jobs owned by the executor but not currently assigned to a node.
  repeated string unassigned_job_run_ids = 8;
}

// Indicates that a job run is now leased.
message JobRunLease{
  string queue = 2;
  string jobset = 3;
  string user = 4;
  repeated string groups = 5;
  armadaevents.SubmitJob job  = 6;
  string job_run_id = 7;
}

// Indicates that the job runs with the given ids should be cancelled.
message CancelRuns{
  repeated string job_run_ids_to_cancel = 2;
}

// Indicates that the job runs with the given ids should be preempted.
message PreemptRuns{
  repeated string job_run_ids_to_preempt = 2;
}

// Indicates the end of the lease stream.
message EndMarker{}

message LeaseStreamMessage{
  oneof event {
    JobRunLease lease = 1;
    CancelRuns cancel_runs = 2;
    EndMarker end = 3;
    PreemptRuns preempt_runs = 4;
  }
}

service ExecutorApi {
  // Reports usage information to the scheduler.
  // In return, the scheduler provides:
  // - Slice of job runs that the executor is currently running that should be cancelled.
  // - Slice of job runs that the executor is currently running that should be preempted.
  // - Slice job runs that the executor is not currently running that should be scheduled.
  // This call also acts as a signal to the scheduler that the executor is alive and accepting jobs.
  rpc LeaseJobRuns (stream LeaseRequest) returns (stream LeaseStreamMessage);
  // Reports job run events to the scheduler.
  rpc ReportEvents (EventList) returns (google.protobuf.Empty);
}
