// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/executorapi/executorapi.proto

package executorapi

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExecutorApi_LeaseJobRuns_FullMethodName = "/executorapi.ExecutorApi/LeaseJobRuns"
	ExecutorApi_ReportEvents_FullMethodName = "/executorapi.ExecutorApi/ReportEvents"
)

// ExecutorApiClient is the client API for ExecutorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorApiClient interface {
	// Reports usage information to the scheduler.
	// In return, the scheduler provides:
	// - Slice of job runs that the executor is currently running that should be cancelled.
	// - Slice of job runs that the executor is currently running that should be preempted.
	// - Slice job runs that the executor is not currently running that should be scheduled.
	// This call also acts as a signal to the scheduler that the executor is alive and accepting jobs.
	LeaseJobRuns(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LeaseRequest, LeaseStreamMessage], error)
	// Reports job run events to the scheduler.
	ReportEvents(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executorApiClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorApiClient(cc grpc.ClientConnInterface) ExecutorApiClient {
	return &executorApiClient{cc}
}

func (c *executorApiClient) LeaseJobRuns(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LeaseRequest, LeaseStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExecutorApi_ServiceDesc.Streams[0], ExecutorApi_LeaseJobRuns_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LeaseRequest, LeaseStreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecutorApi_LeaseJobRunsClient = grpc.BidiStreamingClient[LeaseRequest, LeaseStreamMessage]

func (c *executorApiClient) ReportEvents(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutorApi_ReportEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorApiServer is the server API for ExecutorApi service.
// All implementations must embed UnimplementedExecutorApiServer
// for forward compatibility.
type ExecutorApiServer interface {
	// Reports usage information to the scheduler.
	// In return, the scheduler provides:
	// - Slice of job runs that the executor is currently running that should be cancelled.
	// - Slice of job runs that the executor is currently running that should be preempted.
	// - Slice job runs that the executor is not currently running that should be scheduled.
	// This call also acts as a signal to the scheduler that the executor is alive and accepting jobs.
	LeaseJobRuns(grpc.BidiStreamingServer[LeaseRequest, LeaseStreamMessage]) error
	// Reports job run events to the scheduler.
	ReportEvents(context.Context, *EventList) (*emptypb.Empty, error)
	mustEmbedUnimplementedExecutorApiServer()
}

// UnimplementedExecutorApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutorApiServer struct{}

func (UnimplementedExecutorApiServer) LeaseJobRuns(grpc.BidiStreamingServer[LeaseRequest, LeaseStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method LeaseJobRuns not implemented")
}
func (UnimplementedExecutorApiServer) ReportEvents(context.Context, *EventList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvents not implemented")
}
func (UnimplementedExecutorApiServer) mustEmbedUnimplementedExecutorApiServer() {}
func (UnimplementedExecutorApiServer) testEmbeddedByValue()                     {}

// UnsafeExecutorApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorApiServer will
// result in compilation errors.
type UnsafeExecutorApiServer interface {
	mustEmbedUnimplementedExecutorApiServer()
}

func RegisterExecutorApiServer(s grpc.ServiceRegistrar, srv ExecutorApiServer) {
	// If the following call pancis, it indicates UnimplementedExecutorApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutorApi_ServiceDesc, srv)
}

func _ExecutorApi_LeaseJobRuns_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorApiServer).LeaseJobRuns(&grpc.GenericServerStream[LeaseRequest, LeaseStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecutorApi_LeaseJobRunsServer = grpc.BidiStreamingServer[LeaseRequest, LeaseStreamMessage]

func _ExecutorApi_ReportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorApiServer).ReportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorApi_ReportEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorApiServer).ReportEvents(ctx, req.(*EventList))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutorApi_ServiceDesc is the grpc.ServiceDesc for ExecutorApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutorApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "executorapi.ExecutorApi",
	HandlerType: (*ExecutorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportEvents",
			Handler:    _ExecutorApi_ReportEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LeaseJobRuns",
			Handler:       _ExecutorApi_LeaseJobRuns_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/executorapi/executorapi.proto",
}
