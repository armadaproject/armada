// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pkg/executorapi/executorapi.proto

package executorapi

import (
	api "pkg/api"
	armadaevents "pkg/armadaevents"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used by the scheduler when allocating jobs to executors.
type NodeInfo struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Taints []*v1.Taint            `protobuf:"bytes,2,rep,name=taints,proto3" json:"taints,omitempty"`
	Labels map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// To be deprecated in favour of total_resources + allocated_resources.
	AllocatableResources map[string]*resource.Quantity `protobuf:"bytes,4,rep,name=allocatable_resources,json=allocatableResources,proto3" json:"allocatable_resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// To be deprecated in favour of total_resources + allocated_resources.
	AvailableResources map[string]*resource.Quantity `protobuf:"bytes,5,rep,name=available_resources,json=availableResources,proto3" json:"available_resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Total node resources.
	// Resources available for allocation is given by the difference between this and allocated_resources.
	TotalResources map[string]*resource.Quantity `protobuf:"bytes,6,rep,name=total_resources,json=totalResources,proto3" json:"total_resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// All run ids of jobs on the node, mapped to their current state
	RunIdsByState map[string]api.JobState `protobuf:"bytes,8,rep,name=run_ids_by_state,json=runIdsByState,proto3" json:"run_ids_by_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=api.JobState"`
	// The amount of resource allocated to non-armada pods by priority
	NonArmadaAllocatedResources map[int32]*ComputeResource `protobuf:"bytes,9,rep,name=non_armada_allocated_resources,json=nonArmadaAllocatedResources,proto3" json:"non_armada_allocated_resources,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Unschedulable               bool                       `protobuf:"varint,10,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	// This should only be used for metrics
	// This is the type the node should be reported as. It is simple a label to categorise the group the node belongs to
	NodeType string `protobuf:"bytes,12,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	// The pool that this node belongs to, this is used for scheduling purposes
	Pool string `protobuf:"bytes,13,opt,name=pool,proto3" json:"pool,omitempty"`
	// Replaces resource_usage_by_queue
	ResourceUsageByQueueAndPool []*PoolQueueResource `protobuf:"bytes,14,rep,name=resource_usage_by_queue_and_pool,json=resourceUsageByQueueAndPool,proto3" json:"resource_usage_by_queue_and_pool,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{0}
}

func (x *NodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeInfo) GetTaints() []*v1.Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodeInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeInfo) GetAllocatableResources() map[string]*resource.Quantity {
	if x != nil {
		return x.AllocatableResources
	}
	return nil
}

func (x *NodeInfo) GetAvailableResources() map[string]*resource.Quantity {
	if x != nil {
		return x.AvailableResources
	}
	return nil
}

func (x *NodeInfo) GetTotalResources() map[string]*resource.Quantity {
	if x != nil {
		return x.TotalResources
	}
	return nil
}

func (x *NodeInfo) GetRunIdsByState() map[string]api.JobState {
	if x != nil {
		return x.RunIdsByState
	}
	return nil
}

func (x *NodeInfo) GetNonArmadaAllocatedResources() map[int32]*ComputeResource {
	if x != nil {
		return x.NonArmadaAllocatedResources
	}
	return nil
}

func (x *NodeInfo) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeInfo) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeInfo) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *NodeInfo) GetResourceUsageByQueueAndPool() []*PoolQueueResource {
	if x != nil {
		return x.ResourceUsageByQueueAndPool
	}
	return nil
}

type ComputeResource struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Resources     map[string]*resource.Quantity `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComputeResource) Reset() {
	*x = ComputeResource{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeResource) ProtoMessage() {}

func (x *ComputeResource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeResource.ProtoReflect.Descriptor instead.
func (*ComputeResource) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{1}
}

func (x *ComputeResource) GetResources() map[string]*resource.Quantity {
	if x != nil {
		return x.Resources
	}
	return nil
}

type PoolQueueResource struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Pool          string                        `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Queue         string                        `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Resources     map[string]*resource.Quantity `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolQueueResource) Reset() {
	*x = PoolQueueResource{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolQueueResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolQueueResource) ProtoMessage() {}

func (x *PoolQueueResource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolQueueResource.ProtoReflect.Descriptor instead.
func (*PoolQueueResource) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{2}
}

func (x *PoolQueueResource) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *PoolQueueResource) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *PoolQueueResource) GetResources() map[string]*resource.Quantity {
	if x != nil {
		return x.Resources
	}
	return nil
}

type EventList struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Events        []*armadaevents.EventSequence `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventList) Reset() {
	*x = EventList{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventList) ProtoMessage() {}

func (x *EventList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventList.ProtoReflect.Descriptor instead.
func (*EventList) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{3}
}

func (x *EventList) GetEvents() []*armadaevents.EventSequence {
	if x != nil {
		return x.Events
	}
	return nil
}

type LeaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each executor has a unique name associated with it.
	ExecutorId string `protobuf:"bytes,1,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	// Nodes are split into pools. This field indicates for which pool jobs are leased.
	Pool string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	// Total resources available for scheduling across all nodes.
	Resources map[string]*resource.Quantity `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Jobs submitted to this executor must require at least this amount of resources.
	MinimumJobSize map[string]*resource.Quantity `protobuf:"bytes,4,rep,name=minimum_job_size,json=minimumJobSize,proto3" json:"minimum_job_size,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// For each node in the cluster:
	// - The total allocatable resources on that node.
	// - The job runs running on those nodes,
	// - Any taints and labels on the node.
	Nodes []*NodeInfo `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Max number of jobs this request should return
	MaxJobsToLease uint32 `protobuf:"varint,7,opt,name=max_jobs_to_lease,json=maxJobsToLease,proto3" json:"max_jobs_to_lease,omitempty"`
	// Run Ids of jobs owned by the executor but not currently assigned to a node.
	UnassignedJobRunIds []string `protobuf:"bytes,8,rep,name=unassigned_job_run_ids,json=unassignedJobRunIds,proto3" json:"unassigned_job_run_ids,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LeaseRequest) Reset() {
	*x = LeaseRequest{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRequest) ProtoMessage() {}

func (x *LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRequest.ProtoReflect.Descriptor instead.
func (*LeaseRequest) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{4}
}

func (x *LeaseRequest) GetExecutorId() string {
	if x != nil {
		return x.ExecutorId
	}
	return ""
}

func (x *LeaseRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *LeaseRequest) GetResources() map[string]*resource.Quantity {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *LeaseRequest) GetMinimumJobSize() map[string]*resource.Quantity {
	if x != nil {
		return x.MinimumJobSize
	}
	return nil
}

func (x *LeaseRequest) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *LeaseRequest) GetMaxJobsToLease() uint32 {
	if x != nil {
		return x.MaxJobsToLease
	}
	return 0
}

func (x *LeaseRequest) GetUnassignedJobRunIds() []string {
	if x != nil {
		return x.UnassignedJobRunIds
	}
	return nil
}

// Indicates that a job run is now leased.
type JobRunLease struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Queue         string                  `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Jobset        string                  `protobuf:"bytes,3,opt,name=jobset,proto3" json:"jobset,omitempty"`
	User          string                  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Groups        []string                `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	Job           *armadaevents.SubmitJob `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`
	JobRunId      string                  `protobuf:"bytes,7,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobRunLease) Reset() {
	*x = JobRunLease{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunLease) ProtoMessage() {}

func (x *JobRunLease) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunLease.ProtoReflect.Descriptor instead.
func (*JobRunLease) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{5}
}

func (x *JobRunLease) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobRunLease) GetJobset() string {
	if x != nil {
		return x.Jobset
	}
	return ""
}

func (x *JobRunLease) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *JobRunLease) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *JobRunLease) GetJob() *armadaevents.SubmitJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobRunLease) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

// Indicates that the job runs with the given ids should be cancelled.
type CancelRuns struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	JobRunIdsToCancel []string               `protobuf:"bytes,2,rep,name=job_run_ids_to_cancel,json=jobRunIdsToCancel,proto3" json:"job_run_ids_to_cancel,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CancelRuns) Reset() {
	*x = CancelRuns{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRuns) ProtoMessage() {}

func (x *CancelRuns) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRuns.ProtoReflect.Descriptor instead.
func (*CancelRuns) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{6}
}

func (x *CancelRuns) GetJobRunIdsToCancel() []string {
	if x != nil {
		return x.JobRunIdsToCancel
	}
	return nil
}

// Indicates that the job runs with the given ids should be preempted.
type PreemptRuns struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	JobRunIdsToPreempt []string               `protobuf:"bytes,2,rep,name=job_run_ids_to_preempt,json=jobRunIdsToPreempt,proto3" json:"job_run_ids_to_preempt,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PreemptRuns) Reset() {
	*x = PreemptRuns{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreemptRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptRuns) ProtoMessage() {}

func (x *PreemptRuns) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptRuns.ProtoReflect.Descriptor instead.
func (*PreemptRuns) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{7}
}

func (x *PreemptRuns) GetJobRunIdsToPreempt() []string {
	if x != nil {
		return x.JobRunIdsToPreempt
	}
	return nil
}

// Indicates the end of the lease stream.
type EndMarker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMarker) Reset() {
	*x = EndMarker{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMarker) ProtoMessage() {}

func (x *EndMarker) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMarker.ProtoReflect.Descriptor instead.
func (*EndMarker) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{8}
}

type LeaseStreamMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*LeaseStreamMessage_Lease
	//	*LeaseStreamMessage_CancelRuns
	//	*LeaseStreamMessage_End
	//	*LeaseStreamMessage_PreemptRuns
	Event         isLeaseStreamMessage_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaseStreamMessage) Reset() {
	*x = LeaseStreamMessage{}
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseStreamMessage) ProtoMessage() {}

func (x *LeaseStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_executorapi_executorapi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseStreamMessage.ProtoReflect.Descriptor instead.
func (*LeaseStreamMessage) Descriptor() ([]byte, []int) {
	return file_pkg_executorapi_executorapi_proto_rawDescGZIP(), []int{9}
}

func (x *LeaseStreamMessage) GetEvent() isLeaseStreamMessage_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *LeaseStreamMessage) GetLease() *JobRunLease {
	if x != nil {
		if x, ok := x.Event.(*LeaseStreamMessage_Lease); ok {
			return x.Lease
		}
	}
	return nil
}

func (x *LeaseStreamMessage) GetCancelRuns() *CancelRuns {
	if x != nil {
		if x, ok := x.Event.(*LeaseStreamMessage_CancelRuns); ok {
			return x.CancelRuns
		}
	}
	return nil
}

func (x *LeaseStreamMessage) GetEnd() *EndMarker {
	if x != nil {
		if x, ok := x.Event.(*LeaseStreamMessage_End); ok {
			return x.End
		}
	}
	return nil
}

func (x *LeaseStreamMessage) GetPreemptRuns() *PreemptRuns {
	if x != nil {
		if x, ok := x.Event.(*LeaseStreamMessage_PreemptRuns); ok {
			return x.PreemptRuns
		}
	}
	return nil
}

type isLeaseStreamMessage_Event interface {
	isLeaseStreamMessage_Event()
}

type LeaseStreamMessage_Lease struct {
	Lease *JobRunLease `protobuf:"bytes,1,opt,name=lease,proto3,oneof"`
}

type LeaseStreamMessage_CancelRuns struct {
	CancelRuns *CancelRuns `protobuf:"bytes,2,opt,name=cancel_runs,json=cancelRuns,proto3,oneof"`
}

type LeaseStreamMessage_End struct {
	End *EndMarker `protobuf:"bytes,3,opt,name=end,proto3,oneof"`
}

type LeaseStreamMessage_PreemptRuns struct {
	PreemptRuns *PreemptRuns `protobuf:"bytes,4,opt,name=preempt_runs,json=preemptRuns,proto3,oneof"`
}

func (*LeaseStreamMessage_Lease) isLeaseStreamMessage_Event() {}

func (*LeaseStreamMessage_CancelRuns) isLeaseStreamMessage_Event() {}

func (*LeaseStreamMessage_End) isLeaseStreamMessage_Event() {}

func (*LeaseStreamMessage_PreemptRuns) isLeaseStreamMessage_Event() {}

var File_pkg_executorapi_executorapi_proto protoreflect.FileDescriptor

var file_pkg_executorapi_executorapi_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x70, 0x6b, 0x67, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69,
	0x1a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x0b, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x5e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x1e, 0x6e, 0x6f, 0x6e, 0x5f,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x41, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x6e, 0x6f, 0x6e, 0x41, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x65, 0x0a, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77,
	0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71,
	0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4f, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x20, 0x4e, 0x6f, 0x6e, 0x41, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xca, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x50, 0x6f,
	0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd2, 0x04, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x54, 0x6f,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x6c, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x4a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x0b,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x15,
	0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0x41,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x16, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x22, 0x0b, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0xf6,
	0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x75, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x75, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x9d, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x12, 0x4e, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x11, 0x5a, 0x0f, 0x70, 0x6b, 0x67, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_pkg_executorapi_executorapi_proto_rawDescOnce sync.Once
	file_pkg_executorapi_executorapi_proto_rawDescData []byte
)

func file_pkg_executorapi_executorapi_proto_rawDescGZIP() []byte {
	file_pkg_executorapi_executorapi_proto_rawDescOnce.Do(func() {
		file_pkg_executorapi_executorapi_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_executorapi_executorapi_proto_rawDesc), len(file_pkg_executorapi_executorapi_proto_rawDesc)))
	})
	return file_pkg_executorapi_executorapi_proto_rawDescData
}

var file_pkg_executorapi_executorapi_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_pkg_executorapi_executorapi_proto_goTypes = []any{
	(*NodeInfo)(nil),                   // 0: executorapi.NodeInfo
	(*ComputeResource)(nil),            // 1: executorapi.ComputeResource
	(*PoolQueueResource)(nil),          // 2: executorapi.PoolQueueResource
	(*EventList)(nil),                  // 3: executorapi.EventList
	(*LeaseRequest)(nil),               // 4: executorapi.LeaseRequest
	(*JobRunLease)(nil),                // 5: executorapi.JobRunLease
	(*CancelRuns)(nil),                 // 6: executorapi.CancelRuns
	(*PreemptRuns)(nil),                // 7: executorapi.PreemptRuns
	(*EndMarker)(nil),                  // 8: executorapi.EndMarker
	(*LeaseStreamMessage)(nil),         // 9: executorapi.LeaseStreamMessage
	nil,                                // 10: executorapi.NodeInfo.LabelsEntry
	nil,                                // 11: executorapi.NodeInfo.AllocatableResourcesEntry
	nil,                                // 12: executorapi.NodeInfo.AvailableResourcesEntry
	nil,                                // 13: executorapi.NodeInfo.TotalResourcesEntry
	nil,                                // 14: executorapi.NodeInfo.RunIdsByStateEntry
	nil,                                // 15: executorapi.NodeInfo.NonArmadaAllocatedResourcesEntry
	nil,                                // 16: executorapi.ComputeResource.ResourcesEntry
	nil,                                // 17: executorapi.PoolQueueResource.ResourcesEntry
	nil,                                // 18: executorapi.LeaseRequest.ResourcesEntry
	nil,                                // 19: executorapi.LeaseRequest.MinimumJobSizeEntry
	(*v1.Taint)(nil),                   // 20: k8s.io.api.core.v1.Taint
	(*armadaevents.EventSequence)(nil), // 21: armadaevents.EventSequence
	(*armadaevents.SubmitJob)(nil),     // 22: armadaevents.SubmitJob
	(*resource.Quantity)(nil),          // 23: k8s.io.apimachinery.pkg.api.resource.Quantity
	(api.JobState)(0),                  // 24: api.JobState
	(*emptypb.Empty)(nil),              // 25: google.protobuf.Empty
}
var file_pkg_executorapi_executorapi_proto_depIdxs = []int32{
	20, // 0: executorapi.NodeInfo.taints:type_name -> k8s.io.api.core.v1.Taint
	10, // 1: executorapi.NodeInfo.labels:type_name -> executorapi.NodeInfo.LabelsEntry
	11, // 2: executorapi.NodeInfo.allocatable_resources:type_name -> executorapi.NodeInfo.AllocatableResourcesEntry
	12, // 3: executorapi.NodeInfo.available_resources:type_name -> executorapi.NodeInfo.AvailableResourcesEntry
	13, // 4: executorapi.NodeInfo.total_resources:type_name -> executorapi.NodeInfo.TotalResourcesEntry
	14, // 5: executorapi.NodeInfo.run_ids_by_state:type_name -> executorapi.NodeInfo.RunIdsByStateEntry
	15, // 6: executorapi.NodeInfo.non_armada_allocated_resources:type_name -> executorapi.NodeInfo.NonArmadaAllocatedResourcesEntry
	2,  // 7: executorapi.NodeInfo.resource_usage_by_queue_and_pool:type_name -> executorapi.PoolQueueResource
	16, // 8: executorapi.ComputeResource.resources:type_name -> executorapi.ComputeResource.ResourcesEntry
	17, // 9: executorapi.PoolQueueResource.resources:type_name -> executorapi.PoolQueueResource.ResourcesEntry
	21, // 10: executorapi.EventList.events:type_name -> armadaevents.EventSequence
	18, // 11: executorapi.LeaseRequest.resources:type_name -> executorapi.LeaseRequest.ResourcesEntry
	19, // 12: executorapi.LeaseRequest.minimum_job_size:type_name -> executorapi.LeaseRequest.MinimumJobSizeEntry
	0,  // 13: executorapi.LeaseRequest.nodes:type_name -> executorapi.NodeInfo
	22, // 14: executorapi.JobRunLease.job:type_name -> armadaevents.SubmitJob
	5,  // 15: executorapi.LeaseStreamMessage.lease:type_name -> executorapi.JobRunLease
	6,  // 16: executorapi.LeaseStreamMessage.cancel_runs:type_name -> executorapi.CancelRuns
	8,  // 17: executorapi.LeaseStreamMessage.end:type_name -> executorapi.EndMarker
	7,  // 18: executorapi.LeaseStreamMessage.preempt_runs:type_name -> executorapi.PreemptRuns
	23, // 19: executorapi.NodeInfo.AllocatableResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 20: executorapi.NodeInfo.AvailableResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 21: executorapi.NodeInfo.TotalResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	24, // 22: executorapi.NodeInfo.RunIdsByStateEntry.value:type_name -> api.JobState
	1,  // 23: executorapi.NodeInfo.NonArmadaAllocatedResourcesEntry.value:type_name -> executorapi.ComputeResource
	23, // 24: executorapi.ComputeResource.ResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 25: executorapi.PoolQueueResource.ResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 26: executorapi.LeaseRequest.ResourcesEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 27: executorapi.LeaseRequest.MinimumJobSizeEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	4,  // 28: executorapi.ExecutorApi.LeaseJobRuns:input_type -> executorapi.LeaseRequest
	3,  // 29: executorapi.ExecutorApi.ReportEvents:input_type -> executorapi.EventList
	9,  // 30: executorapi.ExecutorApi.LeaseJobRuns:output_type -> executorapi.LeaseStreamMessage
	25, // 31: executorapi.ExecutorApi.ReportEvents:output_type -> google.protobuf.Empty
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_pkg_executorapi_executorapi_proto_init() }
func file_pkg_executorapi_executorapi_proto_init() {
	if File_pkg_executorapi_executorapi_proto != nil {
		return
	}
	file_pkg_executorapi_executorapi_proto_msgTypes[9].OneofWrappers = []any{
		(*LeaseStreamMessage_Lease)(nil),
		(*LeaseStreamMessage_CancelRuns)(nil),
		(*LeaseStreamMessage_End)(nil),
		(*LeaseStreamMessage_PreemptRuns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_executorapi_executorapi_proto_rawDesc), len(file_pkg_executorapi_executorapi_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_executorapi_executorapi_proto_goTypes,
		DependencyIndexes: file_pkg_executorapi_executorapi_proto_depIdxs,
		MessageInfos:      file_pkg_executorapi_executorapi_proto_msgTypes,
	}.Build()
	File_pkg_executorapi_executorapi_proto = out.File
	file_pkg_executorapi_executorapi_proto_goTypes = nil
	file_pkg_executorapi_executorapi_proto_depIdxs = nil
}
