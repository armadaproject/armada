// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/usage.proto

package api

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueueReport struct {
	Name               string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Resources          map[string]resource.Quantity `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourcesUsed      map[string]resource.Quantity `protobuf:"bytes,3,rep,name=resources_used,json=resourcesUsed,proto3" json:"resourcesUsed,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CountOfPodsByPhase map[string]uint32            `protobuf:"bytes,4,rep,name=count_of_pods_by_phase,json=countOfPodsByPhase,proto3" json:"countOfPodsByPhase,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *QueueReport) Reset()      { *m = QueueReport{} }
func (*QueueReport) ProtoMessage() {}
func (*QueueReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5643ccb387d55d48, []int{0}
}
func (m *QueueReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueReport.Merge(m, src)
}
func (m *QueueReport) XXX_Size() int {
	return m.Size()
}
func (m *QueueReport) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueReport.DiscardUnknown(m)
}

var xxx_messageInfo_QueueReport proto.InternalMessageInfo

func (m *QueueReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueueReport) GetResources() map[string]resource.Quantity {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *QueueReport) GetResourcesUsed() map[string]resource.Quantity {
	if m != nil {
		return m.ResourcesUsed
	}
	return nil
}

func (m *QueueReport) GetCountOfPodsByPhase() map[string]uint32 {
	if m != nil {
		return m.CountOfPodsByPhase
	}
	return nil
}

type ClusterUsageReport struct {
	ClusterId                string                       `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	Pool                     string                       `protobuf:"bytes,6,opt,name=pool,proto3" json:"pool,omitempty"`
	ReportTime               time.Time                    `protobuf:"bytes,2,opt,name=report_time,json=reportTime,proto3,stdtime" json:"report_time"`
	Queues                   []*QueueReport               `protobuf:"bytes,3,rep,name=queues,proto3" json:"queues,omitempty"`                                                                                                                              // Deprecated: Do not use.
	ClusterCapacity          map[string]resource.Quantity `protobuf:"bytes,4,rep,name=cluster_capacity,json=clusterCapacity,proto3" json:"clusterCapacity,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                             // Deprecated: Do not use.
	ClusterAvailableCapacity map[string]resource.Quantity `protobuf:"bytes,5,rep,name=cluster_available_capacity,json=clusterAvailableCapacity,proto3" json:"clusterAvailableCapacity,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Deprecated: Do not use.
	NodeTypeUsageReports     []NodeTypeUsageReport        `protobuf:"bytes,7,rep,name=node_type_usage_reports,json=nodeTypeUsageReports,proto3" json:"node_type_usage_reports"`
}

func (m *ClusterUsageReport) Reset()      { *m = ClusterUsageReport{} }
func (*ClusterUsageReport) ProtoMessage() {}
func (*ClusterUsageReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5643ccb387d55d48, []int{1}
}
func (m *ClusterUsageReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterUsageReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterUsageReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterUsageReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterUsageReport.Merge(m, src)
}
func (m *ClusterUsageReport) XXX_Size() int {
	return m.Size()
}
func (m *ClusterUsageReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterUsageReport.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterUsageReport proto.InternalMessageInfo

func (m *ClusterUsageReport) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterUsageReport) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *ClusterUsageReport) GetReportTime() time.Time {
	if m != nil {
		return m.ReportTime
	}
	return time.Time{}
}

// Deprecated: Do not use.
func (m *ClusterUsageReport) GetQueues() []*QueueReport {
	if m != nil {
		return m.Queues
	}
	return nil
}

// Deprecated: Do not use.
func (m *ClusterUsageReport) GetClusterCapacity() map[string]resource.Quantity {
	if m != nil {
		return m.ClusterCapacity
	}
	return nil
}

// Deprecated: Do not use.
func (m *ClusterUsageReport) GetClusterAvailableCapacity() map[string]resource.Quantity {
	if m != nil {
		return m.ClusterAvailableCapacity
	}
	return nil
}

func (m *ClusterUsageReport) GetNodeTypeUsageReports() []NodeTypeUsageReport {
	if m != nil {
		return m.NodeTypeUsageReports
	}
	return nil
}

type NodeTypeIdentifier struct {
	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Taints []v1.Taint `protobuf:"bytes,2,rep,name=taints,proto3" json:"taints"`
}

func (m *NodeTypeIdentifier) Reset()      { *m = NodeTypeIdentifier{} }
func (*NodeTypeIdentifier) ProtoMessage() {}
func (*NodeTypeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_5643ccb387d55d48, []int{2}
}
func (m *NodeTypeIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeTypeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeTypeIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeTypeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTypeIdentifier.Merge(m, src)
}
func (m *NodeTypeIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *NodeTypeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTypeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTypeIdentifier proto.InternalMessageInfo

func (m *NodeTypeIdentifier) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeTypeIdentifier) GetTaints() []v1.Taint {
	if m != nil {
		return m.Taints
	}
	return nil
}

type NodeTypeUsageReport struct {
	NodeType          *NodeTypeIdentifier          `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"nodeType,omitempty"`
	Capacity          map[string]resource.Quantity `protobuf:"bytes,2,rep,name=capacity,proto3" json:"capacity" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AvailableCapacity map[string]resource.Quantity `protobuf:"bytes,3,rep,name=available_capacity,json=availableCapacity,proto3" json:"availableCapacity,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CordonedUsage     map[string]resource.Quantity `protobuf:"bytes,5,rep,name=cordoned_usage,json=cordonedUsage,proto3" json:"cordonedUsage,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Queues            []*QueueReport               `protobuf:"bytes,4,rep,name=queues,proto3" json:"queues,omitempty"`
	TotalNodes        int32                        `protobuf:"varint,7,opt,name=totalNodes,proto3" json:"totalNodes,omitempty"`
	SchedulableNodes  int32                        `protobuf:"varint,6,opt,name=schedulableNodes,proto3" json:"schedulableNodes,omitempty"`
}

func (m *NodeTypeUsageReport) Reset()      { *m = NodeTypeUsageReport{} }
func (*NodeTypeUsageReport) ProtoMessage() {}
func (*NodeTypeUsageReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5643ccb387d55d48, []int{3}
}
func (m *NodeTypeUsageReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeTypeUsageReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeTypeUsageReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeTypeUsageReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTypeUsageReport.Merge(m, src)
}
func (m *NodeTypeUsageReport) XXX_Size() int {
	return m.Size()
}
func (m *NodeTypeUsageReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTypeUsageReport.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTypeUsageReport proto.InternalMessageInfo

func (m *NodeTypeUsageReport) GetNodeType() *NodeTypeIdentifier {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (m *NodeTypeUsageReport) GetCapacity() map[string]resource.Quantity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *NodeTypeUsageReport) GetAvailableCapacity() map[string]resource.Quantity {
	if m != nil {
		return m.AvailableCapacity
	}
	return nil
}

func (m *NodeTypeUsageReport) GetCordonedUsage() map[string]resource.Quantity {
	if m != nil {
		return m.CordonedUsage
	}
	return nil
}

func (m *NodeTypeUsageReport) GetQueues() []*QueueReport {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *NodeTypeUsageReport) GetTotalNodes() int32 {
	if m != nil {
		return m.TotalNodes
	}
	return 0
}

func (m *NodeTypeUsageReport) GetSchedulableNodes() int32 {
	if m != nil {
		return m.SchedulableNodes
	}
	return 0
}

func init() {
	proto.RegisterType((*QueueReport)(nil), "api.QueueReport")
	proto.RegisterMapType((map[string]uint32)(nil), "api.QueueReport.CountOfPodsByPhaseEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.QueueReport.ResourcesEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.QueueReport.ResourcesUsedEntry")
	proto.RegisterType((*ClusterUsageReport)(nil), "api.ClusterUsageReport")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.ClusterUsageReport.ClusterAvailableCapacityEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.ClusterUsageReport.ClusterCapacityEntry")
	proto.RegisterType((*NodeTypeIdentifier)(nil), "api.NodeTypeIdentifier")
	proto.RegisterType((*NodeTypeUsageReport)(nil), "api.NodeTypeUsageReport")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.NodeTypeUsageReport.AvailableCapacityEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.NodeTypeUsageReport.CapacityEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.NodeTypeUsageReport.CordonedUsageEntry")
}

func init() { proto.RegisterFile("pkg/api/usage.proto", fileDescriptor_5643ccb387d55d48) }

var fileDescriptor_5643ccb387d55d48 = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x65, 0x49, 0xb5, 0x47, 0xb0, 0xeb, 0x6e, 0x0c, 0x9b, 0x65, 0x11, 0xda, 0x50, 0x81,
	0x42, 0x68, 0xd3, 0x25, 0xe2, 0xa6, 0x48, 0xd0, 0x43, 0x01, 0xcb, 0x35, 0x5a, 0x5f, 0x5a, 0x87,
	0xb0, 0x81, 0x1e, 0x5a, 0x10, 0x2b, 0x72, 0x4d, 0xb3, 0x92, 0xb8, 0x5b, 0x72, 0x69, 0x80, 0xc8,
	0xa5, 0x8f, 0x90, 0x47, 0xe8, 0xb9, 0xef, 0xd0, 0x7b, 0x8e, 0x39, 0xe6, 0xd4, 0x1f, 0xf9, 0x45,
	0x8a, 0xdd, 0x25, 0x25, 0x2a, 0x94, 0x9a, 0x93, 0x7c, 0xdb, 0x9f, 0x6f, 0xe6, 0x9b, 0x9d, 0xf9,
	0x66, 0x48, 0x78, 0xc0, 0x47, 0xa1, 0x43, 0x78, 0xe4, 0x64, 0x29, 0x09, 0x29, 0xe6, 0x09, 0x13,
	0x0c, 0x6d, 0x10, 0x1e, 0x59, 0x87, 0x21, 0x63, 0xe1, 0x98, 0x3a, 0xea, 0x68, 0x98, 0x5d, 0x3b,
	0x22, 0x9a, 0xd0, 0x54, 0x90, 0x09, 0xd7, 0x28, 0xeb, 0xa3, 0xb7, 0x01, 0x74, 0xc2, 0x45, 0x5e,
	0x5c, 0xf6, 0x46, 0xcf, 0x52, 0x1c, 0x31, 0xe5, 0xda, 0x67, 0x09, 0x75, 0x6e, 0x1f, 0x3b, 0x21,
	0x8d, 0x69, 0x42, 0x04, 0x0d, 0x0a, 0xcc, 0x93, 0x39, 0x66, 0x42, 0xfc, 0x9b, 0x28, 0xa6, 0x49,
	0xee, 0x94, 0xf1, 0x24, 0x34, 0x65, 0x59, 0xe2, 0xd3, 0x9a, 0xd5, 0xe7, 0x61, 0x24, 0x6e, 0xb2,
	0x21, 0xf6, 0xd9, 0xc4, 0x09, 0x59, 0xc8, 0xe6, 0xfc, 0x72, 0xa7, 0x36, 0x6a, 0xa5, 0xe1, 0xbd,
	0x3f, 0x5b, 0xd0, 0x7d, 0x9e, 0xd1, 0x8c, 0xba, 0x94, 0xb3, 0x44, 0x20, 0x04, 0xad, 0x98, 0x4c,
	0xa8, 0x69, 0x1c, 0x19, 0xfd, 0x2d, 0x57, 0xad, 0xd1, 0x29, 0x6c, 0x95, 0x74, 0xa9, 0xd9, 0x3c,
	0xda, 0xe8, 0x77, 0x8f, 0x0f, 0x31, 0xe1, 0x11, 0xae, 0x18, 0x62, 0xb7, 0x44, 0x9c, 0xc5, 0x22,
	0xc9, 0x07, 0xad, 0x57, 0x7f, 0x1d, 0x36, 0xdc, 0xb9, 0x1d, 0xba, 0x80, 0x9d, 0xd9, 0xc6, 0xcb,
	0x52, 0x1a, 0x98, 0x1b, 0xca, 0xd3, 0xc7, 0xab, 0x3d, 0x5d, 0xa5, 0x34, 0xa8, 0x7a, 0xdb, 0x4e,
	0xaa, 0x37, 0xe8, 0x27, 0xd8, 0xf7, 0x59, 0x16, 0x0b, 0x8f, 0x5d, 0x7b, 0x9c, 0x05, 0xa9, 0x37,
	0xcc, 0x3d, 0x7e, 0x43, 0x52, 0x6a, 0xb6, 0x94, 0xe7, 0x7e, 0xcd, 0xf3, 0xa9, 0x84, 0xff, 0x70,
	0x7d, 0xc1, 0x82, 0x74, 0x90, 0x5f, 0x48, 0xa8, 0x72, 0xef, 0x22, 0xbf, 0x76, 0x61, 0x8d, 0x61,
	0x67, 0xf1, 0x49, 0x68, 0x17, 0x36, 0x46, 0x34, 0x2f, 0x32, 0x23, 0x97, 0xe8, 0x1b, 0x68, 0xdf,
	0x92, 0x71, 0x46, 0xcd, 0xe6, 0x91, 0xd1, 0xef, 0x1e, 0x63, 0xac, 0x2b, 0x86, 0xab, 0x15, 0xc3,
	0x7c, 0x14, 0xaa, 0x40, 0xca, 0xe0, 0xf1, 0xf3, 0x8c, 0xc4, 0x22, 0x12, 0xb9, 0xab, 0x8d, 0xbf,
	0x6a, 0x3e, 0x33, 0x2c, 0x0e, 0xa8, 0xfe, 0xec, 0xb5, 0x32, 0x9e, 0xc1, 0xc1, 0x8a, 0x74, 0x2c,
	0xa1, 0xdd, 0xab, 0xd2, 0x6e, 0x57, 0xdc, 0xf4, 0xa6, 0x6d, 0x40, 0xa7, 0xe3, 0x2c, 0x15, 0x34,
	0xb9, 0x92, 0x2d, 0x52, 0xc8, 0xe8, 0x21, 0x80, 0xaf, 0x4f, 0xbd, 0x28, 0x28, 0x3c, 0x6d, 0x15,
	0x27, 0xe7, 0x81, 0x54, 0x19, 0x67, 0x6c, 0x6c, 0x76, 0xb4, 0xca, 0xe4, 0x1a, 0x9d, 0x41, 0x37,
	0x51, 0xc6, 0x9e, 0xec, 0xa4, 0xe2, 0x81, 0x16, 0xd6, 0x5d, 0x84, 0x4b, 0x15, 0xe3, 0xcb, 0xb2,
	0xcd, 0x06, 0x9b, 0x52, 0x14, 0x2f, 0xff, 0x3e, 0x34, 0x5c, 0xd0, 0x86, 0xf2, 0x0a, 0x3d, 0x82,
	0xce, 0xaf, 0xb2, 0xe4, 0x69, 0xa1, 0xaf, 0xdd, 0xb7, 0x55, 0x30, 0x68, 0x9a, 0x86, 0x5b, 0x60,
	0x90, 0x07, 0xbb, 0x65, 0x9c, 0x3e, 0xe1, 0xc4, 0x8f, 0x44, 0x5e, 0xa8, 0xe7, 0x91, 0xb2, 0xab,
	0x3f, 0xad, 0x3c, 0x3a, 0x2d, 0xe0, 0x5a, 0xa0, 0x1d, 0x19, 0x8b, 0x69, 0xb8, 0xef, 0xfb, 0x8b,
	0xb7, 0xe8, 0x05, 0x58, 0x25, 0x01, 0xb9, 0x25, 0xd1, 0x98, 0x0c, 0xc7, 0x74, 0x4e, 0xd5, 0x56,
	0x54, 0x5f, 0xbe, 0x83, 0xea, 0xa4, 0x34, 0x5c, 0xce, 0x69, 0xfa, 0x2b, 0x60, 0xe8, 0x0a, 0x0e,
	0x62, 0x16, 0x50, 0x4f, 0xe4, 0x9c, 0x7a, 0x6a, 0x82, 0x79, 0x3a, 0x53, 0xa9, 0xf9, 0x9e, 0x62,
	0x36, 0x15, 0xf3, 0xf7, 0x2c, 0xa0, 0x97, 0x39, 0xa7, 0x15, 0xea, 0xa2, 0xe3, 0xf6, 0xe2, 0xfa,
	0x55, 0x6a, 0x25, 0xb0, 0xb7, 0x2c, 0x09, 0x6b, 0x95, 0xeb, 0x0b, 0x78, 0xf8, 0xbf, 0xd9, 0x58,
	0x27, 0x79, 0xef, 0x67, 0x40, 0x65, 0x8e, 0xce, 0x03, 0x1a, 0x8b, 0xe8, 0x3a, 0xa2, 0x09, 0xda,
	0x81, 0xe6, 0x4c, 0xdb, 0xcd, 0x28, 0x40, 0x4f, 0xa1, 0x23, 0x48, 0x14, 0x8b, 0x72, 0x46, 0x7e,
	0x58, 0x21, 0xc4, 0x72, 0xc8, 0xe3, 0xdb, 0xc7, 0xf8, 0x52, 0x22, 0x8a, 0xec, 0x16, 0xf0, 0xde,
	0xef, 0x1d, 0x78, 0xb0, 0xa4, 0x06, 0xe8, 0x09, 0x6c, 0xcd, 0xca, 0xa7, 0x78, 0xba, 0xc7, 0x07,
	0x0b, 0x05, 0x9b, 0x07, 0xe3, 0x6e, 0x96, 0x95, 0x42, 0xdf, 0xc1, 0xe6, 0x4c, 0x5f, 0x3a, 0x90,
	0x4f, 0x56, 0x55, 0x19, 0x2f, 0x0a, 0x4a, 0x47, 0x35, 0xb3, 0x46, 0x01, 0xa0, 0x25, 0x9a, 0xd5,
	0x6d, 0xe5, 0xac, 0xf4, 0xb9, 0x42, 0xad, 0xda, 0xf9, 0x07, 0xa4, 0x26, 0xd2, 0x1f, 0x61, 0xc7,
	0x67, 0x49, 0xc0, 0x62, 0x1a, 0x68, 0x8d, 0x16, 0x5d, 0xf1, 0xd9, 0xea, 0xa8, 0x0b, 0xb8, 0x3a,
	0x5b, 0xf8, 0x40, 0xf8, 0xd5, 0x1b, 0xd4, 0x9f, 0x8d, 0x82, 0xd6, 0xf2, 0x51, 0x30, 0x1b, 0x03,
	0x36, 0x80, 0x60, 0x82, 0x8c, 0x25, 0x9b, 0xec, 0x0d, 0xa3, 0xdf, 0x76, 0x2b, 0x27, 0xe8, 0x53,
	0xd8, 0x4d, 0xfd, 0x1b, 0x1a, 0x64, 0x2a, 0x74, 0x8d, 0xea, 0x28, 0x54, 0xed, 0xdc, 0x1a, 0xc1,
	0xf6, 0xfd, 0xb5, 0x85, 0x80, 0xfd, 0xfb, 0xef, 0x07, 0xf9, 0xb5, 0xaa, 0xd7, 0x60, 0x9d, 0x8c,
	0xc7, 0xdf, 0x42, 0x5b, 0xd7, 0xf4, 0x6b, 0xe8, 0xea, 0xda, 0xe9, 0xed, 0xc1, 0x8a, 0xd1, 0x69,
	0xed, 0xd7, 0x3e, 0x1c, 0x67, 0xf2, 0xf7, 0x6b, 0xf0, 0xf4, 0xcd, 0xbf, 0x76, 0xe3, 0xb7, 0xa9,
	0x6d, 0xbc, 0x9a, 0xda, 0xc6, 0xeb, 0xa9, 0x6d, 0xfc, 0x33, 0xb5, 0x8d, 0x97, 0x77, 0x76, 0xe3,
	0xf5, 0x9d, 0xdd, 0x78, 0x73, 0x67, 0x37, 0xfe, 0x68, 0xee, 0x9d, 0x24, 0x13, 0x12, 0x90, 0x8b,
	0x84, 0xfd, 0x42, 0x7d, 0x81, 0xcf, 0x19, 0x3e, 0xe1, 0xd1, 0xb0, 0xa3, 0x1c, 0x7d, 0xf1, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x2d, 0xfe, 0xc3, 0x12, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsageClient is the client API for Usage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsageClient interface {
	ReportUsage(ctx context.Context, in *ClusterUsageReport, opts ...grpc.CallOption) (*types.Empty, error)
}

type usageClient struct {
	cc *grpc.ClientConn
}

func NewUsageClient(cc *grpc.ClientConn) UsageClient {
	return &usageClient{cc}
}

func (c *usageClient) ReportUsage(ctx context.Context, in *ClusterUsageReport, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Usage/ReportUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServer is the server API for Usage service.
type UsageServer interface {
	ReportUsage(context.Context, *ClusterUsageReport) (*types.Empty, error)
}

// UnimplementedUsageServer can be embedded to have forward compatible implementations.
type UnimplementedUsageServer struct {
}

func (*UnimplementedUsageServer) ReportUsage(ctx context.Context, req *ClusterUsageReport) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUsage not implemented")
}

func RegisterUsageServer(s *grpc.Server, srv UsageServer) {
	s.RegisterService(&_Usage_serviceDesc, srv)
}

func _Usage_ReportUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUsageReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServer).ReportUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Usage/ReportUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServer).ReportUsage(ctx, req.(*ClusterUsageReport))
	}
	return interceptor(ctx, in, info, handler)
}

var _Usage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Usage",
	HandlerType: (*UsageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportUsage",
			Handler:    _Usage_ReportUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/usage.proto",
}

func (m *QueueReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountOfPodsByPhase) > 0 {
		for k := range m.CountOfPodsByPhase {
			v := m.CountOfPodsByPhase[k]
			baseI := i
			i = encodeVarintUsage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResourcesUsed) > 0 {
		for k := range m.ResourcesUsed {
			v := m.ResourcesUsed[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterUsageReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterUsageReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterUsageReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeTypeUsageReports) > 0 {
		for iNdEx := len(m.NodeTypeUsageReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeTypeUsageReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterAvailableCapacity) > 0 {
		for k := range m.ClusterAvailableCapacity {
			v := m.ClusterAvailableCapacity[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ClusterCapacity) > 0 {
		for k := range m.ClusterCapacity {
			v := m.ClusterCapacity[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReportTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReportTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintUsage(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeTypeIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeTypeIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeTypeIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Taints) > 0 {
		for iNdEx := len(m.Taints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Taints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeTypeUsageReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeTypeUsageReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeTypeUsageReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalNodes != 0 {
		i = encodeVarintUsage(dAtA, i, uint64(m.TotalNodes))
		i--
		dAtA[i] = 0x38
	}
	if m.SchedulableNodes != 0 {
		i = encodeVarintUsage(dAtA, i, uint64(m.SchedulableNodes))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CordonedUsage) > 0 {
		for k := range m.CordonedUsage {
			v := m.CordonedUsage[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AvailableCapacity) > 0 {
		for k := range m.AvailableCapacity {
			v := m.AvailableCapacity[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Capacity) > 0 {
		for k := range m.Capacity {
			v := m.Capacity[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUsage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NodeType != nil {
		{
			size, err := m.NodeType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if len(m.ResourcesUsed) > 0 {
		for k, v := range m.ResourcesUsed {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if len(m.CountOfPodsByPhase) > 0 {
		for k, v := range m.CountOfPodsByPhase {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + sovUsage(uint64(v))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClusterUsageReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReportTime)
	n += 1 + l + sovUsage(uint64(l))
	if len(m.Queues) > 0 {
		for _, e := range m.Queues {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	if len(m.ClusterCapacity) > 0 {
		for k, v := range m.ClusterCapacity {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if len(m.ClusterAvailableCapacity) > 0 {
		for k, v := range m.ClusterAvailableCapacity {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.NodeTypeUsageReports) > 0 {
		for _, e := range m.NodeTypeUsageReports {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func (m *NodeTypeIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Taints) > 0 {
		for _, e := range m.Taints {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func (m *NodeTypeUsageReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeType != nil {
		l = m.NodeType.Size()
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Capacity) > 0 {
		for k, v := range m.Capacity {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if len(m.AvailableCapacity) > 0 {
		for k, v := range m.AvailableCapacity {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if len(m.Queues) > 0 {
		for _, e := range m.Queues {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	if len(m.CordonedUsage) > 0 {
		for k, v := range m.CordonedUsage {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + l + sovUsage(uint64(l))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	if m.SchedulableNodes != 0 {
		n += 1 + sovUsage(uint64(m.SchedulableNodes))
	}
	if m.TotalNodes != 0 {
		n += 1 + sovUsage(uint64(m.TotalNodes))
	}
	return n
}

func sovUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueueReport) String() string {
	if this == nil {
		return "nil"
	}
	keysForResources := make([]string, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResources)
	mapStringForResources := "map[string]resource.Quantity{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%v: %v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	keysForResourcesUsed := make([]string, 0, len(this.ResourcesUsed))
	for k, _ := range this.ResourcesUsed {
		keysForResourcesUsed = append(keysForResourcesUsed, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResourcesUsed)
	mapStringForResourcesUsed := "map[string]resource.Quantity{"
	for _, k := range keysForResourcesUsed {
		mapStringForResourcesUsed += fmt.Sprintf("%v: %v,", k, this.ResourcesUsed[k])
	}
	mapStringForResourcesUsed += "}"
	keysForCountOfPodsByPhase := make([]string, 0, len(this.CountOfPodsByPhase))
	for k, _ := range this.CountOfPodsByPhase {
		keysForCountOfPodsByPhase = append(keysForCountOfPodsByPhase, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCountOfPodsByPhase)
	mapStringForCountOfPodsByPhase := "map[string]uint32{"
	for _, k := range keysForCountOfPodsByPhase {
		mapStringForCountOfPodsByPhase += fmt.Sprintf("%v: %v,", k, this.CountOfPodsByPhase[k])
	}
	mapStringForCountOfPodsByPhase += "}"
	s := strings.Join([]string{`&QueueReport{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Resources:` + mapStringForResources + `,`,
		`ResourcesUsed:` + mapStringForResourcesUsed + `,`,
		`CountOfPodsByPhase:` + mapStringForCountOfPodsByPhase + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterUsageReport) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueues := "[]*QueueReport{"
	for _, f := range this.Queues {
		repeatedStringForQueues += strings.Replace(f.String(), "QueueReport", "QueueReport", 1) + ","
	}
	repeatedStringForQueues += "}"
	repeatedStringForNodeTypeUsageReports := "[]NodeTypeUsageReport{"
	for _, f := range this.NodeTypeUsageReports {
		repeatedStringForNodeTypeUsageReports += strings.Replace(strings.Replace(f.String(), "NodeTypeUsageReport", "NodeTypeUsageReport", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodeTypeUsageReports += "}"
	keysForClusterCapacity := make([]string, 0, len(this.ClusterCapacity))
	for k, _ := range this.ClusterCapacity {
		keysForClusterCapacity = append(keysForClusterCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterCapacity)
	mapStringForClusterCapacity := "map[string]resource.Quantity{"
	for _, k := range keysForClusterCapacity {
		mapStringForClusterCapacity += fmt.Sprintf("%v: %v,", k, this.ClusterCapacity[k])
	}
	mapStringForClusterCapacity += "}"
	keysForClusterAvailableCapacity := make([]string, 0, len(this.ClusterAvailableCapacity))
	for k, _ := range this.ClusterAvailableCapacity {
		keysForClusterAvailableCapacity = append(keysForClusterAvailableCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterAvailableCapacity)
	mapStringForClusterAvailableCapacity := "map[string]resource.Quantity{"
	for _, k := range keysForClusterAvailableCapacity {
		mapStringForClusterAvailableCapacity += fmt.Sprintf("%v: %v,", k, this.ClusterAvailableCapacity[k])
	}
	mapStringForClusterAvailableCapacity += "}"
	s := strings.Join([]string{`&ClusterUsageReport{`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`ReportTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReportTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Queues:` + repeatedStringForQueues + `,`,
		`ClusterCapacity:` + mapStringForClusterCapacity + `,`,
		`ClusterAvailableCapacity:` + mapStringForClusterAvailableCapacity + `,`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`NodeTypeUsageReports:` + repeatedStringForNodeTypeUsageReports + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeTypeIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTaints := "[]Taint{"
	for _, f := range this.Taints {
		repeatedStringForTaints += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTaints += "}"
	s := strings.Join([]string{`&NodeTypeIdentifier{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Taints:` + repeatedStringForTaints + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeTypeUsageReport) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueues := "[]*QueueReport{"
	for _, f := range this.Queues {
		repeatedStringForQueues += strings.Replace(f.String(), "QueueReport", "QueueReport", 1) + ","
	}
	repeatedStringForQueues += "}"
	keysForCapacity := make([]string, 0, len(this.Capacity))
	for k, _ := range this.Capacity {
		keysForCapacity = append(keysForCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCapacity)
	mapStringForCapacity := "map[string]resource.Quantity{"
	for _, k := range keysForCapacity {
		mapStringForCapacity += fmt.Sprintf("%v: %v,", k, this.Capacity[k])
	}
	mapStringForCapacity += "}"
	keysForAvailableCapacity := make([]string, 0, len(this.AvailableCapacity))
	for k, _ := range this.AvailableCapacity {
		keysForAvailableCapacity = append(keysForAvailableCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAvailableCapacity)
	mapStringForAvailableCapacity := "map[string]resource.Quantity{"
	for _, k := range keysForAvailableCapacity {
		mapStringForAvailableCapacity += fmt.Sprintf("%v: %v,", k, this.AvailableCapacity[k])
	}
	mapStringForAvailableCapacity += "}"
	keysForCordonedUsage := make([]string, 0, len(this.CordonedUsage))
	for k, _ := range this.CordonedUsage {
		keysForCordonedUsage = append(keysForCordonedUsage, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCordonedUsage)
	mapStringForCordonedUsage := "map[string]resource.Quantity{"
	for _, k := range keysForCordonedUsage {
		mapStringForCordonedUsage += fmt.Sprintf("%v: %v,", k, this.CordonedUsage[k])
	}
	mapStringForCordonedUsage += "}"
	s := strings.Join([]string{`&NodeTypeUsageReport{`,
		`NodeType:` + strings.Replace(this.NodeType.String(), "NodeTypeIdentifier", "NodeTypeIdentifier", 1) + `,`,
		`Capacity:` + mapStringForCapacity + `,`,
		`AvailableCapacity:` + mapStringForAvailableCapacity + `,`,
		`Queues:` + repeatedStringForQueues + `,`,
		`CordonedUsage:` + mapStringForCordonedUsage + `,`,
		`SchedulableNodes:` + fmt.Sprintf("%v", this.SchedulableNodes) + `,`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueueReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourcesUsed == nil {
				m.ResourcesUsed = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourcesUsed[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountOfPodsByPhase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountOfPodsByPhase == nil {
				m.CountOfPodsByPhase = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CountOfPodsByPhase[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterUsageReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterUsageReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterUsageReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReportTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, &QueueReport{})
			if err := m.Queues[len(m.Queues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCapacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterCapacity == nil {
				m.ClusterCapacity = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterCapacity[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAvailableCapacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterAvailableCapacity == nil {
				m.ClusterAvailableCapacity = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterAvailableCapacity[mapkey] = *mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeUsageReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeTypeUsageReports = append(m.NodeTypeUsageReports, NodeTypeUsageReport{})
			if err := m.NodeTypeUsageReports[len(m.NodeTypeUsageReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeTypeIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeTypeIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeTypeIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taints = append(m.Taints, v1.Taint{})
			if err := m.Taints[len(m.Taints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeTypeUsageReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeTypeUsageReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeTypeUsageReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeType == nil {
				m.NodeType = &NodeTypeIdentifier{}
			}
			if err := m.NodeType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Capacity[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableCapacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableCapacity == nil {
				m.AvailableCapacity = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AvailableCapacity[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, &QueueReport{})
			if err := m.Queues[len(m.Queues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CordonedUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CordonedUsage == nil {
				m.CordonedUsage = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUsage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUsage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CordonedUsage[mapkey] = *mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulableNodes", wireType)
			}
			m.SchedulableNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulableNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			m.TotalNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsage = fmt.Errorf("proto: unexpected end of group")
)
