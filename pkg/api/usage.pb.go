// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/usage.proto

package api

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	v1 "k8s.io/api/core/v1"
	_ "k8s.io/apimachinery/pkg/api/resource"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeTypeIdentifier struct {
	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Taints []v1.Taint `protobuf:"bytes,2,rep,name=taints,proto3" json:"taints"`
}

func (m *NodeTypeIdentifier) Reset()      { *m = NodeTypeIdentifier{} }
func (*NodeTypeIdentifier) ProtoMessage() {}
func (*NodeTypeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_5643ccb387d55d48, []int{0}
}
func (m *NodeTypeIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeTypeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeTypeIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeTypeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTypeIdentifier.Merge(m, src)
}
func (m *NodeTypeIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *NodeTypeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTypeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTypeIdentifier proto.InternalMessageInfo

func (m *NodeTypeIdentifier) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeTypeIdentifier) GetTaints() []v1.Taint {
	if m != nil {
		return m.Taints
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeTypeIdentifier)(nil), "api.NodeTypeIdentifier")
}

func init() { proto.RegisterFile("pkg/api/usage.proto", fileDescriptor_5643ccb387d55d48) }

var fileDescriptor_5643ccb387d55d48 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0x93, 0x54, 0xaa, 0xf4, 0xcf, 0x1f, 0x21, 0x14, 0x18, 0x4a, 0x91, 0x9c, 0xaa, 0x0b,
	0x1d, 0xc0, 0x56, 0x81, 0x81, 0xb5, 0xdd, 0xba, 0x20, 0x54, 0x75, 0x62, 0xc2, 0x4d, 0xae, 0xee,
	0x51, 0x12, 0x5b, 0x8e, 0x53, 0x29, 0x1b, 0x8f, 0xc0, 0x73, 0xf0, 0x24, 0x1d, 0x3b, 0x76, 0xaa,
	0x20, 0xdd, 0xfa, 0x14, 0xa8, 0x49, 0xaa, 0x22, 0x98, 0xec, 0xef, 0xee, 0x77, 0xf6, 0xf7, 0x9d,
	0x7b, 0xaa, 0x66, 0x82, 0x71, 0x85, 0x2c, 0x4d, 0xb8, 0x00, 0xaa, 0xb4, 0x34, 0xd2, 0xab, 0x71,
	0x85, 0x4d, 0x5f, 0x48, 0x29, 0x5e, 0x81, 0x15, 0xa5, 0x71, 0x3a, 0x61, 0x06, 0x23, 0x48, 0x0c,
	0x8f, 0x54, 0x49, 0x35, 0x2f, 0x7e, 0x03, 0x10, 0x29, 0x93, 0x55, 0xcd, 0xf6, 0xec, 0x3e, 0xa1,
	0x28, 0x8b, 0xa7, 0x03, 0xa9, 0x81, 0xcd, 0xbb, 0x4c, 0x40, 0x0c, 0x9a, 0x1b, 0x08, 0x2b, 0xe6,
	0xee, 0xc0, 0x44, 0x3c, 0x98, 0x62, 0x0c, 0x3a, 0x63, 0x7b, 0x3f, 0x1a, 0x12, 0x99, 0xea, 0x00,
	0xfe, 0x4c, 0x5d, 0x0b, 0x34, 0xd3, 0x74, 0x4c, 0x03, 0x19, 0x31, 0x21, 0x85, 0x3c, 0xfc, 0xbf,
	0x53, 0x85, 0x28, 0x6e, 0x25, 0xde, 0xce, 0x5c, 0xef, 0x41, 0x86, 0x30, 0xca, 0x14, 0x0c, 0x42,
	0x88, 0x0d, 0x4e, 0x10, 0xb4, 0xd7, 0x72, 0x1d, 0x0c, 0x1b, 0x76, 0xcb, 0xee, 0xfc, 0xeb, 0x9f,
	0x6c, 0xd7, 0xfe, 0x11, 0x86, 0x57, 0x32, 0x42, 0x53, 0x44, 0x18, 0x3a, 0x18, 0x7a, 0x3d, 0xb7,
	0x6e, 0x38, 0xc6, 0x26, 0x69, 0x38, 0xad, 0x5a, 0xe7, 0xff, 0xcd, 0x39, 0x2d, 0xdd, 0x52, 0xae,
	0x90, 0xee, 0x12, 0xd1, 0x79, 0x97, 0x8e, 0x76, 0x44, 0xff, 0x78, 0xb1, 0xf6, 0xad, 0xed, 0xda,
	0xaf, 0x06, 0x86, 0xd5, 0xd9, 0x7f, 0x5e, 0x7d, 0x11, 0xeb, 0x2d, 0x27, 0xf6, 0x22, 0x27, 0xf6,
	0x32, 0x27, 0xf6, 0x67, 0x4e, 0xec, 0xf7, 0x0d, 0xb1, 0x96, 0x1b, 0x62, 0xad, 0x36, 0xc4, 0x7a,
	0xba, 0xfc, 0x91, 0x85, 0xeb, 0x88, 0x87, 0x5c, 0x69, 0xf9, 0x02, 0x81, 0xa9, 0xd4, 0x7e, 0x1b,
	0x1f, 0xce, 0x59, 0xaf, 0x28, 0x3c, 0x96, 0x6d, 0x3a, 0x90, 0xb4, 0xa7, 0x70, 0x5c, 0x2f, 0x32,
	0xde, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x0f, 0x8f, 0xe0, 0xc6, 0x01, 0x00, 0x00,
}

func (m *NodeTypeIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeTypeIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeTypeIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Taints) > 0 {
		for iNdEx := len(m.Taints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Taints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeTypeIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Taints) > 0 {
		for _, e := range m.Taints {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func sovUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeTypeIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTaints := "[]Taint{"
	for _, f := range this.Taints {
		repeatedStringForTaints += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTaints += "}"
	s := strings.Join([]string{`&NodeTypeIdentifier{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Taints:` + repeatedStringForTaints + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeTypeIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeTypeIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeTypeIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taints = append(m.Taints, v1.Taint{})
			if err := m.Taints[len(m.Taints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsage = fmt.Errorf("proto: unexpected end of group")
)
