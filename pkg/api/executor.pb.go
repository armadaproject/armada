// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/executor.proto

package api

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecutorSettingsUpsertRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cordoned     bool   `protobuf:"varint,2,opt,name=cordoned,proto3" json:"cordoned,omitempty"`
	CordonReason string `protobuf:"bytes,3,opt,name=cordonReason,proto3" json:"cordonReason,omitempty"`
}

func (m *ExecutorSettingsUpsertRequest) Reset()         { *m = ExecutorSettingsUpsertRequest{} }
func (m *ExecutorSettingsUpsertRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsUpsertRequest) ProtoMessage()    {}
func (*ExecutorSettingsUpsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{0}
}
func (m *ExecutorSettingsUpsertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsUpsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsUpsertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsUpsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsUpsertRequest.Merge(m, src)
}
func (m *ExecutorSettingsUpsertRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsUpsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsUpsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsUpsertRequest proto.InternalMessageInfo

func (m *ExecutorSettingsUpsertRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorSettingsUpsertRequest) GetCordoned() bool {
	if m != nil {
		return m.Cordoned
	}
	return false
}

func (m *ExecutorSettingsUpsertRequest) GetCordonReason() string {
	if m != nil {
		return m.CordonReason
	}
	return ""
}

type ExecutorSettingsDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ExecutorSettingsDeleteRequest) Reset()         { *m = ExecutorSettingsDeleteRequest{} }
func (m *ExecutorSettingsDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutorSettingsDeleteRequest) ProtoMessage()    {}
func (*ExecutorSettingsDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{1}
}
func (m *ExecutorSettingsDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorSettingsDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorSettingsDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorSettingsDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorSettingsDeleteRequest.Merge(m, src)
}
func (m *ExecutorSettingsDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorSettingsDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorSettingsDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorSettingsDeleteRequest proto.InternalMessageInfo

func (m *ExecutorSettingsDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ExecutorPreemptRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// We select jobs to preempt on the executor based on the provided Select message
	//
	// Types that are valid to be assigned to Select:
	//	*ExecutorPreemptRequest_PriorityClasses
	//	*ExecutorPreemptRequest_Queues
	Select isExecutorPreemptRequest_Select `protobuf_oneof:"Select"`
}

func (m *ExecutorPreemptRequest) Reset()         { *m = ExecutorPreemptRequest{} }
func (m *ExecutorPreemptRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutorPreemptRequest) ProtoMessage()    {}
func (*ExecutorPreemptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{2}
}
func (m *ExecutorPreemptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorPreemptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorPreemptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorPreemptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorPreemptRequest.Merge(m, src)
}
func (m *ExecutorPreemptRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorPreemptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorPreemptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorPreemptRequest proto.InternalMessageInfo

type isExecutorPreemptRequest_Select interface {
	isExecutorPreemptRequest_Select()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutorPreemptRequest_PriorityClasses struct {
	PriorityClasses *ByPriorityClass `protobuf:"bytes,2,opt,name=priorityClasses,proto3,oneof" json:"priorityClasses,omitempty"`
}
type ExecutorPreemptRequest_Queues struct {
	Queues *ByPriorityQueue `protobuf:"bytes,3,opt,name=queues,proto3,oneof" json:"queues,omitempty"`
}

func (*ExecutorPreemptRequest_PriorityClasses) isExecutorPreemptRequest_Select() {}
func (*ExecutorPreemptRequest_Queues) isExecutorPreemptRequest_Select()          {}

func (m *ExecutorPreemptRequest) GetSelect() isExecutorPreemptRequest_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *ExecutorPreemptRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorPreemptRequest) GetPriorityClasses() *ByPriorityClass {
	if x, ok := m.GetSelect().(*ExecutorPreemptRequest_PriorityClasses); ok {
		return x.PriorityClasses
	}
	return nil
}

func (m *ExecutorPreemptRequest) GetQueues() *ByPriorityQueue {
	if x, ok := m.GetSelect().(*ExecutorPreemptRequest_Queues); ok {
		return x.Queues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecutorPreemptRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecutorPreemptRequest_PriorityClasses)(nil),
		(*ExecutorPreemptRequest_Queues)(nil),
	}
}

type ExecutorCancelRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// We select jobs on the executor to cancel based on the provided Select message
	//
	// Types that are valid to be assigned to Select:
	//	*ExecutorCancelRequest_PriorityClasses
	//	*ExecutorCancelRequest_Queues
	Select isExecutorCancelRequest_Select `protobuf_oneof:"Select"`
}

func (m *ExecutorCancelRequest) Reset()         { *m = ExecutorCancelRequest{} }
func (m *ExecutorCancelRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutorCancelRequest) ProtoMessage()    {}
func (*ExecutorCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{3}
}
func (m *ExecutorCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorCancelRequest.Merge(m, src)
}
func (m *ExecutorCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorCancelRequest proto.InternalMessageInfo

type isExecutorCancelRequest_Select interface {
	isExecutorCancelRequest_Select()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutorCancelRequest_PriorityClasses struct {
	PriorityClasses *ByPriorityClass `protobuf:"bytes,2,opt,name=priorityClasses,proto3,oneof" json:"priorityClasses,omitempty"`
}
type ExecutorCancelRequest_Queues struct {
	Queues *ByPriorityQueue `protobuf:"bytes,3,opt,name=queues,proto3,oneof" json:"queues,omitempty"`
}

func (*ExecutorCancelRequest_PriorityClasses) isExecutorCancelRequest_Select() {}
func (*ExecutorCancelRequest_Queues) isExecutorCancelRequest_Select()          {}

func (m *ExecutorCancelRequest) GetSelect() isExecutorCancelRequest_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *ExecutorCancelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecutorCancelRequest) GetPriorityClasses() *ByPriorityClass {
	if x, ok := m.GetSelect().(*ExecutorCancelRequest_PriorityClasses); ok {
		return x.PriorityClasses
	}
	return nil
}

func (m *ExecutorCancelRequest) GetQueues() *ByPriorityQueue {
	if x, ok := m.GetSelect().(*ExecutorCancelRequest_Queues); ok {
		return x.Queues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecutorCancelRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecutorCancelRequest_PriorityClasses)(nil),
		(*ExecutorCancelRequest_Queues)(nil),
	}
}

type ByPriorityClass struct {
	PriorityClasses []string `protobuf:"bytes,1,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
}

func (m *ByPriorityClass) Reset()         { *m = ByPriorityClass{} }
func (m *ByPriorityClass) String() string { return proto.CompactTextString(m) }
func (*ByPriorityClass) ProtoMessage()    {}
func (*ByPriorityClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{4}
}
func (m *ByPriorityClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByPriorityClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByPriorityClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByPriorityClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByPriorityClass.Merge(m, src)
}
func (m *ByPriorityClass) XXX_Size() int {
	return m.Size()
}
func (m *ByPriorityClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ByPriorityClass.DiscardUnknown(m)
}

var xxx_messageInfo_ByPriorityClass proto.InternalMessageInfo

func (m *ByPriorityClass) GetPriorityClasses() []string {
	if m != nil {
		return m.PriorityClasses
	}
	return nil
}

type ByPriorityQueue struct {
	Queues []string `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (m *ByPriorityQueue) Reset()         { *m = ByPriorityQueue{} }
func (m *ByPriorityQueue) String() string { return proto.CompactTextString(m) }
func (*ByPriorityQueue) ProtoMessage()    {}
func (*ByPriorityQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_506cd9cd149291ea, []int{5}
}
func (m *ByPriorityQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByPriorityQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByPriorityQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByPriorityQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByPriorityQueue.Merge(m, src)
}
func (m *ByPriorityQueue) XXX_Size() int {
	return m.Size()
}
func (m *ByPriorityQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ByPriorityQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ByPriorityQueue proto.InternalMessageInfo

func (m *ByPriorityQueue) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutorSettingsUpsertRequest)(nil), "api.ExecutorSettingsUpsertRequest")
	proto.RegisterType((*ExecutorSettingsDeleteRequest)(nil), "api.ExecutorSettingsDeleteRequest")
	proto.RegisterType((*ExecutorPreemptRequest)(nil), "api.ExecutorPreemptRequest")
	proto.RegisterType((*ExecutorCancelRequest)(nil), "api.ExecutorCancelRequest")
	proto.RegisterType((*ByPriorityClass)(nil), "api.ByPriorityClass")
	proto.RegisterType((*ByPriorityQueue)(nil), "api.ByPriorityQueue")
}

func init() { proto.RegisterFile("pkg/api/executor.proto", fileDescriptor_506cd9cd149291ea) }

var fileDescriptor_506cd9cd149291ea = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0x33, 0xcd, 0xaf, 0x28, 0x9d, 0x1f, 0xd1, 0x32, 0x2a, 0x56, 0x70, 0x5a, 0x3b, 0x58,
	0xa2, 0x8d, 0xaa, 0xca, 0x16, 0x61, 0xc7, 0x02, 0x84, 0xdb, 0xaa, 0xec, 0x28, 0xa9, 0xd8, 0x74,
	0x53, 0x4d, 0x9c, 0x4b, 0x30, 0xc4, 0x9e, 0xa9, 0x3d, 0x46, 0x44, 0xa8, 0x1b, 0x9e, 0x00, 0x89,
	0xc7, 0xe1, 0x05, 0x58, 0x56, 0x62, 0xc3, 0x2a, 0x42, 0x09, 0x1b, 0xb2, 0x82, 0x37, 0x40, 0x1e,
	0xdb, 0xa9, 0x9d, 0x50, 0x42, 0xb7, 0xec, 0x32, 0xbe, 0xf7, 0x9e, 0xef, 0xcc, 0x75, 0x4e, 0x82,
	0x15, 0xfe, 0xaa, 0x67, 0x51, 0xee, 0x5a, 0xf0, 0x06, 0x9c, 0x48, 0xb0, 0xc0, 0xe4, 0x01, 0x13,
	0x8c, 0x94, 0x29, 0x77, 0xd5, 0xf5, 0x1e, 0x63, 0xbd, 0x3e, 0xc8, 0x3a, 0xf5, 0x7d, 0x26, 0xa8,
	0x70, 0x99, 0x1f, 0x26, 0x2d, 0x6a, 0x3d, 0xad, 0xca, 0x53, 0x27, 0x7a, 0x6e, 0x81, 0xc7, 0xc5,
	0x20, 0x29, 0x1a, 0x1f, 0x11, 0xde, 0xd8, 0x4f, 0x25, 0x8f, 0x40, 0x08, 0xd7, 0xef, 0x85, 0xcf,
	0x78, 0x08, 0x81, 0x68, 0xc3, 0x69, 0x04, 0xa1, 0x20, 0x9b, 0xf8, 0x3f, 0x9f, 0x7a, 0x50, 0x43,
	0x0d, 0xd4, 0x5c, 0xb6, 0xc9, 0x64, 0xa8, 0x5f, 0x8f, 0xcf, 0x3b, 0xcc, 0x73, 0x85, 0x54, 0x6a,
	0xcb, 0x3a, 0x69, 0xe1, 0xaa, 0xc3, 0x82, 0x2e, 0xf3, 0xa1, 0x5b, 0x5b, 0x6a, 0xa0, 0x66, 0xd5,
	0x56, 0x26, 0x43, 0x9d, 0x64, 0xcf, 0x72, 0xfd, 0xd3, 0x3e, 0xf2, 0x00, 0x5f, 0x4b, 0x3e, 0xb7,
	0x81, 0x86, 0xcc, 0xaf, 0x95, 0x25, 0x43, 0x9d, 0x0c, 0x75, 0x25, 0xff, 0x3c, 0x37, 0x5b, 0xe8,
	0x37, 0x0e, 0xe6, 0xcd, 0xef, 0x41, 0x1f, 0x04, 0x5c, 0xd1, 0xbc, 0xf1, 0x13, 0x61, 0x25, 0x53,
	0x3a, 0x0c, 0x20, 0x2e, 0x5d, 0xf5, 0xfe, 0x27, 0x78, 0x85, 0x07, 0x2e, 0x0b, 0x5c, 0x31, 0xd8,
	0xed, 0xd3, 0x30, 0x84, 0x50, 0xae, 0xe1, 0xff, 0xd6, 0x9a, 0x49, 0xb9, 0x6b, 0xda, 0x83, 0xc3,
	0x7c, 0xd5, 0xde, 0x98, 0x0c, 0xf5, 0x5b, 0x33, 0x03, 0x17, 0x9a, 0x8f, 0x4b, 0xed, 0x59, 0x35,
	0xb2, 0x87, 0x2b, 0xa7, 0x11, 0x44, 0x10, 0xca, 0x35, 0xcd, 0xeb, 0x3e, 0x8d, 0x8b, 0xf6, 0xda,
	0x64, 0xa8, 0xaf, 0x26, 0x7d, 0x05, 0xb9, 0x74, 0xd6, 0xae, 0xe2, 0xca, 0x11, 0xf4, 0xc1, 0x11,
	0xc6, 0x0f, 0x84, 0x6f, 0x66, 0x77, 0xde, 0xa5, 0xbe, 0x03, 0xfd, 0x7f, 0xfe, 0xca, 0xc7, 0x78,
	0x65, 0xc6, 0x14, 0x39, 0x98, 0xbf, 0x03, 0x6a, 0x94, 0x9b, 0xcb, 0x0b, 0xdc, 0xce, 0x79, 0x35,
	0x1e, 0xe6, 0xb5, 0xa5, 0x31, 0xb2, 0x33, 0xb5, 0x9f, 0x48, 0xfe, 0xd6, 0x68, 0x66, 0xb3, 0xf5,
	0xbd, 0x8c, 0xab, 0xd9, 0xfb, 0x20, 0x67, 0x58, 0x49, 0x62, 0x38, 0xfb, 0xfd, 0x26, 0x86, 0xdc,
	0xc1, 0x1f, 0x33, 0xab, 0x2a, 0x66, 0x92, 0x79, 0x33, 0xcb, 0xbc, 0xb9, 0x1f, 0xa3, 0x8c, 0xad,
	0x77, 0x9f, 0xbf, 0x7d, 0x58, 0xba, 0xad, 0xae, 0x5b, 0xaf, 0xef, 0x4e, 0x7f, 0x49, 0x4e, 0xc2,
	0x54, 0xc3, 0x7a, 0x1b, 0xbf, 0xd5, 0xb3, 0xfb, 0x68, 0x3b, 0xc6, 0x27, 0x41, 0xfa, 0x4b, 0x7c,
	0x21, 0x75, 0x8b, 0xf0, 0xdb, 0x0b, 0xf1, 0x1c, 0xdf, 0x48, 0x53, 0xf8, 0xc4, 0x9f, 0xae, 0xa4,
	0x5e, 0x20, 0x17, 0x53, 0x7a, 0x29, 0x72, 0x53, 0x22, 0x1b, 0x46, 0x3d, 0x8f, 0xb4, 0x78, 0x32,
	0x9c, 0x23, 0x7a, 0x78, 0x35, 0xc9, 0x40, 0x0e, 0xa8, 0x16, 0x80, 0x85, 0x88, 0x5c, 0xca, 0xbb,
	0x23, 0x79, 0xba, 0xa1, 0x16, 0x78, 0x8e, 0x9c, 0xbd, 0xc0, 0xd9, 0x8f, 0x3e, 0x8d, 0x34, 0x74,
	0x3e, 0xd2, 0xd0, 0xd7, 0x91, 0x86, 0xde, 0x8f, 0xb5, 0xd2, 0xf9, 0x58, 0x2b, 0x7d, 0x19, 0x6b,
	0xa5, 0xe3, 0xad, 0x9e, 0x2b, 0x5e, 0x44, 0x1d, 0xd3, 0x61, 0x9e, 0x45, 0x03, 0x8f, 0x76, 0x29,
	0x0f, 0xd8, 0x4b, 0x70, 0x44, 0x7a, 0xb2, 0xd2, 0x3f, 0x82, 0x4e, 0x45, 0x92, 0xef, 0xfd, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xdc, 0x20, 0xee, 0x2f, 0x1a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	UpsertExecutorSettings(ctx context.Context, in *ExecutorSettingsUpsertRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteExecutorSettings(ctx context.Context, in *ExecutorSettingsDeleteRequest, opts ...grpc.CallOption) (*types.Empty, error)
	PreemptOnExecutor(ctx context.Context, in *ExecutorPreemptRequest, opts ...grpc.CallOption) (*types.Empty, error)
	CancelOnExecutor(ctx context.Context, in *ExecutorCancelRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) UpsertExecutorSettings(ctx context.Context, in *ExecutorSettingsUpsertRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Executor/UpsertExecutorSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteExecutorSettings(ctx context.Context, in *ExecutorSettingsDeleteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Executor/DeleteExecutorSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) PreemptOnExecutor(ctx context.Context, in *ExecutorPreemptRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Executor/PreemptOnExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CancelOnExecutor(ctx context.Context, in *ExecutorCancelRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Executor/CancelOnExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	UpsertExecutorSettings(context.Context, *ExecutorSettingsUpsertRequest) (*types.Empty, error)
	DeleteExecutorSettings(context.Context, *ExecutorSettingsDeleteRequest) (*types.Empty, error)
	PreemptOnExecutor(context.Context, *ExecutorPreemptRequest) (*types.Empty, error)
	CancelOnExecutor(context.Context, *ExecutorCancelRequest) (*types.Empty, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) UpsertExecutorSettings(ctx context.Context, req *ExecutorSettingsUpsertRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertExecutorSettings not implemented")
}
func (*UnimplementedExecutorServer) DeleteExecutorSettings(ctx context.Context, req *ExecutorSettingsDeleteRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExecutorSettings not implemented")
}
func (*UnimplementedExecutorServer) PreemptOnExecutor(ctx context.Context, req *ExecutorPreemptRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreemptOnExecutor not implemented")
}
func (*UnimplementedExecutorServer) CancelOnExecutor(ctx context.Context, req *ExecutorCancelRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOnExecutor not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_UpsertExecutorSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutorSettingsUpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).UpsertExecutorSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Executor/UpsertExecutorSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).UpsertExecutorSettings(ctx, req.(*ExecutorSettingsUpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteExecutorSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutorSettingsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteExecutorSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Executor/DeleteExecutorSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteExecutorSettings(ctx, req.(*ExecutorSettingsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_PreemptOnExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutorPreemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).PreemptOnExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Executor/PreemptOnExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).PreemptOnExecutor(ctx, req.(*ExecutorPreemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CancelOnExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutorCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CancelOnExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Executor/CancelOnExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CancelOnExecutor(ctx, req.(*ExecutorCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertExecutorSettings",
			Handler:    _Executor_UpsertExecutorSettings_Handler,
		},
		{
			MethodName: "DeleteExecutorSettings",
			Handler:    _Executor_DeleteExecutorSettings_Handler,
		},
		{
			MethodName: "PreemptOnExecutor",
			Handler:    _Executor_PreemptOnExecutor_Handler,
		},
		{
			MethodName: "CancelOnExecutor",
			Handler:    _Executor_CancelOnExecutor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/executor.proto",
}

func (m *ExecutorSettingsUpsertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsUpsertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsUpsertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CordonReason) > 0 {
		i -= len(m.CordonReason)
		copy(dAtA[i:], m.CordonReason)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.CordonReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cordoned {
		i--
		if m.Cordoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorSettingsDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorSettingsDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorSettingsDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorPreemptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorPreemptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorPreemptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Select != nil {
		{
			size := m.Select.Size()
			i -= size
			if _, err := m.Select.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorPreemptRequest_PriorityClasses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorPreemptRequest_PriorityClasses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PriorityClasses != nil {
		{
			size, err := m.PriorityClasses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ExecutorPreemptRequest_Queues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorPreemptRequest_Queues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Queues != nil {
		{
			size, err := m.Queues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ExecutorCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Select != nil {
		{
			size := m.Select.Size()
			i -= size
			if _, err := m.Select.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorCancelRequest_PriorityClasses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorCancelRequest_PriorityClasses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PriorityClasses != nil {
		{
			size, err := m.PriorityClasses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ExecutorCancelRequest_Queues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorCancelRequest_Queues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Queues != nil {
		{
			size, err := m.Queues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ByPriorityClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByPriorityClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByPriorityClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for iNdEx := len(m.PriorityClasses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PriorityClasses[iNdEx])
			copy(dAtA[i:], m.PriorityClasses[iNdEx])
			i = encodeVarintExecutor(dAtA, i, uint64(len(m.PriorityClasses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ByPriorityQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByPriorityQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByPriorityQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Queues[iNdEx])
			copy(dAtA[i:], m.Queues[iNdEx])
			i = encodeVarintExecutor(dAtA, i, uint64(len(m.Queues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutor(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutorSettingsUpsertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Cordoned {
		n += 2
	}
	l = len(m.CordonReason)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func (m *ExecutorSettingsDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func (m *ExecutorPreemptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Select != nil {
		n += m.Select.Size()
	}
	return n
}

func (m *ExecutorPreemptRequest_PriorityClasses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriorityClasses != nil {
		l = m.PriorityClasses.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *ExecutorPreemptRequest_Queues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queues != nil {
		l = m.Queues.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *ExecutorCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Select != nil {
		n += m.Select.Size()
	}
	return n
}

func (m *ExecutorCancelRequest_PriorityClasses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriorityClasses != nil {
		l = m.PriorityClasses.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *ExecutorCancelRequest_Queues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queues != nil {
		l = m.Queues.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *ByPriorityClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriorityClasses) > 0 {
		for _, s := range m.PriorityClasses {
			l = len(s)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	return n
}

func (m *ByPriorityQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, s := range m.Queues {
			l = len(s)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	return n
}

func sovExecutor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutor(x uint64) (n int) {
	return sovExecutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutorSettingsUpsertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsUpsertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsUpsertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cordoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cordoned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CordonReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CordonReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorSettingsDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorSettingsDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorSettingsDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorPreemptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorPreemptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorPreemptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &ExecutorPreemptRequest_PriorityClasses{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &ExecutorPreemptRequest_Queues{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &ExecutorCancelRequest_PriorityClasses{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ByPriorityQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Select = &ExecutorCancelRequest_Queues{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByPriorityClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByPriorityClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByPriorityClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityClasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriorityClasses = append(m.PriorityClasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByPriorityQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByPriorityQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByPriorityQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutor = fmt.Errorf("proto: unexpected end of group")
)
