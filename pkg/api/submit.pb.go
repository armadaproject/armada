// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pkg/api/submit.proto

package api

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/api/networking/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ingress type is being kept here to maintain backwards compatibility for a while.
type IngressType int32

const (
	IngressType_Ingress IngressType = 0
)

// Enum value maps for IngressType.
var (
	IngressType_name = map[int32]string{
		0: "Ingress",
	}
	IngressType_value = map[string]int32{
		"Ingress": 0,
	}
)

func (x IngressType) Enum() *IngressType {
	p := new(IngressType)
	*p = x
	return p
}

func (x IngressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngressType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_submit_proto_enumTypes[0].Descriptor()
}

func (IngressType) Type() protoreflect.EnumType {
	return &file_pkg_api_submit_proto_enumTypes[0]
}

func (x IngressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngressType.Descriptor instead.
func (IngressType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{0}
}

type ServiceType int32

const (
	ServiceType_NodePort ServiceType = 0
	ServiceType_Headless ServiceType = 1
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "NodePort",
		1: "Headless",
	}
	ServiceType_value = map[string]int32{
		"NodePort": 0,
		"Headless": 1,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_submit_proto_enumTypes[1].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_pkg_api_submit_proto_enumTypes[1]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{1}
}

// swagger:model
type JobState int32

const (
	JobState_QUEUED    JobState = 0
	JobState_PENDING   JobState = 1
	JobState_RUNNING   JobState = 2
	JobState_SUCCEEDED JobState = 3
	JobState_FAILED    JobState = 4
	JobState_UNKNOWN   JobState = 5
	JobState_SUBMITTED JobState = 6
	JobState_LEASED    JobState = 7
	JobState_PREEMPTED JobState = 8
	JobState_CANCELLED JobState = 9
	JobState_REJECTED  JobState = 10
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0:  "QUEUED",
		1:  "PENDING",
		2:  "RUNNING",
		3:  "SUCCEEDED",
		4:  "FAILED",
		5:  "UNKNOWN",
		6:  "SUBMITTED",
		7:  "LEASED",
		8:  "PREEMPTED",
		9:  "CANCELLED",
		10: "REJECTED",
	}
	JobState_value = map[string]int32{
		"QUEUED":    0,
		"PENDING":   1,
		"RUNNING":   2,
		"SUCCEEDED": 3,
		"FAILED":    4,
		"UNKNOWN":   5,
		"SUBMITTED": 6,
		"LEASED":    7,
		"PREEMPTED": 8,
		"CANCELLED": 9,
		"REJECTED":  10,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_submit_proto_enumTypes[2].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_pkg_api_submit_proto_enumTypes[2]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{2}
}

type JobSubmitRequestItem struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Priority    float64                `protobuf:"fixed64,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Namespace   string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClientId    string                 `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Labels      map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string      `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	RequiredNodeLabels map[string]string `protobuf:"bytes,6,rep,name=required_node_labels,json=requiredNodeLabels,proto3" json:"required_node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Use PodSpec.NodeSelector instead
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	PodSpec  *v1.PodSpec      `protobuf:"bytes,2,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"` // Use PodSpecs instead
	PodSpecs []*v1.PodSpec    `protobuf:"bytes,7,rep,name=pod_specs,json=podSpecs,proto3" json:"pod_specs,omitempty"`
	Ingress  []*IngressConfig `protobuf:"bytes,9,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Services []*ServiceConfig `protobuf:"bytes,10,rep,name=services,proto3" json:"services,omitempty"`
	// Indicates which scheduler should manage this job.
	// If empty, the default scheduler is used.
	Scheduler     string `protobuf:"bytes,11,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSubmitRequestItem) Reset() {
	*x = JobSubmitRequestItem{}
	mi := &file_pkg_api_submit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSubmitRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSubmitRequestItem) ProtoMessage() {}

func (x *JobSubmitRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSubmitRequestItem.ProtoReflect.Descriptor instead.
func (*JobSubmitRequestItem) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{0}
}

func (x *JobSubmitRequestItem) GetPriority() float64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JobSubmitRequestItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *JobSubmitRequestItem) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *JobSubmitRequestItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *JobSubmitRequestItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *JobSubmitRequestItem) GetRequiredNodeLabels() map[string]string {
	if x != nil {
		return x.RequiredNodeLabels
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *JobSubmitRequestItem) GetPodSpec() *v1.PodSpec {
	if x != nil {
		return x.PodSpec
	}
	return nil
}

func (x *JobSubmitRequestItem) GetPodSpecs() []*v1.PodSpec {
	if x != nil {
		return x.PodSpecs
	}
	return nil
}

func (x *JobSubmitRequestItem) GetIngress() []*IngressConfig {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *JobSubmitRequestItem) GetServices() []*ServiceConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *JobSubmitRequestItem) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

type IngressConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	Type          IngressType       `protobuf:"varint,1,opt,name=type,proto3,enum=api.IngressType" json:"type,omitempty"`
	Ports         []uint32          `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	Annotations   map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TlsEnabled    bool              `protobuf:"varint,4,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	CertName      string            `protobuf:"bytes,5,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	UseClusterIP  bool              `protobuf:"varint,6,opt,name=use_clusterIP,json=useClusterIP,proto3" json:"use_clusterIP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressConfig) Reset() {
	*x = IngressConfig{}
	mi := &file_pkg_api_submit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressConfig) ProtoMessage() {}

func (x *IngressConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressConfig.ProtoReflect.Descriptor instead.
func (*IngressConfig) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *IngressConfig) GetType() IngressType {
	if x != nil {
		return x.Type
	}
	return IngressType_Ingress
}

func (x *IngressConfig) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *IngressConfig) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *IngressConfig) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

func (x *IngressConfig) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *IngressConfig) GetUseClusterIP() bool {
	if x != nil {
		return x.UseClusterIP
	}
	return false
}

type ServiceConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ServiceType            `protobuf:"varint,1,opt,name=type,proto3,enum=api.ServiceType" json:"type,omitempty"`
	Ports         []uint32               `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // The name of the service resource that is created. If empty a name will be generated based on the job ID.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_pkg_api_submit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceConfig) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_NodePort
}

func (x *ServiceConfig) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServiceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// swagger:model
type JobSubmitRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Queue           string                  `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobSetId        string                  `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	JobRequestItems []*JobSubmitRequestItem `protobuf:"bytes,3,rep,name=job_request_items,json=jobRequestItems,proto3" json:"job_request_items,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JobSubmitRequest) Reset() {
	*x = JobSubmitRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSubmitRequest) ProtoMessage() {}

func (x *JobSubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSubmitRequest.ProtoReflect.Descriptor instead.
func (*JobSubmitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{3}
}

func (x *JobSubmitRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobSubmitRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobSubmitRequest) GetJobRequestItems() []*JobSubmitRequestItem {
	if x != nil {
		return x.JobRequestItems
	}
	return nil
}

// swagger:model
type JobPreemptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	JobIds        []string               `protobuf:"bytes,3,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobPreemptRequest) Reset() {
	*x = JobPreemptRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobPreemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPreemptRequest) ProtoMessage() {}

func (x *JobPreemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPreemptRequest.ProtoReflect.Descriptor instead.
func (*JobPreemptRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{4}
}

func (x *JobPreemptRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobPreemptRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobPreemptRequest) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *JobPreemptRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// swagger:model
type JobCancelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	JobIds        []string               `protobuf:"bytes,4,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	Reason        string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobCancelRequest) Reset() {
	*x = JobCancelRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCancelRequest) ProtoMessage() {}

func (x *JobCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCancelRequest.ProtoReflect.Descriptor instead.
func (*JobCancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{5}
}

func (x *JobCancelRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobCancelRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobCancelRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobCancelRequest) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *JobCancelRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// swagger:model
type JobSetCancelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobSetId      string                 `protobuf:"bytes,1,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Filter        *JobSetFilter          `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSetCancelRequest) Reset() {
	*x = JobSetCancelRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetCancelRequest) ProtoMessage() {}

func (x *JobSetCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetCancelRequest.ProtoReflect.Descriptor instead.
func (*JobSetCancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{6}
}

func (x *JobSetCancelRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobSetCancelRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobSetCancelRequest) GetFilter() *JobSetFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *JobSetCancelRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// swagger:model
type JobSetFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	States        []JobState             `protobuf:"varint,1,rep,packed,name=states,proto3,enum=api.JobState" json:"states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSetFilter) Reset() {
	*x = JobSetFilter{}
	mi := &file_pkg_api_submit_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetFilter) ProtoMessage() {}

func (x *JobSetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetFilter.ProtoReflect.Descriptor instead.
func (*JobSetFilter) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{7}
}

func (x *JobSetFilter) GetStates() []JobState {
	if x != nil {
		return x.States
	}
	return nil
}

type Job struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId    string                 `protobuf:"bytes,13,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	JobSetId    string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue       string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Namespace   string                 `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels      map[string]string      `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string      `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	RequiredNodeLabels                 map[string]string `protobuf:"bytes,11,rep,name=required_node_labels,json=requiredNodeLabels,proto3" json:"required_node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Owner                              string            `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	QueueOwnershipUserGroups           []string          `protobuf:"bytes,15,rep,name=queue_ownership_user_groups,json=queueOwnershipUserGroups,proto3" json:"queue_ownership_user_groups,omitempty"`
	CompressedQueueOwnershipUserGroups []byte            `protobuf:"bytes,19,opt,name=compressed_queue_ownership_user_groups,json=compressedQueueOwnershipUserGroups,proto3" json:"compressed_queue_ownership_user_groups,omitempty"`
	Priority                           float64           `protobuf:"fixed64,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	PodSpec  *v1.PodSpec   `protobuf:"bytes,5,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"` // Use PodSpecs instead
	PodSpecs []*v1.PodSpec `protobuf:"bytes,12,rep,name=pod_specs,json=podSpecs,proto3" json:"pod_specs,omitempty"`
	// Resource requests and limits necessary for scheduling the main pod of this job.
	// The requests and limits herein are set to:
	//
	// max(
	//
	//	sum across all containers,
	//	max over all init containers,
	//
	// )
	//
	// This is because containers run in parallel, whereas initContainers run serially.
	// This field is populated automatically at submission.
	// Submitting a job with this field already populated results in an error.
	SchedulingResourceRequirements *v1.ResourceRequirements `protobuf:"bytes,21,opt,name=scheduling_resource_requirements,json=schedulingResourceRequirements,proto3" json:"scheduling_resource_requirements,omitempty"`
	Created                        *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// Services can be provided either as Armada-specific config objects or as proper k8s objects.
	// These options are exclusive, i.e., if either ingress or services is provided,
	// then neither of k8s_ingress or k8s_service can be provided, and vice versa.
	Ingress    []*IngressConfig `protobuf:"bytes,14,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Services   []*ServiceConfig `protobuf:"bytes,16,rep,name=services,proto3" json:"services,omitempty"`
	K8SIngress []*v11.Ingress   `protobuf:"bytes,17,rep,name=k8s_ingress,json=k8sIngress,proto3" json:"k8s_ingress,omitempty"`
	K8SService []*v1.Service    `protobuf:"bytes,18,rep,name=k8s_service,json=k8sService,proto3" json:"k8s_service,omitempty"`
	// Indicates which scheduler should manage this job.
	// If empty, the default scheduler is used.
	Scheduler     string `protobuf:"bytes,20,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_pkg_api_submit_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{8}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Job) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *Job) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Job) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Job) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Job) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *Job) GetRequiredNodeLabels() map[string]string {
	if x != nil {
		return x.RequiredNodeLabels
	}
	return nil
}

func (x *Job) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Job) GetQueueOwnershipUserGroups() []string {
	if x != nil {
		return x.QueueOwnershipUserGroups
	}
	return nil
}

func (x *Job) GetCompressedQueueOwnershipUserGroups() []byte {
	if x != nil {
		return x.CompressedQueueOwnershipUserGroups
	}
	return nil
}

func (x *Job) GetPriority() float64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *Job) GetPodSpec() *v1.PodSpec {
	if x != nil {
		return x.PodSpec
	}
	return nil
}

func (x *Job) GetPodSpecs() []*v1.PodSpec {
	if x != nil {
		return x.PodSpecs
	}
	return nil
}

func (x *Job) GetSchedulingResourceRequirements() *v1.ResourceRequirements {
	if x != nil {
		return x.SchedulingResourceRequirements
	}
	return nil
}

func (x *Job) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Job) GetIngress() []*IngressConfig {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *Job) GetServices() []*ServiceConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Job) GetK8SIngress() []*v11.Ingress {
	if x != nil {
		return x.K8SIngress
	}
	return nil
}

func (x *Job) GetK8SService() []*v1.Service {
	if x != nil {
		return x.K8SService
	}
	return nil
}

func (x *Job) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

// swagger:model
type JobReprioritizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobIds        []string               `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	NewPriority   float64                `protobuf:"fixed64,4,opt,name=new_priority,json=newPriority,proto3" json:"new_priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobReprioritizeRequest) Reset() {
	*x = JobReprioritizeRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobReprioritizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReprioritizeRequest) ProtoMessage() {}

func (x *JobReprioritizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReprioritizeRequest.ProtoReflect.Descriptor instead.
func (*JobReprioritizeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{9}
}

func (x *JobReprioritizeRequest) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

func (x *JobReprioritizeRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobReprioritizeRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobReprioritizeRequest) GetNewPriority() float64 {
	if x != nil {
		return x.NewPriority
	}
	return 0
}

// swagger:model
type JobReprioritizeResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ReprioritizationResults map[string]string      `protobuf:"bytes,1,rep,name=reprioritization_results,json=reprioritizationResults,proto3" json:"reprioritization_results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JobReprioritizeResponse) Reset() {
	*x = JobReprioritizeResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobReprioritizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReprioritizeResponse) ProtoMessage() {}

func (x *JobReprioritizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReprioritizeResponse.ProtoReflect.Descriptor instead.
func (*JobReprioritizeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{10}
}

func (x *JobReprioritizeResponse) GetReprioritizationResults() map[string]string {
	if x != nil {
		return x.ReprioritizationResults
	}
	return nil
}

type JobSubmitResponseItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSubmitResponseItem) Reset() {
	*x = JobSubmitResponseItem{}
	mi := &file_pkg_api_submit_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSubmitResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSubmitResponseItem) ProtoMessage() {}

func (x *JobSubmitResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSubmitResponseItem.ProtoReflect.Descriptor instead.
func (*JobSubmitResponseItem) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{11}
}

func (x *JobSubmitResponseItem) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSubmitResponseItem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// swagger:model
type JobSubmitResponse struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	JobResponseItems []*JobSubmitResponseItem `protobuf:"bytes,1,rep,name=job_response_items,json=jobResponseItems,proto3" json:"job_response_items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JobSubmitResponse) Reset() {
	*x = JobSubmitResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSubmitResponse) ProtoMessage() {}

func (x *JobSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSubmitResponse.ProtoReflect.Descriptor instead.
func (*JobSubmitResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{12}
}

func (x *JobSubmitResponse) GetJobResponseItems() []*JobSubmitResponseItem {
	if x != nil {
		return x.JobResponseItems
	}
	return nil
}

// swagger:model
type Queue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityFactor float64                `protobuf:"fixed64,2,opt,name=priority_factor,json=priorityFactor,proto3" json:"priority_factor,omitempty"`
	UserOwners     []string               `protobuf:"bytes,3,rep,name=user_owners,json=userOwners,proto3" json:"user_owners,omitempty"`
	GroupOwners    []string               `protobuf:"bytes,4,rep,name=group_owners,json=groupOwners,proto3" json:"group_owners,omitempty"`
	// These are ignored and should be removed
	//
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	ResourceLimits map[string]float64 `protobuf:"bytes,5,rep,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	// Map from priority class name to resource limit overrides for this queue and priority class.
	// If provided for a priority class, global limits for that priority class do not apply to this queue.
	ResourceLimitsByPriorityClassName map[string]*PriorityClassResourceLimits `protobuf:"bytes,7,rep,name=resource_limits_by_priority_class_name,json=resourceLimitsByPriorityClassName,proto3" json:"resource_limits_by_priority_class_name,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Permissions                       []*Queue_Permissions                    `protobuf:"bytes,6,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Determines whether scheduling is enabled for this queue.
	Cordoned bool `protobuf:"varint,8,opt,name=cordoned,proto3" json:"cordoned,omitempty"`
	// A list of Kubernetes-like key-value labels, e.g. armadaproject.io/priority=critical
	//
	// Deprecated: Marked as deprecated in pkg/api/submit.proto.
	LabelsDeprecated []string          `protobuf:"bytes,9,rep,name=labels_deprecated,json=labelsDeprecated,proto3" json:"labels_deprecated,omitempty"`
	Labels           map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Queue) Reset() {
	*x = Queue{}
	mi := &file_pkg_api_submit_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{13}
}

func (x *Queue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Queue) GetPriorityFactor() float64 {
	if x != nil {
		return x.PriorityFactor
	}
	return 0
}

func (x *Queue) GetUserOwners() []string {
	if x != nil {
		return x.UserOwners
	}
	return nil
}

func (x *Queue) GetGroupOwners() []string {
	if x != nil {
		return x.GroupOwners
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *Queue) GetResourceLimits() map[string]float64 {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *Queue) GetResourceLimitsByPriorityClassName() map[string]*PriorityClassResourceLimits {
	if x != nil {
		return x.ResourceLimitsByPriorityClassName
	}
	return nil
}

func (x *Queue) GetPermissions() []*Queue_Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Queue) GetCordoned() bool {
	if x != nil {
		return x.Cordoned
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/api/submit.proto.
func (x *Queue) GetLabelsDeprecated() []string {
	if x != nil {
		return x.LabelsDeprecated
	}
	return nil
}

func (x *Queue) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PriorityClassResourceLimits struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limits resources assigned to jobs of this priority class.
	// Specifically, jobs of this priority class are only scheduled if doing so does not exceed this limit.
	MaximumResourceFraction map[string]float64 `protobuf:"bytes,1,rep,name=maximum_resource_fraction,json=maximumResourceFraction,proto3" json:"maximum_resource_fraction,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	// Per-pool override of maximum_resource_fraction.
	// If missing for a particular pool, maximum_resource_fraction is used instead for that pool.
	MaximumResourceFractionByPool map[string]*PriorityClassPoolResourceLimits `protobuf:"bytes,2,rep,name=maximum_resource_fraction_by_pool,json=maximumResourceFractionByPool,proto3" json:"maximum_resource_fraction_by_pool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *PriorityClassResourceLimits) Reset() {
	*x = PriorityClassResourceLimits{}
	mi := &file_pkg_api_submit_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriorityClassResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityClassResourceLimits) ProtoMessage() {}

func (x *PriorityClassResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityClassResourceLimits.ProtoReflect.Descriptor instead.
func (*PriorityClassResourceLimits) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{14}
}

func (x *PriorityClassResourceLimits) GetMaximumResourceFraction() map[string]float64 {
	if x != nil {
		return x.MaximumResourceFraction
	}
	return nil
}

func (x *PriorityClassResourceLimits) GetMaximumResourceFractionByPool() map[string]*PriorityClassPoolResourceLimits {
	if x != nil {
		return x.MaximumResourceFractionByPool
	}
	return nil
}

type PriorityClassPoolResourceLimits struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	MaximumResourceFraction map[string]float64     `protobuf:"bytes,1,rep,name=maximum_resource_fraction,json=maximumResourceFraction,proto3" json:"maximum_resource_fraction,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PriorityClassPoolResourceLimits) Reset() {
	*x = PriorityClassPoolResourceLimits{}
	mi := &file_pkg_api_submit_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriorityClassPoolResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityClassPoolResourceLimits) ProtoMessage() {}

func (x *PriorityClassPoolResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityClassPoolResourceLimits.ProtoReflect.Descriptor instead.
func (*PriorityClassPoolResourceLimits) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{15}
}

func (x *PriorityClassPoolResourceLimits) GetMaximumResourceFraction() map[string]float64 {
	if x != nil {
		return x.MaximumResourceFraction
	}
	return nil
}

// swagger:model
type QueueList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queues        []*Queue               `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueList) Reset() {
	*x = QueueList{}
	mi := &file_pkg_api_submit_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueList) ProtoMessage() {}

func (x *QueueList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueList.ProtoReflect.Descriptor instead.
func (*QueueList) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{16}
}

func (x *QueueList) GetQueues() []*Queue {
	if x != nil {
		return x.Queues
	}
	return nil
}

// swagger:model
type CancellationResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CancelledIds  []string               `protobuf:"bytes,1,rep,name=cancelled_ids,json=cancelledIds,proto3" json:"cancelled_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancellationResult) Reset() {
	*x = CancellationResult{}
	mi := &file_pkg_api_submit_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancellationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationResult) ProtoMessage() {}

func (x *CancellationResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationResult.ProtoReflect.Descriptor instead.
func (*CancellationResult) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{17}
}

func (x *CancellationResult) GetCancelledIds() []string {
	if x != nil {
		return x.CancelledIds
	}
	return nil
}

//swagger:model
type QueueGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueGetRequest) Reset() {
	*x = QueueGetRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGetRequest) ProtoMessage() {}

func (x *QueueGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGetRequest.ProtoReflect.Descriptor instead.
func (*QueueGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{18}
}

func (x *QueueGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//swagger:model
type QueueCordonRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueCordonRequest) Reset() {
	*x = QueueCordonRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueCordonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCordonRequest) ProtoMessage() {}

func (x *QueueCordonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCordonRequest.ProtoReflect.Descriptor instead.
func (*QueueCordonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{19}
}

func (x *QueueCordonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//swagger:model
type QueueUncordonRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueUncordonRequest) Reset() {
	*x = QueueUncordonRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueUncordonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUncordonRequest) ProtoMessage() {}

func (x *QueueUncordonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUncordonRequest.ProtoReflect.Descriptor instead.
func (*QueueUncordonRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{20}
}

func (x *QueueUncordonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//swagger:model
type StreamingQueueGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Num           uint32                 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingQueueGetRequest) Reset() {
	*x = StreamingQueueGetRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingQueueGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueueGetRequest) ProtoMessage() {}

func (x *StreamingQueueGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueueGetRequest.ProtoReflect.Descriptor instead.
func (*StreamingQueueGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{21}
}

func (x *StreamingQueueGetRequest) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

//swagger:model
type QueueDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueDeleteRequest) Reset() {
	*x = QueueDeleteRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDeleteRequest) ProtoMessage() {}

func (x *QueueDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDeleteRequest.ProtoReflect.Descriptor instead.
func (*QueueDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{22}
}

func (x *QueueDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JobSetInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueuedJobs    int32                  `protobuf:"varint,2,opt,name=queued_jobs,json=queuedJobs,proto3" json:"queued_jobs,omitempty"`
	LeasedJobs    int32                  `protobuf:"varint,3,opt,name=leased_jobs,json=leasedJobs,proto3" json:"leased_jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSetInfo) Reset() {
	*x = JobSetInfo{}
	mi := &file_pkg_api_submit_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetInfo) ProtoMessage() {}

func (x *JobSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetInfo.ProtoReflect.Descriptor instead.
func (*JobSetInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{23}
}

func (x *JobSetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobSetInfo) GetQueuedJobs() int32 {
	if x != nil {
		return x.QueuedJobs
	}
	return 0
}

func (x *JobSetInfo) GetLeasedJobs() int32 {
	if x != nil {
		return x.LeasedJobs
	}
	return 0
}

type QueueUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         *Queue                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueUpdateResponse) Reset() {
	*x = QueueUpdateResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateResponse) ProtoMessage() {}

func (x *QueueUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateResponse.ProtoReflect.Descriptor instead.
func (*QueueUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{24}
}

func (x *QueueUpdateResponse) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *QueueUpdateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type BatchQueueUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FailedQueues  []*QueueUpdateResponse `protobuf:"bytes,1,rep,name=failed_queues,json=failedQueues,proto3" json:"failed_queues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchQueueUpdateResponse) Reset() {
	*x = BatchQueueUpdateResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchQueueUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueueUpdateResponse) ProtoMessage() {}

func (x *BatchQueueUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueueUpdateResponse.ProtoReflect.Descriptor instead.
func (*BatchQueueUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{25}
}

func (x *BatchQueueUpdateResponse) GetFailedQueues() []*QueueUpdateResponse {
	if x != nil {
		return x.FailedQueues
	}
	return nil
}

type QueueCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         *Queue                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueCreateResponse) Reset() {
	*x = QueueCreateResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCreateResponse) ProtoMessage() {}

func (x *QueueCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCreateResponse.ProtoReflect.Descriptor instead.
func (*QueueCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{26}
}

func (x *QueueCreateResponse) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *QueueCreateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type BatchQueueCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FailedQueues  []*QueueCreateResponse `protobuf:"bytes,1,rep,name=failed_queues,json=failedQueues,proto3" json:"failed_queues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchQueueCreateResponse) Reset() {
	*x = BatchQueueCreateResponse{}
	mi := &file_pkg_api_submit_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchQueueCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueueCreateResponse) ProtoMessage() {}

func (x *BatchQueueCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueueCreateResponse.ProtoReflect.Descriptor instead.
func (*BatchQueueCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{27}
}

func (x *BatchQueueCreateResponse) GetFailedQueues() []*QueueCreateResponse {
	if x != nil {
		return x.FailedQueues
	}
	return nil
}

// Indicates the end of streams
type EndMarker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMarker) Reset() {
	*x = EndMarker{}
	mi := &file_pkg_api_submit_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMarker) ProtoMessage() {}

func (x *EndMarker) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMarker.ProtoReflect.Descriptor instead.
func (*EndMarker) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{28}
}

type StreamingQueueMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*StreamingQueueMessage_Queue
	//	*StreamingQueueMessage_End
	Event         isStreamingQueueMessage_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingQueueMessage) Reset() {
	*x = StreamingQueueMessage{}
	mi := &file_pkg_api_submit_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingQueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueueMessage) ProtoMessage() {}

func (x *StreamingQueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueueMessage.ProtoReflect.Descriptor instead.
func (*StreamingQueueMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{29}
}

func (x *StreamingQueueMessage) GetEvent() isStreamingQueueMessage_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *StreamingQueueMessage) GetQueue() *Queue {
	if x != nil {
		if x, ok := x.Event.(*StreamingQueueMessage_Queue); ok {
			return x.Queue
		}
	}
	return nil
}

func (x *StreamingQueueMessage) GetEnd() *EndMarker {
	if x != nil {
		if x, ok := x.Event.(*StreamingQueueMessage_End); ok {
			return x.End
		}
	}
	return nil
}

type isStreamingQueueMessage_Event interface {
	isStreamingQueueMessage_Event()
}

type StreamingQueueMessage_Queue struct {
	Queue *Queue `protobuf:"bytes,1,opt,name=queue,proto3,oneof"`
}

type StreamingQueueMessage_End struct {
	End *EndMarker `protobuf:"bytes,2,opt,name=end,proto3,oneof"`
}

func (*StreamingQueueMessage_Queue) isStreamingQueueMessage_Event() {}

func (*StreamingQueueMessage_End) isStreamingQueueMessage_Event() {}

type QueuePreemptRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueuePreemptRequest) Reset() {
	*x = QueuePreemptRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePreemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePreemptRequest) ProtoMessage() {}

func (x *QueuePreemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePreemptRequest.ProtoReflect.Descriptor instead.
func (*QueuePreemptRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{30}
}

func (x *QueuePreemptRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueuePreemptRequest) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

type QueueCancelRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriorityClasses []string               `protobuf:"bytes,2,rep,name=priorityClasses,proto3" json:"priorityClasses,omitempty"`
	// In practice jobs are only cancellable from non-terminal states
	JobStates     []JobState `protobuf:"varint,3,rep,packed,name=jobStates,proto3,enum=api.JobState" json:"jobStates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueCancelRequest) Reset() {
	*x = QueueCancelRequest{}
	mi := &file_pkg_api_submit_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueCancelRequest) ProtoMessage() {}

func (x *QueueCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueCancelRequest.ProtoReflect.Descriptor instead.
func (*QueueCancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{31}
}

func (x *QueueCancelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueCancelRequest) GetPriorityClasses() []string {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

func (x *QueueCancelRequest) GetJobStates() []JobState {
	if x != nil {
		return x.JobStates
	}
	return nil
}

type Queue_Permissions struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Subjects      []*Queue_Permissions_Subject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Verbs         []string                     `protobuf:"bytes,2,rep,name=verbs,proto3" json:"verbs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Queue_Permissions) Reset() {
	*x = Queue_Permissions{}
	mi := &file_pkg_api_submit_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue_Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue_Permissions) ProtoMessage() {}

func (x *Queue_Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue_Permissions.ProtoReflect.Descriptor instead.
func (*Queue_Permissions) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Queue_Permissions) GetSubjects() []*Queue_Permissions_Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Queue_Permissions) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

type Queue_Permissions_Subject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Queue_Permissions_Subject) Reset() {
	*x = Queue_Permissions_Subject{}
	mi := &file_pkg_api_submit_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue_Permissions_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue_Permissions_Subject) ProtoMessage() {}

func (x *Queue_Permissions_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_submit_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue_Permissions_Subject.ProtoReflect.Descriptor instead.
func (*Queue_Permissions_Subject) Descriptor() ([]byte, []int) {
	return file_pkg_api_submit_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (x *Queue_Permissions_Subject) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Queue_Permissions_Subject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_pkg_api_submit_proto protoreflect.FileDescriptor

var file_pkg_api_submit_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x06, 0x0a, 0x14,
	0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a,
	0x09, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x70,
	0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xb9, 0x02, 0x0a, 0x0d,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xf8, 0x09, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x72,
	0x0a, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a,
	0x6b, 0x38, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6b, 0x38,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6b, 0x38,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04,
	0x08, 0x1e, 0x10, 0x1f, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xdb, 0x01, 0x0a, 0x17, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x18, 0x72,
	0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x4a, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a,
	0x15, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x10, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x9e, 0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x26, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x21,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x1a, 0x31, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x41, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x76, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xec, 0x03, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d,
	0x01, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x4a,
	0x0a, 0x1c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x22, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4a, 0x0a, 0x1c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2f, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x22, 0x39, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x25, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x72,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x28, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6a,
	0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x22, 0x4d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x59, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x45, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x53, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2a, 0x1a, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x2a, 0x29, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x01, 0x2a, 0x9f,
	0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x32, 0xca, 0x05, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0d, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x8b, 0x09,
	0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a,
	0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x12, 0x57, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6a,
	0x6f, 0x62, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x0c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x6e, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x72, 0x65, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a,
	0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x63, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x63, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x46, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x64, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x30, 0x01, 0x12,
	0x3a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x07, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x14, 0x41, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_api_submit_proto_rawDescOnce sync.Once
	file_pkg_api_submit_proto_rawDescData []byte
)

func file_pkg_api_submit_proto_rawDescGZIP() []byte {
	file_pkg_api_submit_proto_rawDescOnce.Do(func() {
		file_pkg_api_submit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_api_submit_proto_rawDesc), len(file_pkg_api_submit_proto_rawDesc)))
	})
	return file_pkg_api_submit_proto_rawDescData
}

var file_pkg_api_submit_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_api_submit_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_pkg_api_submit_proto_goTypes = []any{
	(IngressType)(0),                        // 0: api.IngressType
	(ServiceType)(0),                        // 1: api.ServiceType
	(JobState)(0),                           // 2: api.JobState
	(*JobSubmitRequestItem)(nil),            // 3: api.JobSubmitRequestItem
	(*IngressConfig)(nil),                   // 4: api.IngressConfig
	(*ServiceConfig)(nil),                   // 5: api.ServiceConfig
	(*JobSubmitRequest)(nil),                // 6: api.JobSubmitRequest
	(*JobPreemptRequest)(nil),               // 7: api.JobPreemptRequest
	(*JobCancelRequest)(nil),                // 8: api.JobCancelRequest
	(*JobSetCancelRequest)(nil),             // 9: api.JobSetCancelRequest
	(*JobSetFilter)(nil),                    // 10: api.JobSetFilter
	(*Job)(nil),                             // 11: api.Job
	(*JobReprioritizeRequest)(nil),          // 12: api.JobReprioritizeRequest
	(*JobReprioritizeResponse)(nil),         // 13: api.JobReprioritizeResponse
	(*JobSubmitResponseItem)(nil),           // 14: api.JobSubmitResponseItem
	(*JobSubmitResponse)(nil),               // 15: api.JobSubmitResponse
	(*Queue)(nil),                           // 16: api.Queue
	(*PriorityClassResourceLimits)(nil),     // 17: api.PriorityClassResourceLimits
	(*PriorityClassPoolResourceLimits)(nil), // 18: api.PriorityClassPoolResourceLimits
	(*QueueList)(nil),                       // 19: api.QueueList
	(*CancellationResult)(nil),              // 20: api.CancellationResult
	(*QueueGetRequest)(nil),                 // 21: api.QueueGetRequest
	(*QueueCordonRequest)(nil),              // 22: api.QueueCordonRequest
	(*QueueUncordonRequest)(nil),            // 23: api.QueueUncordonRequest
	(*StreamingQueueGetRequest)(nil),        // 24: api.StreamingQueueGetRequest
	(*QueueDeleteRequest)(nil),              // 25: api.QueueDeleteRequest
	(*JobSetInfo)(nil),                      // 26: api.JobSetInfo
	(*QueueUpdateResponse)(nil),             // 27: api.QueueUpdateResponse
	(*BatchQueueUpdateResponse)(nil),        // 28: api.BatchQueueUpdateResponse
	(*QueueCreateResponse)(nil),             // 29: api.QueueCreateResponse
	(*BatchQueueCreateResponse)(nil),        // 30: api.BatchQueueCreateResponse
	(*EndMarker)(nil),                       // 31: api.EndMarker
	(*StreamingQueueMessage)(nil),           // 32: api.StreamingQueueMessage
	(*QueuePreemptRequest)(nil),             // 33: api.QueuePreemptRequest
	(*QueueCancelRequest)(nil),              // 34: api.QueueCancelRequest
	nil,                                     // 35: api.JobSubmitRequestItem.LabelsEntry
	nil,                                     // 36: api.JobSubmitRequestItem.AnnotationsEntry
	nil,                                     // 37: api.JobSubmitRequestItem.RequiredNodeLabelsEntry
	nil,                                     // 38: api.IngressConfig.AnnotationsEntry
	nil,                                     // 39: api.Job.LabelsEntry
	nil,                                     // 40: api.Job.AnnotationsEntry
	nil,                                     // 41: api.Job.RequiredNodeLabelsEntry
	nil,                                     // 42: api.JobReprioritizeResponse.ReprioritizationResultsEntry
	(*Queue_Permissions)(nil),               // 43: api.Queue.Permissions
	nil,                                     // 44: api.Queue.ResourceLimitsEntry
	nil,                                     // 45: api.Queue.ResourceLimitsByPriorityClassNameEntry
	nil,                                     // 46: api.Queue.LabelsEntry
	(*Queue_Permissions_Subject)(nil),       // 47: api.Queue.Permissions.Subject
	nil,                                     // 48: api.PriorityClassResourceLimits.MaximumResourceFractionEntry
	nil,                                     // 49: api.PriorityClassResourceLimits.MaximumResourceFractionByPoolEntry
	nil,                                     // 50: api.PriorityClassPoolResourceLimits.MaximumResourceFractionEntry
	(*v1.PodSpec)(nil),                      // 51: k8s.io.api.core.v1.PodSpec
	(*v1.ResourceRequirements)(nil),         // 52: k8s.io.api.core.v1.ResourceRequirements
	(*timestamppb.Timestamp)(nil),           // 53: google.protobuf.Timestamp
	(*v11.Ingress)(nil),                     // 54: k8s.io.api.networking.v1.Ingress
	(*v1.Service)(nil),                      // 55: k8s.io.api.core.v1.Service
	(*emptypb.Empty)(nil),                   // 56: google.protobuf.Empty
	(*HealthCheckResponse)(nil),             // 57: api.HealthCheckResponse
}
var file_pkg_api_submit_proto_depIdxs = []int32{
	35, // 0: api.JobSubmitRequestItem.labels:type_name -> api.JobSubmitRequestItem.LabelsEntry
	36, // 1: api.JobSubmitRequestItem.annotations:type_name -> api.JobSubmitRequestItem.AnnotationsEntry
	37, // 2: api.JobSubmitRequestItem.required_node_labels:type_name -> api.JobSubmitRequestItem.RequiredNodeLabelsEntry
	51, // 3: api.JobSubmitRequestItem.pod_spec:type_name -> k8s.io.api.core.v1.PodSpec
	51, // 4: api.JobSubmitRequestItem.pod_specs:type_name -> k8s.io.api.core.v1.PodSpec
	4,  // 5: api.JobSubmitRequestItem.ingress:type_name -> api.IngressConfig
	5,  // 6: api.JobSubmitRequestItem.services:type_name -> api.ServiceConfig
	0,  // 7: api.IngressConfig.type:type_name -> api.IngressType
	38, // 8: api.IngressConfig.annotations:type_name -> api.IngressConfig.AnnotationsEntry
	1,  // 9: api.ServiceConfig.type:type_name -> api.ServiceType
	3,  // 10: api.JobSubmitRequest.job_request_items:type_name -> api.JobSubmitRequestItem
	10, // 11: api.JobSetCancelRequest.filter:type_name -> api.JobSetFilter
	2,  // 12: api.JobSetFilter.states:type_name -> api.JobState
	39, // 13: api.Job.labels:type_name -> api.Job.LabelsEntry
	40, // 14: api.Job.annotations:type_name -> api.Job.AnnotationsEntry
	41, // 15: api.Job.required_node_labels:type_name -> api.Job.RequiredNodeLabelsEntry
	51, // 16: api.Job.pod_spec:type_name -> k8s.io.api.core.v1.PodSpec
	51, // 17: api.Job.pod_specs:type_name -> k8s.io.api.core.v1.PodSpec
	52, // 18: api.Job.scheduling_resource_requirements:type_name -> k8s.io.api.core.v1.ResourceRequirements
	53, // 19: api.Job.created:type_name -> google.protobuf.Timestamp
	4,  // 20: api.Job.ingress:type_name -> api.IngressConfig
	5,  // 21: api.Job.services:type_name -> api.ServiceConfig
	54, // 22: api.Job.k8s_ingress:type_name -> k8s.io.api.networking.v1.Ingress
	55, // 23: api.Job.k8s_service:type_name -> k8s.io.api.core.v1.Service
	42, // 24: api.JobReprioritizeResponse.reprioritization_results:type_name -> api.JobReprioritizeResponse.ReprioritizationResultsEntry
	14, // 25: api.JobSubmitResponse.job_response_items:type_name -> api.JobSubmitResponseItem
	44, // 26: api.Queue.resource_limits:type_name -> api.Queue.ResourceLimitsEntry
	45, // 27: api.Queue.resource_limits_by_priority_class_name:type_name -> api.Queue.ResourceLimitsByPriorityClassNameEntry
	43, // 28: api.Queue.permissions:type_name -> api.Queue.Permissions
	46, // 29: api.Queue.labels:type_name -> api.Queue.LabelsEntry
	48, // 30: api.PriorityClassResourceLimits.maximum_resource_fraction:type_name -> api.PriorityClassResourceLimits.MaximumResourceFractionEntry
	49, // 31: api.PriorityClassResourceLimits.maximum_resource_fraction_by_pool:type_name -> api.PriorityClassResourceLimits.MaximumResourceFractionByPoolEntry
	50, // 32: api.PriorityClassPoolResourceLimits.maximum_resource_fraction:type_name -> api.PriorityClassPoolResourceLimits.MaximumResourceFractionEntry
	16, // 33: api.QueueList.queues:type_name -> api.Queue
	16, // 34: api.QueueUpdateResponse.queue:type_name -> api.Queue
	27, // 35: api.BatchQueueUpdateResponse.failed_queues:type_name -> api.QueueUpdateResponse
	16, // 36: api.QueueCreateResponse.queue:type_name -> api.Queue
	29, // 37: api.BatchQueueCreateResponse.failed_queues:type_name -> api.QueueCreateResponse
	16, // 38: api.StreamingQueueMessage.queue:type_name -> api.Queue
	31, // 39: api.StreamingQueueMessage.end:type_name -> api.EndMarker
	2,  // 40: api.QueueCancelRequest.jobStates:type_name -> api.JobState
	47, // 41: api.Queue.Permissions.subjects:type_name -> api.Queue.Permissions.Subject
	17, // 42: api.Queue.ResourceLimitsByPriorityClassNameEntry.value:type_name -> api.PriorityClassResourceLimits
	18, // 43: api.PriorityClassResourceLimits.MaximumResourceFractionByPoolEntry.value:type_name -> api.PriorityClassPoolResourceLimits
	16, // 44: api.QueueService.CreateQueue:input_type -> api.Queue
	19, // 45: api.QueueService.CreateQueues:input_type -> api.QueueList
	16, // 46: api.QueueService.UpdateQueue:input_type -> api.Queue
	19, // 47: api.QueueService.UpdateQueues:input_type -> api.QueueList
	25, // 48: api.QueueService.DeleteQueue:input_type -> api.QueueDeleteRequest
	21, // 49: api.QueueService.GetQueue:input_type -> api.QueueGetRequest
	24, // 50: api.QueueService.GetQueues:input_type -> api.StreamingQueueGetRequest
	22, // 51: api.QueueService.CordonQueue:input_type -> api.QueueCordonRequest
	23, // 52: api.QueueService.UncordonQueue:input_type -> api.QueueUncordonRequest
	33, // 53: api.QueueService.PreemptOnQueue:input_type -> api.QueuePreemptRequest
	34, // 54: api.QueueService.CancelOnQueue:input_type -> api.QueueCancelRequest
	6,  // 55: api.Submit.SubmitJobs:input_type -> api.JobSubmitRequest
	8,  // 56: api.Submit.CancelJobs:input_type -> api.JobCancelRequest
	9,  // 57: api.Submit.CancelJobSet:input_type -> api.JobSetCancelRequest
	12, // 58: api.Submit.ReprioritizeJobs:input_type -> api.JobReprioritizeRequest
	7,  // 59: api.Submit.PreemptJobs:input_type -> api.JobPreemptRequest
	16, // 60: api.Submit.CreateQueue:input_type -> api.Queue
	19, // 61: api.Submit.CreateQueues:input_type -> api.QueueList
	16, // 62: api.Submit.UpdateQueue:input_type -> api.Queue
	19, // 63: api.Submit.UpdateQueues:input_type -> api.QueueList
	25, // 64: api.Submit.DeleteQueue:input_type -> api.QueueDeleteRequest
	21, // 65: api.Submit.GetQueue:input_type -> api.QueueGetRequest
	24, // 66: api.Submit.GetQueues:input_type -> api.StreamingQueueGetRequest
	56, // 67: api.Submit.Health:input_type -> google.protobuf.Empty
	56, // 68: api.QueueService.CreateQueue:output_type -> google.protobuf.Empty
	30, // 69: api.QueueService.CreateQueues:output_type -> api.BatchQueueCreateResponse
	56, // 70: api.QueueService.UpdateQueue:output_type -> google.protobuf.Empty
	28, // 71: api.QueueService.UpdateQueues:output_type -> api.BatchQueueUpdateResponse
	56, // 72: api.QueueService.DeleteQueue:output_type -> google.protobuf.Empty
	16, // 73: api.QueueService.GetQueue:output_type -> api.Queue
	32, // 74: api.QueueService.GetQueues:output_type -> api.StreamingQueueMessage
	56, // 75: api.QueueService.CordonQueue:output_type -> google.protobuf.Empty
	56, // 76: api.QueueService.UncordonQueue:output_type -> google.protobuf.Empty
	56, // 77: api.QueueService.PreemptOnQueue:output_type -> google.protobuf.Empty
	56, // 78: api.QueueService.CancelOnQueue:output_type -> google.protobuf.Empty
	15, // 79: api.Submit.SubmitJobs:output_type -> api.JobSubmitResponse
	20, // 80: api.Submit.CancelJobs:output_type -> api.CancellationResult
	56, // 81: api.Submit.CancelJobSet:output_type -> google.protobuf.Empty
	13, // 82: api.Submit.ReprioritizeJobs:output_type -> api.JobReprioritizeResponse
	56, // 83: api.Submit.PreemptJobs:output_type -> google.protobuf.Empty
	56, // 84: api.Submit.CreateQueue:output_type -> google.protobuf.Empty
	30, // 85: api.Submit.CreateQueues:output_type -> api.BatchQueueCreateResponse
	56, // 86: api.Submit.UpdateQueue:output_type -> google.protobuf.Empty
	28, // 87: api.Submit.UpdateQueues:output_type -> api.BatchQueueUpdateResponse
	56, // 88: api.Submit.DeleteQueue:output_type -> google.protobuf.Empty
	16, // 89: api.Submit.GetQueue:output_type -> api.Queue
	32, // 90: api.Submit.GetQueues:output_type -> api.StreamingQueueMessage
	57, // 91: api.Submit.Health:output_type -> api.HealthCheckResponse
	68, // [68:92] is the sub-list for method output_type
	44, // [44:68] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_pkg_api_submit_proto_init() }
func file_pkg_api_submit_proto_init() {
	if File_pkg_api_submit_proto != nil {
		return
	}
	file_pkg_api_health_proto_init()
	file_pkg_api_submit_proto_msgTypes[29].OneofWrappers = []any{
		(*StreamingQueueMessage_Queue)(nil),
		(*StreamingQueueMessage_End)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_api_submit_proto_rawDesc), len(file_pkg_api_submit_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pkg_api_submit_proto_goTypes,
		DependencyIndexes: file_pkg_api_submit_proto_depIdxs,
		EnumInfos:         file_pkg_api_submit_proto_enumTypes,
		MessageInfos:      file_pkg_api_submit_proto_msgTypes,
	}.Build()
	File_pkg_api_submit_proto = out.File
	file_pkg_api_submit_proto_goTypes = nil
	file_pkg_api_submit_proto_depIdxs = nil
}
