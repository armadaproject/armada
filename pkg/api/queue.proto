syntax = 'proto3';

package api;
option csharp_namespace = "ArmadaProject.Io.Api";

import "google/protobuf/timestamp.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "pkg/api/submit.proto";

import "k8s.io/api/networking/v1/generated.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;

message Job {
    string id = 1;
    string client_id = 13;
    string job_set_id = 2;
    string queue = 3;
    string namespace = 7;
    map<string, string> labels = 9;
    map<string, string> annotations = 10;
    map<string, string> required_node_labels = 11 [deprecated = true];
    string owner = 8;
    repeated string queue_ownership_user_groups = 15;
    double priority = 4;
    k8s.io.api.core.v1.PodSpec pod_spec = 5 [deprecated = true]; // Use PodSpecs instead
    repeated k8s.io.api.core.v1.PodSpec pod_specs = 12;
    google.protobuf.Timestamp created = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    // Services can be provided either as Armada-specific config objects or as proper k8s objects.
    // These options are exclusive, i.e., if either ingress or services is provided,
    // then neither of k8s_ingress or k8s_service can be provided, and vice versa.
    repeated IngressConfig ingress = 14;
    repeated ServiceConfig services = 16;
    // repeated github.com.G-Research.armada.internal.events.KubernetesObject objects = 17;
    // github.com.G-Research.armada.internal.events.
    repeated k8s.io.api.networking.v1.Ingress k8s_ingress = 17;
    repeated k8s.io.api.core.v1.Service k8s_service = 18;
}

message LeaseRequest {
    string cluster_id = 1;
    string pool = 8;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 2 [(gogoproto.nullable) = false];
    ClusterLeasedReport cluster_leased_report  = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> minimum_job_size = 6 [(gogoproto.nullable) = false];
    repeated NodeInfo nodes = 7 [(gogoproto.nullable) = false];
}

// For the bidirectional streaming job lease request service.
// For the first message, populate all fields except SubmittedJobs, which should be empty.
// For subsequent messages, these fields may be left empty, in which case the last non-zero value received is used.
// By streaming back job ids, the server knows which jobs were received in case of an outage.
message StreamingLeaseRequest {
    // Each cluster has a unique name associated with it.
    string cluster_id = 1;
    // Nodes are split into pools. This field indicates for which pool jobs are leased.
    string pool = 2;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 3 [(gogoproto.nullable) = false];
    ClusterLeasedReport cluster_leased_report = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> minimum_job_size = 5 [(gogoproto.nullable) = false];
    repeated NodeInfo nodes = 6 [(gogoproto.nullable) = false];
    // Ids of received jobs. Used to ack received jobs.
    repeated string ReceivedJobIds = 7;
}

message NodeInfo {
    string name = 1;
    repeated k8s.io.api.core.v1.Taint taints = 2 [(gogoproto.nullable) = false];
    map<string,string> labels = 3;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable_resources = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> available_resources = 5 [(gogoproto.nullable) = false];
}

message NodeType {
    repeated k8s.io.api.core.v1.Taint taints = 1 [(gogoproto.nullable) = false];
    map<string,string> labels = 2;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable_resources = 3 [(gogoproto.nullable) = false];
}

// Used to store last info in Redis
message ClusterSchedulingInfoReport {
    string cluster_id = 1;
    string pool = 7;
    google.protobuf.Timestamp report_time = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated NodeType node_types = 5;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> minimum_job_size = 6 [(gogoproto.nullable) = false];
}

message QueueLeasedReport {
    string name = 1;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources_leased = 2 [(gogoproto.nullable) = false];
}

message ClusterLeasedReport {
    string cluster_id = 1;
    google.protobuf.Timestamp report_time = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated QueueLeasedReport queues = 3;
}

message ComputeResource {
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 1 [(gogoproto.nullable) = false];
}

message NodeLabeling {
    map<string,string> labels = 3;
}

message JobLease {
    repeated Job job = 1;
}

message StreamingJobLease {
    Job job = 1;
    // Total number of jobs being sent over this connection.
    uint32 numJobs = 2;
    // Number of jobs for which the server has received an ack.
    // When numAcked = numJobs, all jobs have been received and acked.
    uint32 numAcked = 3;
}

message IdList {
    repeated string ids = 1;
}

message RenewLeaseRequest {
    string cluster_id = 1;
    repeated string ids = 2;
}

message ReturnLeaseRequest {
    string cluster_id = 1;
    string job_id = 2;
    OrderedStringMap avoid_node_labels = 4;
    string reason = 5;
    string kubernetes_id = 6;
}

service AggregatedQueue {
    rpc LeaseJobs (LeaseRequest) returns (JobLease);
    rpc StreamingLeaseJobs (stream StreamingLeaseRequest) returns (stream StreamingJobLease);
    rpc RenewLease (RenewLeaseRequest) returns (IdList);
    rpc ReturnLease (ReturnLeaseRequest) returns (google.protobuf.Empty);
    rpc ReportDone (IdList) returns (IdList);
}

message StringKeyValuePair {
   string key = 1;
   string value = 2;
}

message OrderedStringMap {
   repeated StringKeyValuePair entries = 1;
}

