// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/lookout/lookout.proto

package lookout

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	api "github.com/G-Research/armada/pkg/api"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SystemOverview struct {
	Queues []*QueueInfo `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (m *SystemOverview) Reset()      { *m = SystemOverview{} }
func (*SystemOverview) ProtoMessage() {}
func (*SystemOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{0}
}
func (m *SystemOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemOverview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemOverview.Merge(m, src)
}
func (m *SystemOverview) XXX_Size() int {
	return m.Size()
}
func (m *SystemOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemOverview.DiscardUnknown(m)
}

var xxx_messageInfo_SystemOverview proto.InternalMessageInfo

func (m *SystemOverview) GetQueues() []*QueueInfo {
	if m != nil {
		return m.Queues
	}
	return nil
}

type JobInfo struct {
	Job       *api.Job   `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Runs      []*RunInfo `protobuf:"bytes,2,rep,name=runs,proto3" json:"runs,omitempty"`
	Cancelled *time.Time `protobuf:"bytes,3,opt,name=cancelled,proto3,stdtime" json:"cancelled,omitempty"`
	JobState  string     `protobuf:"bytes,4,opt,name=job_state,json=jobState,proto3" json:"jobState,omitempty"`
	JobJson   string     `protobuf:"bytes,5,opt,name=job_json,json=jobJson,proto3" json:"jobJson,omitempty"`
}

func (m *JobInfo) Reset()      { *m = JobInfo{} }
func (*JobInfo) ProtoMessage() {}
func (*JobInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{1}
}
func (m *JobInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfo.Merge(m, src)
}
func (m *JobInfo) XXX_Size() int {
	return m.Size()
}
func (m *JobInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfo proto.InternalMessageInfo

func (m *JobInfo) GetJob() *api.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobInfo) GetRuns() []*RunInfo {
	if m != nil {
		return m.Runs
	}
	return nil
}

func (m *JobInfo) GetCancelled() *time.Time {
	if m != nil {
		return m.Cancelled
	}
	return nil
}

func (m *JobInfo) GetJobState() string {
	if m != nil {
		return m.JobState
	}
	return ""
}

func (m *JobInfo) GetJobJson() string {
	if m != nil {
		return m.JobJson
	}
	return ""
}

type RunInfo struct {
	K8SId            string     `protobuf:"bytes,1,opt,name=k8s_id,json=k8sId,proto3" json:"k8sId,omitempty"`
	Cluster          string     `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Node             string     `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Succeeded        bool       `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Error            string     `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Created          *time.Time `protobuf:"bytes,6,opt,name=created,proto3,stdtime" json:"created,omitempty"`
	Started          *time.Time `protobuf:"bytes,7,opt,name=started,proto3,stdtime" json:"started,omitempty"`
	Finished         *time.Time `protobuf:"bytes,8,opt,name=finished,proto3,stdtime" json:"finished,omitempty"`
	PodNumber        int32      `protobuf:"varint,9,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	RunState         string     `protobuf:"bytes,10,opt,name=run_state,json=runState,proto3" json:"runState,omitempty"`
	UnableToSchedule bool       `protobuf:"varint,11,opt,name=unable_to_schedule,json=unableToSchedule,proto3" json:"unableToSchedule,omitempty"`
}

func (m *RunInfo) Reset()      { *m = RunInfo{} }
func (*RunInfo) ProtoMessage() {}
func (*RunInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{2}
}
func (m *RunInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunInfo.Merge(m, src)
}
func (m *RunInfo) XXX_Size() int {
	return m.Size()
}
func (m *RunInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RunInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RunInfo proto.InternalMessageInfo

func (m *RunInfo) GetK8SId() string {
	if m != nil {
		return m.K8SId
	}
	return ""
}

func (m *RunInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RunInfo) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *RunInfo) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *RunInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RunInfo) GetCreated() *time.Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RunInfo) GetStarted() *time.Time {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *RunInfo) GetFinished() *time.Time {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *RunInfo) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *RunInfo) GetRunState() string {
	if m != nil {
		return m.RunState
	}
	return ""
}

func (m *RunInfo) GetUnableToSchedule() bool {
	if m != nil {
		return m.UnableToSchedule
	}
	return false
}

type QueueInfo struct {
	Queue                  string          `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobsQueued             uint32          `protobuf:"varint,2,opt,name=jobs_queued,json=jobsQueued,proto3" json:"jobsQueued,omitempty"`
	JobsPending            uint32          `protobuf:"varint,3,opt,name=jobs_pending,json=jobsPending,proto3" json:"jobsPending,omitempty"`
	JobsRunning            uint32          `protobuf:"varint,4,opt,name=jobs_running,json=jobsRunning,proto3" json:"jobsRunning,omitempty"`
	OldestQueuedJob        *JobInfo        `protobuf:"bytes,5,opt,name=oldest_queued_job,json=oldestQueuedJob,proto3" json:"oldestQueuedJob,omitempty"`
	LongestRunningJob      *JobInfo        `protobuf:"bytes,6,opt,name=longest_running_job,json=longestRunningJob,proto3" json:"longestRunningJob,omitempty"`
	OldestQueuedDuration   *types.Duration `protobuf:"bytes,7,opt,name=oldest_queued_duration,json=oldestQueuedDuration,proto3" json:"oldestQueuedDuration,omitempty"`
	LongestRunningDuration *types.Duration `protobuf:"bytes,8,opt,name=longest_running_duration,json=longestRunningDuration,proto3" json:"longestRunningDuration,omitempty"`
}

func (m *QueueInfo) Reset()      { *m = QueueInfo{} }
func (*QueueInfo) ProtoMessage() {}
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{3}
}
func (m *QueueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueInfo.Merge(m, src)
}
func (m *QueueInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueueInfo proto.InternalMessageInfo

func (m *QueueInfo) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *QueueInfo) GetJobsQueued() uint32 {
	if m != nil {
		return m.JobsQueued
	}
	return 0
}

func (m *QueueInfo) GetJobsPending() uint32 {
	if m != nil {
		return m.JobsPending
	}
	return 0
}

func (m *QueueInfo) GetJobsRunning() uint32 {
	if m != nil {
		return m.JobsRunning
	}
	return 0
}

func (m *QueueInfo) GetOldestQueuedJob() *JobInfo {
	if m != nil {
		return m.OldestQueuedJob
	}
	return nil
}

func (m *QueueInfo) GetLongestRunningJob() *JobInfo {
	if m != nil {
		return m.LongestRunningJob
	}
	return nil
}

func (m *QueueInfo) GetOldestQueuedDuration() *types.Duration {
	if m != nil {
		return m.OldestQueuedDuration
	}
	return nil
}

func (m *QueueInfo) GetLongestRunningDuration() *types.Duration {
	if m != nil {
		return m.LongestRunningDuration
	}
	return nil
}

type JobSetInfo struct {
	Queue         string         `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobSet        string         `protobuf:"bytes,2,opt,name=job_set,json=jobSet,proto3" json:"jobSet,omitempty"`
	JobsQueued    uint32         `protobuf:"varint,3,opt,name=jobs_queued,json=jobsQueued,proto3" json:"jobsQueued,omitempty"`
	JobsPending   uint32         `protobuf:"varint,4,opt,name=jobs_pending,json=jobsPending,proto3" json:"jobsPending,omitempty"`
	JobsRunning   uint32         `protobuf:"varint,5,opt,name=jobs_running,json=jobsRunning,proto3" json:"jobsRunning,omitempty"`
	JobsSucceeded uint32         `protobuf:"varint,6,opt,name=jobs_succeeded,json=jobsSucceeded,proto3" json:"jobsSucceeded,omitempty"`
	JobsFailed    uint32         `protobuf:"varint,7,opt,name=jobs_failed,json=jobsFailed,proto3" json:"jobsFailed,omitempty"`
	JobsCancelled uint32         `protobuf:"varint,8,opt,name=jobs_cancelled,json=jobsCancelled,proto3" json:"jobsCancelled,omitempty"`
	RunningStats  *DurationStats `protobuf:"bytes,9,opt,name=runningStats,proto3" json:"runningStats,omitempty"`
	QueuedStats   *DurationStats `protobuf:"bytes,10,opt,name=queuedStats,proto3" json:"queuedStats,omitempty"`
	Submitted     *time.Time     `protobuf:"bytes,11,opt,name=submitted,proto3,stdtime" json:"submitted,omitempty"`
}

func (m *JobSetInfo) Reset()      { *m = JobSetInfo{} }
func (*JobSetInfo) ProtoMessage() {}
func (*JobSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{4}
}
func (m *JobSetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetInfo.Merge(m, src)
}
func (m *JobSetInfo) XXX_Size() int {
	return m.Size()
}
func (m *JobSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetInfo proto.InternalMessageInfo

func (m *JobSetInfo) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSetInfo) GetJobSet() string {
	if m != nil {
		return m.JobSet
	}
	return ""
}

func (m *JobSetInfo) GetJobsQueued() uint32 {
	if m != nil {
		return m.JobsQueued
	}
	return 0
}

func (m *JobSetInfo) GetJobsPending() uint32 {
	if m != nil {
		return m.JobsPending
	}
	return 0
}

func (m *JobSetInfo) GetJobsRunning() uint32 {
	if m != nil {
		return m.JobsRunning
	}
	return 0
}

func (m *JobSetInfo) GetJobsSucceeded() uint32 {
	if m != nil {
		return m.JobsSucceeded
	}
	return 0
}

func (m *JobSetInfo) GetJobsFailed() uint32 {
	if m != nil {
		return m.JobsFailed
	}
	return 0
}

func (m *JobSetInfo) GetJobsCancelled() uint32 {
	if m != nil {
		return m.JobsCancelled
	}
	return 0
}

func (m *JobSetInfo) GetRunningStats() *DurationStats {
	if m != nil {
		return m.RunningStats
	}
	return nil
}

func (m *JobSetInfo) GetQueuedStats() *DurationStats {
	if m != nil {
		return m.QueuedStats
	}
	return nil
}

func (m *JobSetInfo) GetSubmitted() *time.Time {
	if m != nil {
		return m.Submitted
	}
	return nil
}

type DurationStats struct {
	Shortest *types.Duration `protobuf:"bytes,1,opt,name=shortest,proto3" json:"shortest,omitempty"`
	Longest  *types.Duration `protobuf:"bytes,2,opt,name=longest,proto3" json:"longest,omitempty"`
	Average  *types.Duration `protobuf:"bytes,3,opt,name=average,proto3" json:"average,omitempty"`
	Median   *types.Duration `protobuf:"bytes,4,opt,name=median,proto3" json:"median,omitempty"`
	Q1       *types.Duration `protobuf:"bytes,5,opt,name=q1,proto3" json:"q1,omitempty"`
	Q3       *types.Duration `protobuf:"bytes,6,opt,name=q3,proto3" json:"q3,omitempty"`
}

func (m *DurationStats) Reset()      { *m = DurationStats{} }
func (*DurationStats) ProtoMessage() {}
func (*DurationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{5}
}
func (m *DurationStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DurationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DurationStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DurationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DurationStats.Merge(m, src)
}
func (m *DurationStats) XXX_Size() int {
	return m.Size()
}
func (m *DurationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DurationStats.DiscardUnknown(m)
}

var xxx_messageInfo_DurationStats proto.InternalMessageInfo

func (m *DurationStats) GetShortest() *types.Duration {
	if m != nil {
		return m.Shortest
	}
	return nil
}

func (m *DurationStats) GetLongest() *types.Duration {
	if m != nil {
		return m.Longest
	}
	return nil
}

func (m *DurationStats) GetAverage() *types.Duration {
	if m != nil {
		return m.Average
	}
	return nil
}

func (m *DurationStats) GetMedian() *types.Duration {
	if m != nil {
		return m.Median
	}
	return nil
}

func (m *DurationStats) GetQ1() *types.Duration {
	if m != nil {
		return m.Q1
	}
	return nil
}

func (m *DurationStats) GetQ3() *types.Duration {
	if m != nil {
		return m.Q3
	}
	return nil
}

type GetJobSetsRequest struct {
	Queue       string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	NewestFirst bool   `protobuf:"varint,2,opt,name=newest_first,json=newestFirst,proto3" json:"newestFirst,omitempty"`
	ActiveOnly  bool   `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"activeOnly,omitempty"`
}

func (m *GetJobSetsRequest) Reset()      { *m = GetJobSetsRequest{} }
func (*GetJobSetsRequest) ProtoMessage() {}
func (*GetJobSetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{6}
}
func (m *GetJobSetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobSetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobSetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobSetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobSetsRequest.Merge(m, src)
}
func (m *GetJobSetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobSetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobSetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobSetsRequest proto.InternalMessageInfo

func (m *GetJobSetsRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *GetJobSetsRequest) GetNewestFirst() bool {
	if m != nil {
		return m.NewestFirst
	}
	return false
}

func (m *GetJobSetsRequest) GetActiveOnly() bool {
	if m != nil {
		return m.ActiveOnly
	}
	return false
}

type GetJobSetsResponse struct {
	JobSetInfos []*JobSetInfo `protobuf:"bytes,1,rep,name=job_set_infos,json=jobSetInfos,proto3" json:"jobSetInfos,omitempty"`
}

func (m *GetJobSetsResponse) Reset()      { *m = GetJobSetsResponse{} }
func (*GetJobSetsResponse) ProtoMessage() {}
func (*GetJobSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{7}
}
func (m *GetJobSetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobSetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobSetsResponse.Merge(m, src)
}
func (m *GetJobSetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJobSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobSetsResponse proto.InternalMessageInfo

func (m *GetJobSetsResponse) GetJobSetInfos() []*JobSetInfo {
	if m != nil {
		return m.JobSetInfos
	}
	return nil
}

type GetJobsRequest struct {
	Queue           string            `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	NewestFirst     bool              `protobuf:"varint,2,opt,name=newest_first,json=newestFirst,proto3" json:"newestFirst,omitempty"`
	JobStates       []string          `protobuf:"bytes,3,rep,name=job_states,json=jobStates,proto3" json:"jobStates,omitempty"`
	JobSetIds       []string          `protobuf:"bytes,4,rep,name=job_set_ids,json=jobSetIds,proto3" json:"jobSetIds,omitempty"`
	Take            uint32            `protobuf:"varint,5,opt,name=take,proto3" json:"take,omitempty"`
	Skip            uint32            `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
	JobId           string            `protobuf:"bytes,7,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Owner           string            `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	UserAnnotations map[string]string `protobuf:"bytes,9,rep,name=user_annotations,json=userAnnotations,proto3" json:"userAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetJobsRequest) Reset()      { *m = GetJobsRequest{} }
func (*GetJobsRequest) ProtoMessage() {}
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{8}
}
func (m *GetJobsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobsRequest.Merge(m, src)
}
func (m *GetJobsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobsRequest proto.InternalMessageInfo

func (m *GetJobsRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *GetJobsRequest) GetNewestFirst() bool {
	if m != nil {
		return m.NewestFirst
	}
	return false
}

func (m *GetJobsRequest) GetJobStates() []string {
	if m != nil {
		return m.JobStates
	}
	return nil
}

func (m *GetJobsRequest) GetJobSetIds() []string {
	if m != nil {
		return m.JobSetIds
	}
	return nil
}

func (m *GetJobsRequest) GetTake() uint32 {
	if m != nil {
		return m.Take
	}
	return 0
}

func (m *GetJobsRequest) GetSkip() uint32 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *GetJobsRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *GetJobsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GetJobsRequest) GetUserAnnotations() map[string]string {
	if m != nil {
		return m.UserAnnotations
	}
	return nil
}

type GetJobsResponse struct {
	JobInfos []*JobInfo `protobuf:"bytes,1,rep,name=job_infos,json=jobInfos,proto3" json:"jobInfos,omitempty"`
}

func (m *GetJobsResponse) Reset()      { *m = GetJobsResponse{} }
func (*GetJobsResponse) ProtoMessage() {}
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{9}
}
func (m *GetJobsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobsResponse.Merge(m, src)
}
func (m *GetJobsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobsResponse proto.InternalMessageInfo

func (m *GetJobsResponse) GetJobInfos() []*JobInfo {
	if m != nil {
		return m.JobInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*SystemOverview)(nil), "lookout.SystemOverview")
	proto.RegisterType((*JobInfo)(nil), "lookout.JobInfo")
	proto.RegisterType((*RunInfo)(nil), "lookout.RunInfo")
	proto.RegisterType((*QueueInfo)(nil), "lookout.QueueInfo")
	proto.RegisterType((*JobSetInfo)(nil), "lookout.JobSetInfo")
	proto.RegisterType((*DurationStats)(nil), "lookout.DurationStats")
	proto.RegisterType((*GetJobSetsRequest)(nil), "lookout.GetJobSetsRequest")
	proto.RegisterType((*GetJobSetsResponse)(nil), "lookout.GetJobSetsResponse")
	proto.RegisterType((*GetJobsRequest)(nil), "lookout.GetJobsRequest")
	proto.RegisterMapType((map[string]string)(nil), "lookout.GetJobsRequest.UserAnnotationsEntry")
	proto.RegisterType((*GetJobsResponse)(nil), "lookout.GetJobsResponse")
}

func init() { proto.RegisterFile("pkg/api/lookout/lookout.proto", fileDescriptor_6ee7620a6fb9cfb1) }

var fileDescriptor_6ee7620a6fb9cfb1 = []byte{
	// 1295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x37, 0x25, 0x5b, 0x12, 0x47, 0x71, 0xe2, 0x6c, 0xfc, 0xb7, 0x19, 0x25, 0x91, 0x1d, 0xe2,
	0x5f, 0xc0, 0x0d, 0x12, 0x19, 0xb6, 0x51, 0xd4, 0x70, 0x83, 0x22, 0x71, 0x9b, 0x14, 0x36, 0xda,
	0x26, 0xa5, 0x53, 0xf4, 0x14, 0x08, 0xa4, 0xb8, 0x96, 0x29, 0x51, 0xbb, 0x32, 0x77, 0xe9, 0xc0,
	0xb7, 0xa2, 0x4f, 0x10, 0xa0, 0x6f, 0xd1, 0x43, 0x0f, 0xbd, 0xf5, 0x09, 0x1a, 0xa0, 0x97, 0x00,
	0xbd, 0xe4, 0xd4, 0x0f, 0xa7, 0x2f, 0xd1, 0x5b, 0xb1, 0xb3, 0x4b, 0xea, 0xc3, 0x8e, 0x0c, 0xa3,
	0x27, 0x72, 0x67, 0x7e, 0xf3, 0xb1, 0x33, 0xf3, 0xdb, 0x5d, 0xb8, 0xd5, 0xef, 0xb6, 0x57, 0xfd,
	0x7e, 0xb4, 0x1a, 0x73, 0xde, 0xe5, 0xa9, 0xcc, 0xbe, 0x8d, 0x7e, 0xc2, 0x25, 0x27, 0x65, 0xb3,
	0xac, 0x2d, 0xb5, 0x39, 0x6f, 0xc7, 0x74, 0x15, 0xc5, 0x41, 0xba, 0xbf, 0x2a, 0xa3, 0x1e, 0x15,
	0xd2, 0xef, 0xf5, 0x35, 0xb2, 0x56, 0x1f, 0x07, 0x84, 0x69, 0xe2, 0xcb, 0x88, 0x33, 0xa3, 0xbf,
	0x31, 0xae, 0xa7, 0xbd, 0xbe, 0x3c, 0x36, 0xca, 0x9b, 0x46, 0xa9, 0x12, 0xf1, 0x19, 0xe3, 0x12,
	0x2d, 0x85, 0xd1, 0xde, 0x6b, 0x47, 0xf2, 0x20, 0x0d, 0x1a, 0x2d, 0xde, 0x5b, 0x6d, 0xf3, 0x36,
	0x1f, 0xf8, 0x50, 0x2b, 0x5c, 0xe0, 0x9f, 0x81, 0x5f, 0xcb, 0xb6, 0x74, 0x98, 0xd2, 0x94, 0x6a,
	0xa1, 0x7b, 0x1f, 0x2e, 0xef, 0x1d, 0x0b, 0x49, 0x7b, 0x4f, 0x8e, 0x68, 0x72, 0x14, 0xd1, 0x17,
	0xe4, 0x0e, 0x94, 0x10, 0x20, 0x1c, 0x6b, 0xb9, 0xb8, 0x52, 0x5d, 0x27, 0x8d, 0x6c, 0xeb, 0x5f,
	0x29, 0xf1, 0x0e, 0xdb, 0xe7, 0x9e, 0x41, 0xb8, 0xbf, 0x58, 0x50, 0xde, 0xe5, 0x81, 0x92, 0x91,
	0x1a, 0x14, 0x3b, 0x3c, 0x70, 0xac, 0x65, 0x6b, 0xa5, 0xba, 0x5e, 0x69, 0xf8, 0xfd, 0xa8, 0xb1,
	0xcb, 0x03, 0x4f, 0x09, 0xc9, 0xff, 0x61, 0x3a, 0x49, 0x99, 0x70, 0x0a, 0xe8, 0x71, 0x2e, 0xf7,
	0xe8, 0xa5, 0x0c, 0xfd, 0xa1, 0x96, 0x6c, 0x83, 0xdd, 0xf2, 0x59, 0x8b, 0xc6, 0x31, 0x0d, 0x9d,
	0x22, 0xfa, 0xa9, 0x35, 0x74, 0x05, 0x1a, 0xd9, 0xd6, 0x1a, 0xcf, 0xb2, 0xfa, 0x6e, 0x57, 0x5e,
	0xfd, 0xbe, 0x64, 0xbd, 0xfc, 0x63, 0xc9, 0xf2, 0x06, 0x66, 0xe4, 0x06, 0xd8, 0x1d, 0x1e, 0x34,
	0x85, 0xf4, 0x25, 0x75, 0xa6, 0x97, 0xad, 0x15, 0xdb, 0xab, 0x74, 0x78, 0xb0, 0xa7, 0xd6, 0xe4,
	0x3a, 0xa8, 0xff, 0x66, 0x47, 0x70, 0xe6, 0xcc, 0xa0, 0xae, 0xdc, 0xe1, 0xc1, 0xae, 0xe0, 0xcc,
	0xfd, 0xb1, 0x08, 0x65, 0x93, 0x0d, 0xf9, 0x1f, 0x94, 0xba, 0x9b, 0xa2, 0x19, 0x85, 0xb8, 0x19,
	0xdb, 0x9b, 0xe9, 0x6e, 0x8a, 0x9d, 0x90, 0x38, 0x50, 0x6e, 0xc5, 0xa9, 0x90, 0x34, 0x71, 0x0a,
	0xda, 0xd8, 0x2c, 0x09, 0x81, 0x69, 0xc6, 0x43, 0x8a, 0x39, 0xdb, 0x1e, 0xfe, 0x93, 0x9b, 0x60,
	0x8b, 0xb4, 0xd5, 0xa2, 0x34, 0xa4, 0x21, 0x26, 0x52, 0xf1, 0x06, 0x02, 0x32, 0x0f, 0x33, 0x34,
	0x49, 0x78, 0x62, 0xd2, 0xd0, 0x0b, 0xf2, 0x31, 0x94, 0x5b, 0x09, 0xf5, 0x25, 0x0d, 0x9d, 0xd2,
	0x05, 0xb6, 0x9f, 0x19, 0x29, 0x7b, 0x21, 0xfd, 0x44, 0xd9, 0x97, 0x2f, 0x62, 0x6f, 0x8c, 0xc8,
	0x03, 0xa8, 0xec, 0x47, 0x2c, 0x12, 0x07, 0x34, 0x74, 0x2a, 0x17, 0x70, 0x90, 0x5b, 0x91, 0x5b,
	0x00, 0x7d, 0x1e, 0x36, 0x59, 0xda, 0x0b, 0x68, 0xe2, 0xd8, 0xcb, 0xd6, 0xca, 0x8c, 0x67, 0xf7,
	0x79, 0xf8, 0x25, 0x0a, 0x54, 0x77, 0x92, 0x94, 0x99, 0xee, 0x80, 0xee, 0x4e, 0x92, 0x32, 0xdd,
	0x9d, 0xbb, 0x40, 0x52, 0xe6, 0x07, 0x31, 0x6d, 0x4a, 0xde, 0x14, 0xad, 0x03, 0x1a, 0xa6, 0x31,
	0x75, 0xaa, 0x58, 0xba, 0x39, 0xad, 0x79, 0xc6, 0xf7, 0x8c, 0x5c, 0x35, 0xcc, 0xce, 0x07, 0x52,
	0xd5, 0x13, 0x47, 0x32, 0xeb, 0x18, 0x2e, 0xc8, 0x12, 0x54, 0x3b, 0x3c, 0x10, 0x4d, 0x5c, 0x85,
	0xd8, 0xb5, 0x59, 0x0f, 0x94, 0x08, 0x2d, 0x43, 0x72, 0x1b, 0x2e, 0x21, 0xa0, 0x4f, 0x59, 0x18,
	0xb1, 0x36, 0x36, 0x70, 0xd6, 0x43, 0xa3, 0xa7, 0x5a, 0x94, 0x43, 0x92, 0x94, 0x31, 0x05, 0x99,
	0x1e, 0x40, 0x3c, 0x2d, 0x22, 0xf7, 0xe1, 0x2a, 0x8f, 0x43, 0x2a, 0xa4, 0x09, 0xd4, 0x54, 0x3c,
	0x98, 0xc1, 0xfa, 0x0d, 0x46, 0xdd, 0xd0, 0xc4, 0xbb, 0xa2, 0xa1, 0x3a, 0x81, 0x5d, 0x1e, 0x90,
	0x07, 0x70, 0x2d, 0xe6, 0xac, 0xad, 0xcc, 0x4d, 0x0c, 0xb4, 0x2f, 0xbd, 0xc3, 0xfe, 0xaa, 0x01,
	0x9b, 0xe0, 0xca, 0xc3, 0x13, 0x58, 0x18, 0x8d, 0x9f, 0x1d, 0x31, 0x66, 0x0a, 0xae, 0x9f, 0x6a,
	0xe2, 0xa7, 0x06, 0xe0, 0xcd, 0x0f, 0x67, 0x93, 0x49, 0xc9, 0x1e, 0x38, 0xe3, 0x29, 0xe5, 0x2e,
	0x2b, 0xe7, 0xb9, 0x5c, 0x18, 0x4d, 0x30, 0x93, 0xbb, 0xbf, 0x16, 0x01, 0x76, 0x79, 0xb0, 0x47,
	0xe5, 0x84, 0x8e, 0x2d, 0x42, 0x19, 0xe9, 0x4b, 0xa5, 0xe1, 0x58, 0xa9, 0x83, 0x26, 0xe3, 0xad,
	0x2c, 0x9e, 0xdb, 0xca, 0xe9, 0xf3, 0x5b, 0x39, 0x73, 0xba, 0x95, 0xef, 0xc1, 0x65, 0x84, 0x0c,
	0xa8, 0x5b, 0x42, 0xd0, 0xac, 0x92, 0xee, 0xe5, 0xf4, 0xcd, 0xb2, 0xd9, 0xf7, 0xa3, 0xd8, 0x90,
	0xcd, 0x64, 0xf3, 0x18, 0x25, 0xb9, 0x9f, 0xc1, 0x79, 0x56, 0x19, 0xf8, 0xf9, 0x24, 0x3f, 0xad,
	0xb6, 0xe0, 0x92, 0x49, 0x46, 0x51, 0x40, 0x20, 0x61, 0xaa, 0xeb, 0x0b, 0x79, 0xd3, 0xb3, 0xe2,
	0xa1, 0xd6, 0x1b, 0xc1, 0x92, 0x4d, 0xa8, 0xea, 0x62, 0x68, 0x53, 0x98, 0x68, 0x3a, 0x0c, 0x55,
	0xe7, 0xac, 0x48, 0x83, 0x5e, 0x24, 0xd5, 0x41, 0x51, 0xbd, 0xc8, 0x39, 0x9b, 0x9b, 0xb9, 0x3f,
	0x17, 0x60, 0x76, 0x24, 0x04, 0xf9, 0x00, 0x2a, 0xe2, 0x80, 0x27, 0x92, 0x0a, 0x69, 0x2e, 0x81,
	0x09, 0x43, 0x92, 0x43, 0xc9, 0x06, 0x94, 0xcd, 0xc0, 0x60, 0xc7, 0x27, 0x5a, 0x65, 0x48, 0x65,
	0xe4, 0x1f, 0xd1, 0xc4, 0x6f, 0x53, 0x73, 0x4f, 0x4c, 0x32, 0x32, 0x48, 0xb2, 0x06, 0xa5, 0x1e,
	0x0d, 0x23, 0x9f, 0xe1, 0x6c, 0x4c, 0xb4, 0x31, 0x40, 0xf2, 0x3e, 0x14, 0x0e, 0xd7, 0x0c, 0x95,
	0x27, 0xc0, 0x0b, 0x87, 0x6b, 0x08, 0xdd, 0x30, 0xac, 0x9d, 0x08, 0xdd, 0x70, 0x7b, 0x70, 0xf5,
	0x33, 0x2a, 0x35, 0x17, 0x84, 0x47, 0x0f, 0x53, 0xb5, 0xa5, 0xb3, 0xf9, 0x70, 0x1b, 0x2e, 0x31,
	0xfa, 0x42, 0x11, 0x71, 0x3f, 0x4a, 0x4c, 0x89, 0x2a, 0x5e, 0x55, 0xcb, 0x1e, 0x2b, 0x91, 0x9a,
	0x45, 0xbf, 0x25, 0xa3, 0x23, 0xda, 0xe4, 0x2c, 0x3e, 0xc6, 0x7a, 0x54, 0x3c, 0xd0, 0xa2, 0x27,
	0x2c, 0x3e, 0x76, 0xbf, 0x00, 0x32, 0x1c, 0x4e, 0xf4, 0x39, 0x13, 0x94, 0x7c, 0x08, 0xb3, 0x86,
	0x69, 0xcd, 0x88, 0xed, 0xf3, 0xec, 0xb6, 0xbf, 0x36, 0x7c, 0xe0, 0x18, 0xae, 0x22, 0x45, 0xcc,
	0xbf, 0x70, 0xff, 0x29, 0xc0, 0x65, 0xed, 0xef, 0xbf, 0xe7, 0x7e, 0x0b, 0x20, 0xbf, 0xad, 0x85,
	0x53, 0x5c, 0x2e, 0xae, 0xd8, 0x9e, 0x9d, 0x5d, 0xd7, 0x82, 0xd4, 0x91, 0x66, 0x3a, 0xc7, 0x50,
	0x38, 0xd3, 0x03, 0x3d, 0x95, 0x3b, 0xa1, 0x50, 0xf7, 0xae, 0xf4, 0xbb, 0xd4, 0x10, 0x19, 0xff,
	0x95, 0x4c, 0x74, 0xa3, 0xbe, 0xe1, 0x2d, 0xfe, 0xab, 0xfc, 0x3a, 0x3c, 0xd8, 0xd1, 0x44, 0xb5,
	0x3d, 0xbd, 0x50, 0x52, 0xfe, 0x82, 0xd1, 0x04, 0xa9, 0x69, 0x7b, 0x7a, 0x41, 0xbe, 0x81, 0xb9,
	0x54, 0xd0, 0xa4, 0x39, 0xf4, 0xdc, 0x72, 0x6c, 0x2c, 0xcd, 0xdd, 0xbc, 0x34, 0xa3, 0xdb, 0x6f,
	0x7c, 0x2d, 0x68, 0xf2, 0x70, 0x00, 0x7f, 0xc4, 0x64, 0x72, 0xec, 0x5d, 0x49, 0x47, 0xa5, 0xb5,
	0x6d, 0x98, 0x3f, 0x0b, 0x48, 0xe6, 0xa0, 0xd8, 0xa5, 0xc7, 0xa6, 0x74, 0xea, 0x57, 0x25, 0x76,
	0xe4, 0xc7, 0x29, 0x35, 0x47, 0xa0, 0x5e, 0x6c, 0x15, 0x36, 0x2d, 0xf7, 0x01, 0x5c, 0xc9, 0x63,
	0x9b, 0x3e, 0xde, 0xd3, 0x0f, 0x9e, 0xe1, 0x1e, 0x9e, 0xbe, 0x34, 0xd4, 0xb3, 0x07, 0xbb, 0xb7,
	0xfe, 0x53, 0x01, 0xca, 0x9f, 0x6b, 0x2d, 0x79, 0x0e, 0x95, 0xfc, 0xd5, 0xb7, 0x70, 0x6a, 0x64,
	0x1f, 0xa9, 0x77, 0x68, 0x6d, 0x31, 0xf7, 0x35, 0xfa, 0x4c, 0x74, 0x97, 0xbf, 0xfb, 0xed, 0xef,
	0xef, 0x0b, 0x35, 0xe2, 0xe0, 0x93, 0xf2, 0x68, 0x2d, 0x7f, 0x28, 0xf3, 0xcc, 0x65, 0x04, 0x30,
	0x98, 0x3b, 0x52, 0x1b, 0xab, 0xde, 0xd0, 0xec, 0xd7, 0x6e, 0x9c, 0xa9, 0xd3, 0x1b, 0x74, 0x5d,
	0x0c, 0x74, 0xd3, 0x5d, 0x1c, 0x0f, 0xa4, 0x8e, 0x52, 0x2a, 0xc5, 0x96, 0x75, 0x87, 0x3c, 0x87,
	0xb2, 0xa9, 0x0b, 0x59, 0x7c, 0x47, 0x97, 0x6a, 0xce, 0x69, 0x85, 0x89, 0xb0, 0x84, 0x11, 0xae,
	0xbb, 0xf3, 0x67, 0x45, 0xd8, 0xb2, 0xee, 0x6c, 0x7f, 0xf4, 0xe6, 0xaf, 0xfa, 0xd4, 0xb7, 0x27,
	0x75, 0xeb, 0xd5, 0x49, 0xdd, 0x7a, 0x7d, 0x52, 0xb7, 0xfe, 0x3c, 0xa9, 0x5b, 0x2f, 0xdf, 0xd6,
	0xa7, 0x5e, 0xbf, 0xad, 0x4f, 0xbd, 0x79, 0x5b, 0x9f, 0xfa, 0xa1, 0xe0, 0x3c, 0x4c, 0x7a, 0x7e,
	0xe8, 0x3f, 0x4d, 0x78, 0x87, 0xb6, 0x64, 0x63, 0x87, 0x37, 0x4c, 0x95, 0x83, 0x12, 0x56, 0x74,
	0xe3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x6e, 0x56, 0x43, 0x52, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LookoutClient is the client API for Lookout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LookoutClient interface {
	Overview(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SystemOverview, error)
	GetJobSets(ctx context.Context, in *GetJobSetsRequest, opts ...grpc.CallOption) (*GetJobSetsResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error)
}

type lookoutClient struct {
	cc *grpc.ClientConn
}

func NewLookoutClient(cc *grpc.ClientConn) LookoutClient {
	return &lookoutClient{cc}
}

func (c *lookoutClient) Overview(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SystemOverview, error) {
	out := new(SystemOverview)
	err := c.cc.Invoke(ctx, "/lookout.Lookout/Overview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookoutClient) GetJobSets(ctx context.Context, in *GetJobSetsRequest, opts ...grpc.CallOption) (*GetJobSetsResponse, error) {
	out := new(GetJobSetsResponse)
	err := c.cc.Invoke(ctx, "/lookout.Lookout/GetJobSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookoutClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, "/lookout.Lookout/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookoutServer is the server API for Lookout service.
type LookoutServer interface {
	Overview(context.Context, *types.Empty) (*SystemOverview, error)
	GetJobSets(context.Context, *GetJobSetsRequest) (*GetJobSetsResponse, error)
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error)
}

// UnimplementedLookoutServer can be embedded to have forward compatible implementations.
type UnimplementedLookoutServer struct {
}

func (*UnimplementedLookoutServer) Overview(ctx context.Context, req *types.Empty) (*SystemOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overview not implemented")
}
func (*UnimplementedLookoutServer) GetJobSets(ctx context.Context, req *GetJobSetsRequest) (*GetJobSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobSets not implemented")
}
func (*UnimplementedLookoutServer) GetJobs(ctx context.Context, req *GetJobsRequest) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}

func RegisterLookoutServer(s *grpc.Server, srv LookoutServer) {
	s.RegisterService(&_Lookout_serviceDesc, srv)
}

func _Lookout_Overview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookoutServer).Overview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookout.Lookout/Overview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookoutServer).Overview(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookout_GetJobSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookoutServer).GetJobSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookout.Lookout/GetJobSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookoutServer).GetJobSets(ctx, req.(*GetJobSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookout_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookoutServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookout.Lookout/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookoutServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lookout_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lookout.Lookout",
	HandlerType: (*LookoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Overview",
			Handler:    _Lookout_Overview_Handler,
		},
		{
			MethodName: "GetJobSets",
			Handler:    _Lookout_GetJobSets_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _Lookout_GetJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/lookout/lookout.proto",
}

func (m *SystemOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobJson) > 0 {
		i -= len(m.JobJson)
		copy(dAtA[i:], m.JobJson)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.JobJson)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.JobState) > 0 {
		i -= len(m.JobState)
		copy(dAtA[i:], m.JobState)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.JobState)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cancelled != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Cancelled, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Cancelled):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintLookout(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Runs) > 0 {
		for iNdEx := len(m.Runs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnableToSchedule {
		i--
		if m.UnableToSchedule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.RunState) > 0 {
		i -= len(m.RunState)
		copy(dAtA[i:], m.RunState)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.RunState)))
		i--
		dAtA[i] = 0x52
	}
	if m.PodNumber != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x48
	}
	if m.Finished != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Finished, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Finished):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintLookout(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if m.Started != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Started, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Started):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintLookout(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x3a
	}
	if m.Created != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintLookout(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.K8SId) > 0 {
		i -= len(m.K8SId)
		copy(dAtA[i:], m.K8SId)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.K8SId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LongestRunningDuration != nil {
		{
			size, err := m.LongestRunningDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.OldestQueuedDuration != nil {
		{
			size, err := m.OldestQueuedDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LongestRunningJob != nil {
		{
			size, err := m.LongestRunningJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OldestQueuedJob != nil {
		{
			size, err := m.OldestQueuedJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.JobsRunning != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsRunning))
		i--
		dAtA[i] = 0x20
	}
	if m.JobsPending != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsPending))
		i--
		dAtA[i] = 0x18
	}
	if m.JobsQueued != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsQueued))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Submitted != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Submitted, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Submitted):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintLookout(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x5a
	}
	if m.QueuedStats != nil {
		{
			size, err := m.QueuedStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RunningStats != nil {
		{
			size, err := m.RunningStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.JobsCancelled != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsCancelled))
		i--
		dAtA[i] = 0x40
	}
	if m.JobsFailed != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsFailed))
		i--
		dAtA[i] = 0x38
	}
	if m.JobsSucceeded != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsSucceeded))
		i--
		dAtA[i] = 0x30
	}
	if m.JobsRunning != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsRunning))
		i--
		dAtA[i] = 0x28
	}
	if m.JobsPending != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsPending))
		i--
		dAtA[i] = 0x20
	}
	if m.JobsQueued != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsQueued))
		i--
		dAtA[i] = 0x18
	}
	if len(m.JobSet) > 0 {
		i -= len(m.JobSet)
		copy(dAtA[i:], m.JobSet)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.JobSet)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DurationStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DurationStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Q3 != nil {
		{
			size, err := m.Q3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Q1 != nil {
		{
			size, err := m.Q1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Median != nil {
		{
			size, err := m.Median.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Average != nil {
		{
			size, err := m.Average.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Longest != nil {
		{
			size, err := m.Longest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shortest != nil {
		{
			size, err := m.Shortest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobSetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobSetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobSetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveOnly {
		i--
		if m.ActiveOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NewestFirst {
		i--
		if m.NewestFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobSetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobSetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobSetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobSetInfos) > 0 {
		for iNdEx := len(m.JobSetInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobSetInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetJobsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAnnotations) > 0 {
		for k := range m.UserAnnotations {
			v := m.UserAnnotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLookout(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLookout(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLookout(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Skip != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.Skip))
		i--
		dAtA[i] = 0x30
	}
	if m.Take != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.Take))
		i--
		dAtA[i] = 0x28
	}
	if len(m.JobSetIds) > 0 {
		for iNdEx := len(m.JobSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JobSetIds[iNdEx])
			copy(dAtA[i:], m.JobSetIds[iNdEx])
			i = encodeVarintLookout(dAtA, i, uint64(len(m.JobSetIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JobStates) > 0 {
		for iNdEx := len(m.JobStates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JobStates[iNdEx])
			copy(dAtA[i:], m.JobStates[iNdEx])
			i = encodeVarintLookout(dAtA, i, uint64(len(m.JobStates[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NewestFirst {
		i--
		if m.NewestFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobInfos) > 0 {
		for iNdEx := len(m.JobInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLookout(dAtA []byte, offset int, v uint64) int {
	offset -= sovLookout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, e := range m.Queues {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	return n
}

func (m *JobInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if len(m.Runs) > 0 {
		for _, e := range m.Runs {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	if m.Cancelled != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Cancelled)
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.JobState)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.JobJson)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *RunInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.K8SId)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Succeeded {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Created != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Started != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Started)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Finished != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Finished)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovLookout(uint64(m.PodNumber))
	}
	l = len(m.RunState)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.UnableToSchedule {
		n += 2
	}
	return n
}

func (m *QueueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.JobsQueued != 0 {
		n += 1 + sovLookout(uint64(m.JobsQueued))
	}
	if m.JobsPending != 0 {
		n += 1 + sovLookout(uint64(m.JobsPending))
	}
	if m.JobsRunning != 0 {
		n += 1 + sovLookout(uint64(m.JobsRunning))
	}
	if m.OldestQueuedJob != nil {
		l = m.OldestQueuedJob.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.LongestRunningJob != nil {
		l = m.LongestRunningJob.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.OldestQueuedDuration != nil {
		l = m.OldestQueuedDuration.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.LongestRunningDuration != nil {
		l = m.LongestRunningDuration.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *JobSetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.JobSet)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.JobsQueued != 0 {
		n += 1 + sovLookout(uint64(m.JobsQueued))
	}
	if m.JobsPending != 0 {
		n += 1 + sovLookout(uint64(m.JobsPending))
	}
	if m.JobsRunning != 0 {
		n += 1 + sovLookout(uint64(m.JobsRunning))
	}
	if m.JobsSucceeded != 0 {
		n += 1 + sovLookout(uint64(m.JobsSucceeded))
	}
	if m.JobsFailed != 0 {
		n += 1 + sovLookout(uint64(m.JobsFailed))
	}
	if m.JobsCancelled != 0 {
		n += 1 + sovLookout(uint64(m.JobsCancelled))
	}
	if m.RunningStats != nil {
		l = m.RunningStats.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.QueuedStats != nil {
		l = m.QueuedStats.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Submitted != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Submitted)
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *DurationStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shortest != nil {
		l = m.Shortest.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Longest != nil {
		l = m.Longest.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Average != nil {
		l = m.Average.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Median != nil {
		l = m.Median.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Q1 != nil {
		l = m.Q1.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Q3 != nil {
		l = m.Q3.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *GetJobSetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.NewestFirst {
		n += 2
	}
	if m.ActiveOnly {
		n += 2
	}
	return n
}

func (m *GetJobSetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobSetInfos) > 0 {
		for _, e := range m.JobSetInfos {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	return n
}

func (m *GetJobsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.NewestFirst {
		n += 2
	}
	if len(m.JobStates) > 0 {
		for _, s := range m.JobStates {
			l = len(s)
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	if len(m.JobSetIds) > 0 {
		for _, s := range m.JobSetIds {
			l = len(s)
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	if m.Take != 0 {
		n += 1 + sovLookout(uint64(m.Take))
	}
	if m.Skip != 0 {
		n += 1 + sovLookout(uint64(m.Skip))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if len(m.UserAnnotations) > 0 {
		for k, v := range m.UserAnnotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLookout(uint64(len(k))) + 1 + len(v) + sovLookout(uint64(len(v)))
			n += mapEntrySize + 1 + sovLookout(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetJobsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobInfos) > 0 {
		for _, e := range m.JobInfos {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	return n
}

func sovLookout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLookout(x uint64) (n int) {
	return sovLookout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SystemOverview) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueues := "[]*QueueInfo{"
	for _, f := range this.Queues {
		repeatedStringForQueues += strings.Replace(f.String(), "QueueInfo", "QueueInfo", 1) + ","
	}
	repeatedStringForQueues += "}"
	s := strings.Join([]string{`&SystemOverview{`,
		`Queues:` + repeatedStringForQueues + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRuns := "[]*RunInfo{"
	for _, f := range this.Runs {
		repeatedStringForRuns += strings.Replace(f.String(), "RunInfo", "RunInfo", 1) + ","
	}
	repeatedStringForRuns += "}"
	s := strings.Join([]string{`&JobInfo{`,
		`Job:` + strings.Replace(fmt.Sprintf("%v", this.Job), "Job", "api.Job", 1) + `,`,
		`Runs:` + repeatedStringForRuns + `,`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "Timestamp", "types.Timestamp", 1) + `,`,
		`JobState:` + fmt.Sprintf("%v", this.JobState) + `,`,
		`JobJson:` + fmt.Sprintf("%v", this.JobJson) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunInfo{`,
		`K8SId:` + fmt.Sprintf("%v", this.K8SId) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`Succeeded:` + fmt.Sprintf("%v", this.Succeeded) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Created:` + strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1) + `,`,
		`Started:` + strings.Replace(fmt.Sprintf("%v", this.Started), "Timestamp", "types.Timestamp", 1) + `,`,
		`Finished:` + strings.Replace(fmt.Sprintf("%v", this.Finished), "Timestamp", "types.Timestamp", 1) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`RunState:` + fmt.Sprintf("%v", this.RunState) + `,`,
		`UnableToSchedule:` + fmt.Sprintf("%v", this.UnableToSchedule) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueInfo{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`JobsQueued:` + fmt.Sprintf("%v", this.JobsQueued) + `,`,
		`JobsPending:` + fmt.Sprintf("%v", this.JobsPending) + `,`,
		`JobsRunning:` + fmt.Sprintf("%v", this.JobsRunning) + `,`,
		`OldestQueuedJob:` + strings.Replace(this.OldestQueuedJob.String(), "JobInfo", "JobInfo", 1) + `,`,
		`LongestRunningJob:` + strings.Replace(this.LongestRunningJob.String(), "JobInfo", "JobInfo", 1) + `,`,
		`OldestQueuedDuration:` + strings.Replace(fmt.Sprintf("%v", this.OldestQueuedDuration), "Duration", "types.Duration", 1) + `,`,
		`LongestRunningDuration:` + strings.Replace(fmt.Sprintf("%v", this.LongestRunningDuration), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSetInfo{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`JobSet:` + fmt.Sprintf("%v", this.JobSet) + `,`,
		`JobsQueued:` + fmt.Sprintf("%v", this.JobsQueued) + `,`,
		`JobsPending:` + fmt.Sprintf("%v", this.JobsPending) + `,`,
		`JobsRunning:` + fmt.Sprintf("%v", this.JobsRunning) + `,`,
		`JobsSucceeded:` + fmt.Sprintf("%v", this.JobsSucceeded) + `,`,
		`JobsFailed:` + fmt.Sprintf("%v", this.JobsFailed) + `,`,
		`JobsCancelled:` + fmt.Sprintf("%v", this.JobsCancelled) + `,`,
		`RunningStats:` + strings.Replace(this.RunningStats.String(), "DurationStats", "DurationStats", 1) + `,`,
		`QueuedStats:` + strings.Replace(this.QueuedStats.String(), "DurationStats", "DurationStats", 1) + `,`,
		`Submitted:` + strings.Replace(fmt.Sprintf("%v", this.Submitted), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DurationStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DurationStats{`,
		`Shortest:` + strings.Replace(fmt.Sprintf("%v", this.Shortest), "Duration", "types.Duration", 1) + `,`,
		`Longest:` + strings.Replace(fmt.Sprintf("%v", this.Longest), "Duration", "types.Duration", 1) + `,`,
		`Average:` + strings.Replace(fmt.Sprintf("%v", this.Average), "Duration", "types.Duration", 1) + `,`,
		`Median:` + strings.Replace(fmt.Sprintf("%v", this.Median), "Duration", "types.Duration", 1) + `,`,
		`Q1:` + strings.Replace(fmt.Sprintf("%v", this.Q1), "Duration", "types.Duration", 1) + `,`,
		`Q3:` + strings.Replace(fmt.Sprintf("%v", this.Q3), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobSetsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetJobSetsRequest{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`NewestFirst:` + fmt.Sprintf("%v", this.NewestFirst) + `,`,
		`ActiveOnly:` + fmt.Sprintf("%v", this.ActiveOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobSetsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobSetInfos := "[]*JobSetInfo{"
	for _, f := range this.JobSetInfos {
		repeatedStringForJobSetInfos += strings.Replace(f.String(), "JobSetInfo", "JobSetInfo", 1) + ","
	}
	repeatedStringForJobSetInfos += "}"
	s := strings.Join([]string{`&GetJobSetsResponse{`,
		`JobSetInfos:` + repeatedStringForJobSetInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobsRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForUserAnnotations := make([]string, 0, len(this.UserAnnotations))
	for k, _ := range this.UserAnnotations {
		keysForUserAnnotations = append(keysForUserAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUserAnnotations)
	mapStringForUserAnnotations := "map[string]string{"
	for _, k := range keysForUserAnnotations {
		mapStringForUserAnnotations += fmt.Sprintf("%v: %v,", k, this.UserAnnotations[k])
	}
	mapStringForUserAnnotations += "}"
	s := strings.Join([]string{`&GetJobsRequest{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`NewestFirst:` + fmt.Sprintf("%v", this.NewestFirst) + `,`,
		`JobStates:` + fmt.Sprintf("%v", this.JobStates) + `,`,
		`JobSetIds:` + fmt.Sprintf("%v", this.JobSetIds) + `,`,
		`Take:` + fmt.Sprintf("%v", this.Take) + `,`,
		`Skip:` + fmt.Sprintf("%v", this.Skip) + `,`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`UserAnnotations:` + mapStringForUserAnnotations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobInfos := "[]*JobInfo{"
	for _, f := range this.JobInfos {
		repeatedStringForJobInfos += strings.Replace(f.String(), "JobInfo", "JobInfo", 1) + ","
	}
	repeatedStringForJobInfos += "}"
	s := strings.Join([]string{`&GetJobsResponse{`,
		`JobInfos:` + repeatedStringForJobInfos + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLookout(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SystemOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, &QueueInfo{})
			if err := m.Queues[len(m.Queues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &api.Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runs = append(m.Runs, &RunInfo{})
			if err := m.Runs[len(m.Runs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cancelled == nil {
				m.Cancelled = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Cancelled, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Started == nil {
				m.Started = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Started, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Finished, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnableToSchedule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnableToSchedule = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsQueued", wireType)
			}
			m.JobsQueued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsQueued |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsPending", wireType)
			}
			m.JobsPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsPending |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsRunning", wireType)
			}
			m.JobsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsRunning |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldestQueuedJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldestQueuedJob == nil {
				m.OldestQueuedJob = &JobInfo{}
			}
			if err := m.OldestQueuedJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongestRunningJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LongestRunningJob == nil {
				m.LongestRunningJob = &JobInfo{}
			}
			if err := m.LongestRunningJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldestQueuedDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldestQueuedDuration == nil {
				m.OldestQueuedDuration = &types.Duration{}
			}
			if err := m.OldestQueuedDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongestRunningDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LongestRunningDuration == nil {
				m.LongestRunningDuration = &types.Duration{}
			}
			if err := m.LongestRunningDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsQueued", wireType)
			}
			m.JobsQueued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsQueued |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsPending", wireType)
			}
			m.JobsPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsPending |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsRunning", wireType)
			}
			m.JobsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsRunning |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsSucceeded", wireType)
			}
			m.JobsSucceeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsSucceeded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsFailed", wireType)
			}
			m.JobsFailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsFailed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsCancelled", wireType)
			}
			m.JobsCancelled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsCancelled |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunningStats == nil {
				m.RunningStats = &DurationStats{}
			}
			if err := m.RunningStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedStats == nil {
				m.QueuedStats = &DurationStats{}
			}
			if err := m.QueuedStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Submitted == nil {
				m.Submitted = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Submitted, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortest == nil {
				m.Shortest = &types.Duration{}
			}
			if err := m.Shortest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Longest == nil {
				m.Longest = &types.Duration{}
			}
			if err := m.Longest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Average", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Average == nil {
				m.Average = &types.Duration{}
			}
			if err := m.Average.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Median", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Median == nil {
				m.Median = &types.Duration{}
			}
			if err := m.Median.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q1 == nil {
				m.Q1 = &types.Duration{}
			}
			if err := m.Q1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q3 == nil {
				m.Q3 = &types.Duration{}
			}
			if err := m.Q3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobSetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobSetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobSetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewestFirst = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobSetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobSetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobSetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetInfos = append(m.JobSetInfos, &JobSetInfo{})
			if err := m.JobSetInfos[len(m.JobSetInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewestFirst = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobStates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobStates = append(m.JobStates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetIds = append(m.JobSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Take", wireType)
			}
			m.Take = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Take |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			m.Skip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAnnotations == nil {
				m.UserAnnotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLookout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLookout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLookout
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLookout
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLookout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLookout
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLookout
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLookout(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLookout
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UserAnnotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobInfos = append(m.JobInfos, &JobInfo{})
			if err := m.JobInfos[len(m.JobInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLookout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLookout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLookout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLookout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLookout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLookout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLookout = fmt.Errorf("proto: unexpected end of group")
)
