// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/submit.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/armadaproject/armada/pkg/api"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueueServiceName is the fully-qualified name of the QueueService service.
	QueueServiceName = "api.QueueService"
	// SubmitName is the fully-qualified name of the Submit service.
	SubmitName = "api.Submit"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueueServiceCreateQueueProcedure is the fully-qualified name of the QueueService's CreateQueue
	// RPC.
	QueueServiceCreateQueueProcedure = "/api.QueueService/CreateQueue"
	// QueueServiceCreateQueuesProcedure is the fully-qualified name of the QueueService's CreateQueues
	// RPC.
	QueueServiceCreateQueuesProcedure = "/api.QueueService/CreateQueues"
	// QueueServiceUpdateQueueProcedure is the fully-qualified name of the QueueService's UpdateQueue
	// RPC.
	QueueServiceUpdateQueueProcedure = "/api.QueueService/UpdateQueue"
	// QueueServiceUpdateQueuesProcedure is the fully-qualified name of the QueueService's UpdateQueues
	// RPC.
	QueueServiceUpdateQueuesProcedure = "/api.QueueService/UpdateQueues"
	// QueueServiceDeleteQueueProcedure is the fully-qualified name of the QueueService's DeleteQueue
	// RPC.
	QueueServiceDeleteQueueProcedure = "/api.QueueService/DeleteQueue"
	// QueueServiceGetQueueProcedure is the fully-qualified name of the QueueService's GetQueue RPC.
	QueueServiceGetQueueProcedure = "/api.QueueService/GetQueue"
	// QueueServiceGetQueuesProcedure is the fully-qualified name of the QueueService's GetQueues RPC.
	QueueServiceGetQueuesProcedure = "/api.QueueService/GetQueues"
	// SubmitSubmitJobsProcedure is the fully-qualified name of the Submit's SubmitJobs RPC.
	SubmitSubmitJobsProcedure = "/api.Submit/SubmitJobs"
	// SubmitCancelJobsProcedure is the fully-qualified name of the Submit's CancelJobs RPC.
	SubmitCancelJobsProcedure = "/api.Submit/CancelJobs"
	// SubmitCancelJobSetProcedure is the fully-qualified name of the Submit's CancelJobSet RPC.
	SubmitCancelJobSetProcedure = "/api.Submit/CancelJobSet"
	// SubmitReprioritizeJobsProcedure is the fully-qualified name of the Submit's ReprioritizeJobs RPC.
	SubmitReprioritizeJobsProcedure = "/api.Submit/ReprioritizeJobs"
	// SubmitPreemptJobsProcedure is the fully-qualified name of the Submit's PreemptJobs RPC.
	SubmitPreemptJobsProcedure = "/api.Submit/PreemptJobs"
	// SubmitCreateQueueProcedure is the fully-qualified name of the Submit's CreateQueue RPC.
	SubmitCreateQueueProcedure = "/api.Submit/CreateQueue"
	// SubmitCreateQueuesProcedure is the fully-qualified name of the Submit's CreateQueues RPC.
	SubmitCreateQueuesProcedure = "/api.Submit/CreateQueues"
	// SubmitUpdateQueueProcedure is the fully-qualified name of the Submit's UpdateQueue RPC.
	SubmitUpdateQueueProcedure = "/api.Submit/UpdateQueue"
	// SubmitUpdateQueuesProcedure is the fully-qualified name of the Submit's UpdateQueues RPC.
	SubmitUpdateQueuesProcedure = "/api.Submit/UpdateQueues"
	// SubmitDeleteQueueProcedure is the fully-qualified name of the Submit's DeleteQueue RPC.
	SubmitDeleteQueueProcedure = "/api.Submit/DeleteQueue"
	// SubmitGetQueueProcedure is the fully-qualified name of the Submit's GetQueue RPC.
	SubmitGetQueueProcedure = "/api.Submit/GetQueue"
	// SubmitGetQueuesProcedure is the fully-qualified name of the Submit's GetQueues RPC.
	SubmitGetQueuesProcedure = "/api.Submit/GetQueues"
	// SubmitHealthProcedure is the fully-qualified name of the Submit's Health RPC.
	SubmitHealthProcedure = "/api.Submit/Health"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	queueServiceServiceDescriptor            = api.File_api_submit_proto.Services().ByName("QueueService")
	queueServiceCreateQueueMethodDescriptor  = queueServiceServiceDescriptor.Methods().ByName("CreateQueue")
	queueServiceCreateQueuesMethodDescriptor = queueServiceServiceDescriptor.Methods().ByName("CreateQueues")
	queueServiceUpdateQueueMethodDescriptor  = queueServiceServiceDescriptor.Methods().ByName("UpdateQueue")
	queueServiceUpdateQueuesMethodDescriptor = queueServiceServiceDescriptor.Methods().ByName("UpdateQueues")
	queueServiceDeleteQueueMethodDescriptor  = queueServiceServiceDescriptor.Methods().ByName("DeleteQueue")
	queueServiceGetQueueMethodDescriptor     = queueServiceServiceDescriptor.Methods().ByName("GetQueue")
	queueServiceGetQueuesMethodDescriptor    = queueServiceServiceDescriptor.Methods().ByName("GetQueues")
	submitServiceDescriptor                  = api.File_api_submit_proto.Services().ByName("Submit")
	submitSubmitJobsMethodDescriptor         = submitServiceDescriptor.Methods().ByName("SubmitJobs")
	submitCancelJobsMethodDescriptor         = submitServiceDescriptor.Methods().ByName("CancelJobs")
	submitCancelJobSetMethodDescriptor       = submitServiceDescriptor.Methods().ByName("CancelJobSet")
	submitReprioritizeJobsMethodDescriptor   = submitServiceDescriptor.Methods().ByName("ReprioritizeJobs")
	submitPreemptJobsMethodDescriptor        = submitServiceDescriptor.Methods().ByName("PreemptJobs")
	submitCreateQueueMethodDescriptor        = submitServiceDescriptor.Methods().ByName("CreateQueue")
	submitCreateQueuesMethodDescriptor       = submitServiceDescriptor.Methods().ByName("CreateQueues")
	submitUpdateQueueMethodDescriptor        = submitServiceDescriptor.Methods().ByName("UpdateQueue")
	submitUpdateQueuesMethodDescriptor       = submitServiceDescriptor.Methods().ByName("UpdateQueues")
	submitDeleteQueueMethodDescriptor        = submitServiceDescriptor.Methods().ByName("DeleteQueue")
	submitGetQueueMethodDescriptor           = submitServiceDescriptor.Methods().ByName("GetQueue")
	submitGetQueuesMethodDescriptor          = submitServiceDescriptor.Methods().ByName("GetQueues")
	submitHealthMethodDescriptor             = submitServiceDescriptor.Methods().ByName("Health")
)

// QueueServiceClient is a client for the api.QueueService service.
type QueueServiceClient interface {
	CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error)
	UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error)
	DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error)
	GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest]) (*connect.ServerStreamForClient[api.StreamingQueueMessage], error)
}

// NewQueueServiceClient constructs a client for the api.QueueService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queueServiceClient{
		createQueue: connect.NewClient[api.Queue, emptypb.Empty](
			httpClient,
			baseURL+QueueServiceCreateQueueProcedure,
			connect.WithSchema(queueServiceCreateQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createQueues: connect.NewClient[api.QueueList, api.BatchQueueCreateResponse](
			httpClient,
			baseURL+QueueServiceCreateQueuesProcedure,
			connect.WithSchema(queueServiceCreateQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateQueue: connect.NewClient[api.Queue, emptypb.Empty](
			httpClient,
			baseURL+QueueServiceUpdateQueueProcedure,
			connect.WithSchema(queueServiceUpdateQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateQueues: connect.NewClient[api.QueueList, api.BatchQueueUpdateResponse](
			httpClient,
			baseURL+QueueServiceUpdateQueuesProcedure,
			connect.WithSchema(queueServiceUpdateQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteQueue: connect.NewClient[api.QueueDeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+QueueServiceDeleteQueueProcedure,
			connect.WithSchema(queueServiceDeleteQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getQueue: connect.NewClient[api.QueueGetRequest, api.Queue](
			httpClient,
			baseURL+QueueServiceGetQueueProcedure,
			connect.WithSchema(queueServiceGetQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getQueues: connect.NewClient[api.StreamingQueueGetRequest, api.StreamingQueueMessage](
			httpClient,
			baseURL+QueueServiceGetQueuesProcedure,
			connect.WithSchema(queueServiceGetQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// queueServiceClient implements QueueServiceClient.
type queueServiceClient struct {
	createQueue  *connect.Client[api.Queue, emptypb.Empty]
	createQueues *connect.Client[api.QueueList, api.BatchQueueCreateResponse]
	updateQueue  *connect.Client[api.Queue, emptypb.Empty]
	updateQueues *connect.Client[api.QueueList, api.BatchQueueUpdateResponse]
	deleteQueue  *connect.Client[api.QueueDeleteRequest, emptypb.Empty]
	getQueue     *connect.Client[api.QueueGetRequest, api.Queue]
	getQueues    *connect.Client[api.StreamingQueueGetRequest, api.StreamingQueueMessage]
}

// CreateQueue calls api.QueueService.CreateQueue.
func (c *queueServiceClient) CreateQueue(ctx context.Context, req *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return c.createQueue.CallUnary(ctx, req)
}

// CreateQueues calls api.QueueService.CreateQueues.
func (c *queueServiceClient) CreateQueues(ctx context.Context, req *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error) {
	return c.createQueues.CallUnary(ctx, req)
}

// UpdateQueue calls api.QueueService.UpdateQueue.
func (c *queueServiceClient) UpdateQueue(ctx context.Context, req *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return c.updateQueue.CallUnary(ctx, req)
}

// UpdateQueues calls api.QueueService.UpdateQueues.
func (c *queueServiceClient) UpdateQueues(ctx context.Context, req *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error) {
	return c.updateQueues.CallUnary(ctx, req)
}

// DeleteQueue calls api.QueueService.DeleteQueue.
func (c *queueServiceClient) DeleteQueue(ctx context.Context, req *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteQueue.CallUnary(ctx, req)
}

// GetQueue calls api.QueueService.GetQueue.
func (c *queueServiceClient) GetQueue(ctx context.Context, req *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error) {
	return c.getQueue.CallUnary(ctx, req)
}

// GetQueues calls api.QueueService.GetQueues.
func (c *queueServiceClient) GetQueues(ctx context.Context, req *connect.Request[api.StreamingQueueGetRequest]) (*connect.ServerStreamForClient[api.StreamingQueueMessage], error) {
	return c.getQueues.CallServerStream(ctx, req)
}

// QueueServiceHandler is an implementation of the api.QueueService service.
type QueueServiceHandler interface {
	CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error)
	UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error)
	DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error)
	GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest], *connect.ServerStream[api.StreamingQueueMessage]) error
}

// NewQueueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueueServiceHandler(svc QueueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queueServiceCreateQueueHandler := connect.NewUnaryHandler(
		QueueServiceCreateQueueProcedure,
		svc.CreateQueue,
		connect.WithSchema(queueServiceCreateQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceCreateQueuesHandler := connect.NewUnaryHandler(
		QueueServiceCreateQueuesProcedure,
		svc.CreateQueues,
		connect.WithSchema(queueServiceCreateQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceUpdateQueueHandler := connect.NewUnaryHandler(
		QueueServiceUpdateQueueProcedure,
		svc.UpdateQueue,
		connect.WithSchema(queueServiceUpdateQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceUpdateQueuesHandler := connect.NewUnaryHandler(
		QueueServiceUpdateQueuesProcedure,
		svc.UpdateQueues,
		connect.WithSchema(queueServiceUpdateQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceDeleteQueueHandler := connect.NewUnaryHandler(
		QueueServiceDeleteQueueProcedure,
		svc.DeleteQueue,
		connect.WithSchema(queueServiceDeleteQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceGetQueueHandler := connect.NewUnaryHandler(
		QueueServiceGetQueueProcedure,
		svc.GetQueue,
		connect.WithSchema(queueServiceGetQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceGetQueuesHandler := connect.NewServerStreamHandler(
		QueueServiceGetQueuesProcedure,
		svc.GetQueues,
		connect.WithSchema(queueServiceGetQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.QueueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueueServiceCreateQueueProcedure:
			queueServiceCreateQueueHandler.ServeHTTP(w, r)
		case QueueServiceCreateQueuesProcedure:
			queueServiceCreateQueuesHandler.ServeHTTP(w, r)
		case QueueServiceUpdateQueueProcedure:
			queueServiceUpdateQueueHandler.ServeHTTP(w, r)
		case QueueServiceUpdateQueuesProcedure:
			queueServiceUpdateQueuesHandler.ServeHTTP(w, r)
		case QueueServiceDeleteQueueProcedure:
			queueServiceDeleteQueueHandler.ServeHTTP(w, r)
		case QueueServiceGetQueueProcedure:
			queueServiceGetQueueHandler.ServeHTTP(w, r)
		case QueueServiceGetQueuesProcedure:
			queueServiceGetQueuesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueueServiceHandler struct{}

func (UnimplementedQueueServiceHandler) CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.CreateQueue is not implemented"))
}

func (UnimplementedQueueServiceHandler) CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.CreateQueues is not implemented"))
}

func (UnimplementedQueueServiceHandler) UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.UpdateQueue is not implemented"))
}

func (UnimplementedQueueServiceHandler) UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.UpdateQueues is not implemented"))
}

func (UnimplementedQueueServiceHandler) DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.DeleteQueue is not implemented"))
}

func (UnimplementedQueueServiceHandler) GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.GetQueue is not implemented"))
}

func (UnimplementedQueueServiceHandler) GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest], *connect.ServerStream[api.StreamingQueueMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.QueueService.GetQueues is not implemented"))
}

// SubmitClient is a client for the api.Submit service.
type SubmitClient interface {
	SubmitJobs(context.Context, *connect.Request[api.JobSubmitRequest]) (*connect.Response[api.JobSubmitResponse], error)
	CancelJobs(context.Context, *connect.Request[api.JobCancelRequest]) (*connect.Response[api.CancellationResult], error)
	CancelJobSet(context.Context, *connect.Request[api.JobSetCancelRequest]) (*connect.Response[emptypb.Empty], error)
	ReprioritizeJobs(context.Context, *connect.Request[api.JobReprioritizeRequest]) (*connect.Response[api.JobReprioritizeResponse], error)
	PreemptJobs(context.Context, *connect.Request[api.JobPreemptRequest]) (*connect.Response[emptypb.Empty], error)
	CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error)
	UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error)
	DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error)
	GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest]) (*connect.ServerStreamForClient[api.StreamingQueueMessage], error)
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.HealthCheckResponse], error)
}

// NewSubmitClient constructs a client for the api.Submit service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubmitClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubmitClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &submitClient{
		submitJobs: connect.NewClient[api.JobSubmitRequest, api.JobSubmitResponse](
			httpClient,
			baseURL+SubmitSubmitJobsProcedure,
			connect.WithSchema(submitSubmitJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJobs: connect.NewClient[api.JobCancelRequest, api.CancellationResult](
			httpClient,
			baseURL+SubmitCancelJobsProcedure,
			connect.WithSchema(submitCancelJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJobSet: connect.NewClient[api.JobSetCancelRequest, emptypb.Empty](
			httpClient,
			baseURL+SubmitCancelJobSetProcedure,
			connect.WithSchema(submitCancelJobSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reprioritizeJobs: connect.NewClient[api.JobReprioritizeRequest, api.JobReprioritizeResponse](
			httpClient,
			baseURL+SubmitReprioritizeJobsProcedure,
			connect.WithSchema(submitReprioritizeJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		preemptJobs: connect.NewClient[api.JobPreemptRequest, emptypb.Empty](
			httpClient,
			baseURL+SubmitPreemptJobsProcedure,
			connect.WithSchema(submitPreemptJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createQueue: connect.NewClient[api.Queue, emptypb.Empty](
			httpClient,
			baseURL+SubmitCreateQueueProcedure,
			connect.WithSchema(submitCreateQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createQueues: connect.NewClient[api.QueueList, api.BatchQueueCreateResponse](
			httpClient,
			baseURL+SubmitCreateQueuesProcedure,
			connect.WithSchema(submitCreateQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateQueue: connect.NewClient[api.Queue, emptypb.Empty](
			httpClient,
			baseURL+SubmitUpdateQueueProcedure,
			connect.WithSchema(submitUpdateQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateQueues: connect.NewClient[api.QueueList, api.BatchQueueUpdateResponse](
			httpClient,
			baseURL+SubmitUpdateQueuesProcedure,
			connect.WithSchema(submitUpdateQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteQueue: connect.NewClient[api.QueueDeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+SubmitDeleteQueueProcedure,
			connect.WithSchema(submitDeleteQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getQueue: connect.NewClient[api.QueueGetRequest, api.Queue](
			httpClient,
			baseURL+SubmitGetQueueProcedure,
			connect.WithSchema(submitGetQueueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getQueues: connect.NewClient[api.StreamingQueueGetRequest, api.StreamingQueueMessage](
			httpClient,
			baseURL+SubmitGetQueuesProcedure,
			connect.WithSchema(submitGetQueuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[emptypb.Empty, api.HealthCheckResponse](
			httpClient,
			baseURL+SubmitHealthProcedure,
			connect.WithSchema(submitHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// submitClient implements SubmitClient.
type submitClient struct {
	submitJobs       *connect.Client[api.JobSubmitRequest, api.JobSubmitResponse]
	cancelJobs       *connect.Client[api.JobCancelRequest, api.CancellationResult]
	cancelJobSet     *connect.Client[api.JobSetCancelRequest, emptypb.Empty]
	reprioritizeJobs *connect.Client[api.JobReprioritizeRequest, api.JobReprioritizeResponse]
	preemptJobs      *connect.Client[api.JobPreemptRequest, emptypb.Empty]
	createQueue      *connect.Client[api.Queue, emptypb.Empty]
	createQueues     *connect.Client[api.QueueList, api.BatchQueueCreateResponse]
	updateQueue      *connect.Client[api.Queue, emptypb.Empty]
	updateQueues     *connect.Client[api.QueueList, api.BatchQueueUpdateResponse]
	deleteQueue      *connect.Client[api.QueueDeleteRequest, emptypb.Empty]
	getQueue         *connect.Client[api.QueueGetRequest, api.Queue]
	getQueues        *connect.Client[api.StreamingQueueGetRequest, api.StreamingQueueMessage]
	health           *connect.Client[emptypb.Empty, api.HealthCheckResponse]
}

// SubmitJobs calls api.Submit.SubmitJobs.
func (c *submitClient) SubmitJobs(ctx context.Context, req *connect.Request[api.JobSubmitRequest]) (*connect.Response[api.JobSubmitResponse], error) {
	return c.submitJobs.CallUnary(ctx, req)
}

// CancelJobs calls api.Submit.CancelJobs.
func (c *submitClient) CancelJobs(ctx context.Context, req *connect.Request[api.JobCancelRequest]) (*connect.Response[api.CancellationResult], error) {
	return c.cancelJobs.CallUnary(ctx, req)
}

// CancelJobSet calls api.Submit.CancelJobSet.
func (c *submitClient) CancelJobSet(ctx context.Context, req *connect.Request[api.JobSetCancelRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelJobSet.CallUnary(ctx, req)
}

// ReprioritizeJobs calls api.Submit.ReprioritizeJobs.
func (c *submitClient) ReprioritizeJobs(ctx context.Context, req *connect.Request[api.JobReprioritizeRequest]) (*connect.Response[api.JobReprioritizeResponse], error) {
	return c.reprioritizeJobs.CallUnary(ctx, req)
}

// PreemptJobs calls api.Submit.PreemptJobs.
func (c *submitClient) PreemptJobs(ctx context.Context, req *connect.Request[api.JobPreemptRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.preemptJobs.CallUnary(ctx, req)
}

// CreateQueue calls api.Submit.CreateQueue.
func (c *submitClient) CreateQueue(ctx context.Context, req *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return c.createQueue.CallUnary(ctx, req)
}

// CreateQueues calls api.Submit.CreateQueues.
func (c *submitClient) CreateQueues(ctx context.Context, req *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error) {
	return c.createQueues.CallUnary(ctx, req)
}

// UpdateQueue calls api.Submit.UpdateQueue.
func (c *submitClient) UpdateQueue(ctx context.Context, req *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return c.updateQueue.CallUnary(ctx, req)
}

// UpdateQueues calls api.Submit.UpdateQueues.
func (c *submitClient) UpdateQueues(ctx context.Context, req *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error) {
	return c.updateQueues.CallUnary(ctx, req)
}

// DeleteQueue calls api.Submit.DeleteQueue.
func (c *submitClient) DeleteQueue(ctx context.Context, req *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteQueue.CallUnary(ctx, req)
}

// GetQueue calls api.Submit.GetQueue.
func (c *submitClient) GetQueue(ctx context.Context, req *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error) {
	return c.getQueue.CallUnary(ctx, req)
}

// GetQueues calls api.Submit.GetQueues.
func (c *submitClient) GetQueues(ctx context.Context, req *connect.Request[api.StreamingQueueGetRequest]) (*connect.ServerStreamForClient[api.StreamingQueueMessage], error) {
	return c.getQueues.CallServerStream(ctx, req)
}

// Health calls api.Submit.Health.
func (c *submitClient) Health(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[api.HealthCheckResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// SubmitHandler is an implementation of the api.Submit service.
type SubmitHandler interface {
	SubmitJobs(context.Context, *connect.Request[api.JobSubmitRequest]) (*connect.Response[api.JobSubmitResponse], error)
	CancelJobs(context.Context, *connect.Request[api.JobCancelRequest]) (*connect.Response[api.CancellationResult], error)
	CancelJobSet(context.Context, *connect.Request[api.JobSetCancelRequest]) (*connect.Response[emptypb.Empty], error)
	ReprioritizeJobs(context.Context, *connect.Request[api.JobReprioritizeRequest]) (*connect.Response[api.JobReprioritizeResponse], error)
	PreemptJobs(context.Context, *connect.Request[api.JobPreemptRequest]) (*connect.Response[emptypb.Empty], error)
	CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error)
	UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error)
	UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error)
	DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error)
	GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest], *connect.ServerStream[api.StreamingQueueMessage]) error
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.HealthCheckResponse], error)
}

// NewSubmitHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubmitHandler(svc SubmitHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	submitSubmitJobsHandler := connect.NewUnaryHandler(
		SubmitSubmitJobsProcedure,
		svc.SubmitJobs,
		connect.WithSchema(submitSubmitJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitCancelJobsHandler := connect.NewUnaryHandler(
		SubmitCancelJobsProcedure,
		svc.CancelJobs,
		connect.WithSchema(submitCancelJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitCancelJobSetHandler := connect.NewUnaryHandler(
		SubmitCancelJobSetProcedure,
		svc.CancelJobSet,
		connect.WithSchema(submitCancelJobSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitReprioritizeJobsHandler := connect.NewUnaryHandler(
		SubmitReprioritizeJobsProcedure,
		svc.ReprioritizeJobs,
		connect.WithSchema(submitReprioritizeJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitPreemptJobsHandler := connect.NewUnaryHandler(
		SubmitPreemptJobsProcedure,
		svc.PreemptJobs,
		connect.WithSchema(submitPreemptJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitCreateQueueHandler := connect.NewUnaryHandler(
		SubmitCreateQueueProcedure,
		svc.CreateQueue,
		connect.WithSchema(submitCreateQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitCreateQueuesHandler := connect.NewUnaryHandler(
		SubmitCreateQueuesProcedure,
		svc.CreateQueues,
		connect.WithSchema(submitCreateQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitUpdateQueueHandler := connect.NewUnaryHandler(
		SubmitUpdateQueueProcedure,
		svc.UpdateQueue,
		connect.WithSchema(submitUpdateQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitUpdateQueuesHandler := connect.NewUnaryHandler(
		SubmitUpdateQueuesProcedure,
		svc.UpdateQueues,
		connect.WithSchema(submitUpdateQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitDeleteQueueHandler := connect.NewUnaryHandler(
		SubmitDeleteQueueProcedure,
		svc.DeleteQueue,
		connect.WithSchema(submitDeleteQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitGetQueueHandler := connect.NewUnaryHandler(
		SubmitGetQueueProcedure,
		svc.GetQueue,
		connect.WithSchema(submitGetQueueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitGetQueuesHandler := connect.NewServerStreamHandler(
		SubmitGetQueuesProcedure,
		svc.GetQueues,
		connect.WithSchema(submitGetQueuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	submitHealthHandler := connect.NewUnaryHandler(
		SubmitHealthProcedure,
		svc.Health,
		connect.WithSchema(submitHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.Submit/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubmitSubmitJobsProcedure:
			submitSubmitJobsHandler.ServeHTTP(w, r)
		case SubmitCancelJobsProcedure:
			submitCancelJobsHandler.ServeHTTP(w, r)
		case SubmitCancelJobSetProcedure:
			submitCancelJobSetHandler.ServeHTTP(w, r)
		case SubmitReprioritizeJobsProcedure:
			submitReprioritizeJobsHandler.ServeHTTP(w, r)
		case SubmitPreemptJobsProcedure:
			submitPreemptJobsHandler.ServeHTTP(w, r)
		case SubmitCreateQueueProcedure:
			submitCreateQueueHandler.ServeHTTP(w, r)
		case SubmitCreateQueuesProcedure:
			submitCreateQueuesHandler.ServeHTTP(w, r)
		case SubmitUpdateQueueProcedure:
			submitUpdateQueueHandler.ServeHTTP(w, r)
		case SubmitUpdateQueuesProcedure:
			submitUpdateQueuesHandler.ServeHTTP(w, r)
		case SubmitDeleteQueueProcedure:
			submitDeleteQueueHandler.ServeHTTP(w, r)
		case SubmitGetQueueProcedure:
			submitGetQueueHandler.ServeHTTP(w, r)
		case SubmitGetQueuesProcedure:
			submitGetQueuesHandler.ServeHTTP(w, r)
		case SubmitHealthProcedure:
			submitHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubmitHandler returns CodeUnimplemented from all methods.
type UnimplementedSubmitHandler struct{}

func (UnimplementedSubmitHandler) SubmitJobs(context.Context, *connect.Request[api.JobSubmitRequest]) (*connect.Response[api.JobSubmitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.SubmitJobs is not implemented"))
}

func (UnimplementedSubmitHandler) CancelJobs(context.Context, *connect.Request[api.JobCancelRequest]) (*connect.Response[api.CancellationResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.CancelJobs is not implemented"))
}

func (UnimplementedSubmitHandler) CancelJobSet(context.Context, *connect.Request[api.JobSetCancelRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.CancelJobSet is not implemented"))
}

func (UnimplementedSubmitHandler) ReprioritizeJobs(context.Context, *connect.Request[api.JobReprioritizeRequest]) (*connect.Response[api.JobReprioritizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.ReprioritizeJobs is not implemented"))
}

func (UnimplementedSubmitHandler) PreemptJobs(context.Context, *connect.Request[api.JobPreemptRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.PreemptJobs is not implemented"))
}

func (UnimplementedSubmitHandler) CreateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.CreateQueue is not implemented"))
}

func (UnimplementedSubmitHandler) CreateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.CreateQueues is not implemented"))
}

func (UnimplementedSubmitHandler) UpdateQueue(context.Context, *connect.Request[api.Queue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.UpdateQueue is not implemented"))
}

func (UnimplementedSubmitHandler) UpdateQueues(context.Context, *connect.Request[api.QueueList]) (*connect.Response[api.BatchQueueUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.UpdateQueues is not implemented"))
}

func (UnimplementedSubmitHandler) DeleteQueue(context.Context, *connect.Request[api.QueueDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.DeleteQueue is not implemented"))
}

func (UnimplementedSubmitHandler) GetQueue(context.Context, *connect.Request[api.QueueGetRequest]) (*connect.Response[api.Queue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.GetQueue is not implemented"))
}

func (UnimplementedSubmitHandler) GetQueues(context.Context, *connect.Request[api.StreamingQueueGetRequest], *connect.ServerStream[api.StreamingQueueMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.GetQueues is not implemented"))
}

func (UnimplementedSubmitHandler) Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Submit.Health is not implemented"))
}
