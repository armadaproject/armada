// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/job.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/armadaproject/armada/pkg/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobsName is the fully-qualified name of the Jobs service.
	JobsName = "api.Jobs"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobsGetJobStatusProcedure is the fully-qualified name of the Jobs's GetJobStatus RPC.
	JobsGetJobStatusProcedure = "/api.Jobs/GetJobStatus"
	// JobsGetJobDetailsProcedure is the fully-qualified name of the Jobs's GetJobDetails RPC.
	JobsGetJobDetailsProcedure = "/api.Jobs/GetJobDetails"
	// JobsGetJobRunDetailsProcedure is the fully-qualified name of the Jobs's GetJobRunDetails RPC.
	JobsGetJobRunDetailsProcedure = "/api.Jobs/GetJobRunDetails"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jobsServiceDescriptor                = api.File_api_job_proto.Services().ByName("Jobs")
	jobsGetJobStatusMethodDescriptor     = jobsServiceDescriptor.Methods().ByName("GetJobStatus")
	jobsGetJobDetailsMethodDescriptor    = jobsServiceDescriptor.Methods().ByName("GetJobDetails")
	jobsGetJobRunDetailsMethodDescriptor = jobsServiceDescriptor.Methods().ByName("GetJobRunDetails")
)

// JobsClient is a client for the api.Jobs service.
type JobsClient interface {
	GetJobStatus(context.Context, *connect.Request[api.JobStatusRequest]) (*connect.Response[api.JobStatusResponse], error)
	GetJobDetails(context.Context, *connect.Request[api.JobDetailsRequest]) (*connect.Response[api.JobDetailsResponse], error)
	GetJobRunDetails(context.Context, *connect.Request[api.JobRunDetailsRequest]) (*connect.Response[api.JobRunDetailsResponse], error)
}

// NewJobsClient constructs a client for the api.Jobs service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobsClient{
		getJobStatus: connect.NewClient[api.JobStatusRequest, api.JobStatusResponse](
			httpClient,
			baseURL+JobsGetJobStatusProcedure,
			connect.WithSchema(jobsGetJobStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobDetails: connect.NewClient[api.JobDetailsRequest, api.JobDetailsResponse](
			httpClient,
			baseURL+JobsGetJobDetailsProcedure,
			connect.WithSchema(jobsGetJobDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRunDetails: connect.NewClient[api.JobRunDetailsRequest, api.JobRunDetailsResponse](
			httpClient,
			baseURL+JobsGetJobRunDetailsProcedure,
			connect.WithSchema(jobsGetJobRunDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobsClient implements JobsClient.
type jobsClient struct {
	getJobStatus     *connect.Client[api.JobStatusRequest, api.JobStatusResponse]
	getJobDetails    *connect.Client[api.JobDetailsRequest, api.JobDetailsResponse]
	getJobRunDetails *connect.Client[api.JobRunDetailsRequest, api.JobRunDetailsResponse]
}

// GetJobStatus calls api.Jobs.GetJobStatus.
func (c *jobsClient) GetJobStatus(ctx context.Context, req *connect.Request[api.JobStatusRequest]) (*connect.Response[api.JobStatusResponse], error) {
	return c.getJobStatus.CallUnary(ctx, req)
}

// GetJobDetails calls api.Jobs.GetJobDetails.
func (c *jobsClient) GetJobDetails(ctx context.Context, req *connect.Request[api.JobDetailsRequest]) (*connect.Response[api.JobDetailsResponse], error) {
	return c.getJobDetails.CallUnary(ctx, req)
}

// GetJobRunDetails calls api.Jobs.GetJobRunDetails.
func (c *jobsClient) GetJobRunDetails(ctx context.Context, req *connect.Request[api.JobRunDetailsRequest]) (*connect.Response[api.JobRunDetailsResponse], error) {
	return c.getJobRunDetails.CallUnary(ctx, req)
}

// JobsHandler is an implementation of the api.Jobs service.
type JobsHandler interface {
	GetJobStatus(context.Context, *connect.Request[api.JobStatusRequest]) (*connect.Response[api.JobStatusResponse], error)
	GetJobDetails(context.Context, *connect.Request[api.JobDetailsRequest]) (*connect.Response[api.JobDetailsResponse], error)
	GetJobRunDetails(context.Context, *connect.Request[api.JobRunDetailsRequest]) (*connect.Response[api.JobRunDetailsResponse], error)
}

// NewJobsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobsHandler(svc JobsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobsGetJobStatusHandler := connect.NewUnaryHandler(
		JobsGetJobStatusProcedure,
		svc.GetJobStatus,
		connect.WithSchema(jobsGetJobStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobsGetJobDetailsHandler := connect.NewUnaryHandler(
		JobsGetJobDetailsProcedure,
		svc.GetJobDetails,
		connect.WithSchema(jobsGetJobDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobsGetJobRunDetailsHandler := connect.NewUnaryHandler(
		JobsGetJobRunDetailsProcedure,
		svc.GetJobRunDetails,
		connect.WithSchema(jobsGetJobRunDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.Jobs/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobsGetJobStatusProcedure:
			jobsGetJobStatusHandler.ServeHTTP(w, r)
		case JobsGetJobDetailsProcedure:
			jobsGetJobDetailsHandler.ServeHTTP(w, r)
		case JobsGetJobRunDetailsProcedure:
			jobsGetJobRunDetailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobsHandler returns CodeUnimplemented from all methods.
type UnimplementedJobsHandler struct{}

func (UnimplementedJobsHandler) GetJobStatus(context.Context, *connect.Request[api.JobStatusRequest]) (*connect.Response[api.JobStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Jobs.GetJobStatus is not implemented"))
}

func (UnimplementedJobsHandler) GetJobDetails(context.Context, *connect.Request[api.JobDetailsRequest]) (*connect.Response[api.JobDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Jobs.GetJobDetails is not implemented"))
}

func (UnimplementedJobsHandler) GetJobRunDetails(context.Context, *connect.Request[api.JobRunDetailsRequest]) (*connect.Response[api.JobRunDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Jobs.GetJobRunDetails is not implemented"))
}
