// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/jobcaching/jobcache.proto

package jobcache

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JobCacheRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (m *JobCacheRequest) Reset()         { *m = JobCacheRequest{} }
func (m *JobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*JobCacheRequest) ProtoMessage()    {}
func (*JobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b241b6591414876, []int{0}
}
func (m *JobCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCacheRequest.Merge(m, src)
}
func (m *JobCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobCacheRequest proto.InternalMessageInfo

func (m *JobCacheRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type JobCacheResponse struct {
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *JobCacheResponse) Reset()         { *m = JobCacheResponse{} }
func (m *JobCacheResponse) String() string { return proto.CompactTextString(m) }
func (*JobCacheResponse) ProtoMessage()    {}
func (*JobCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b241b6591414876, []int{1}
}
func (m *JobCacheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCacheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCacheResponse.Merge(m, src)
}
func (m *JobCacheResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobCacheResponse proto.InternalMessageInfo

func (m *JobCacheResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *JobCacheResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*JobCacheRequest)(nil), "jobcache.JobCacheRequest")
	proto.RegisterType((*JobCacheResponse)(nil), "jobcache.JobCacheResponse")
}

func init() { proto.RegisterFile("pkg/api/jobcaching/jobcache.proto", fileDescriptor_9b241b6591414876) }

var fileDescriptor_9b241b6591414876 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2c, 0xc8, 0xd4, 0xcf, 0xca, 0x4f, 0x4a, 0x4e, 0x4c, 0xce, 0xc8, 0xcc, 0x4b, 0x87, 0x31,
	0x53, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x7c, 0x25, 0x0d, 0x2e, 0x7e, 0xaf,
	0xfc, 0x24, 0x67, 0x10, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x94, 0x8b, 0x2d,
	0x2b, 0x3f, 0x29, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0x35, 0x2b, 0x3f,
	0xc9, 0x33, 0x45, 0xc9, 0x8e, 0x4b, 0x00, 0xa1, 0xb2, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48,
	0x84, 0x8b, 0xb5, 0xb8, 0x24, 0xb1, 0x24, 0x15, 0xa6, 0x12, 0xcc, 0x01, 0x89, 0xa6, 0x16, 0x15,
	0xe5, 0x17, 0x49, 0x30, 0x41, 0x44, 0xc1, 0x1c, 0xa3, 0x00, 0x2e, 0x0e, 0x98, 0x7e, 0x21, 0x17,
	0x2e, 0xae, 0xe0, 0xd2, 0xa4, 0xdc, 0xcc, 0x12, 0xaf, 0xfc, 0xa4, 0x62, 0x21, 0x49, 0x3d, 0xb8,
	0xf3, 0xd0, 0xdc, 0x22, 0x85, 0x5b, 0x4a, 0x89, 0xc1, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xde, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0xcb, 0xeb, 0x13, 0x0b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobCacheClient is the client API for JobCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobCacheClient interface {
	SubmitJobs(ctx context.Context, in *JobCacheRequest, opts ...grpc.CallOption) (*JobCacheRequest, error)
}

type jobCacheClient struct {
	cc *grpc.ClientConn
}

func NewJobCacheClient(cc *grpc.ClientConn) JobCacheClient {
	return &jobCacheClient{cc}
}

func (c *jobCacheClient) SubmitJobs(ctx context.Context, in *JobCacheRequest, opts ...grpc.CallOption) (*JobCacheRequest, error) {
	out := new(JobCacheRequest)
	err := c.cc.Invoke(ctx, "/jobcache.JobCache/SubmitJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobCacheServer is the server API for JobCache service.
type JobCacheServer interface {
	SubmitJobs(context.Context, *JobCacheRequest) (*JobCacheRequest, error)
}

// UnimplementedJobCacheServer can be embedded to have forward compatible implementations.
type UnimplementedJobCacheServer struct {
}

func (*UnimplementedJobCacheServer) SubmitJobs(ctx context.Context, req *JobCacheRequest) (*JobCacheRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJobs not implemented")
}

func RegisterJobCacheServer(s *grpc.Server, srv JobCacheServer) {
	s.RegisterService(&_JobCache_serviceDesc, srv)
}

func _JobCache_SubmitJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCacheServer).SubmitJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcache.JobCache/SubmitJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCacheServer).SubmitJobs(ctx, req.(*JobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobcache.JobCache",
	HandlerType: (*JobCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJobs",
			Handler:    _JobCache_SubmitJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/jobcaching/jobcache.proto",
}

func (m *JobCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintJobcache(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobCacheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCacheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobCacheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintJobcache(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintJobcache(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJobcache(dAtA []byte, offset int, v uint64) int {
	offset -= sovJobcache(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JobCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovJobcache(uint64(l))
	}
	return n
}

func (m *JobCacheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovJobcache(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovJobcache(uint64(l))
	}
	return n
}

func sovJobcache(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJobcache(x uint64) (n int) {
	return sovJobcache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCacheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCacheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCacheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJobcache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJobcache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobcache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobcache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJobcache
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJobcache
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJobcache
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJobcache        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJobcache          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJobcache = fmt.Errorf("proto: unexpected end of group")
)
