// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/job.proto

package api

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JobRunState int32

const (
	JobRunState_RUN_STATE_UNKNOWN         JobRunState = 0
	JobRunState_RUN_STATE_LEASED          JobRunState = 1
	JobRunState_RUN_STATE_PENDING         JobRunState = 2
	JobRunState_RUN_STATE_RUNNING         JobRunState = 3
	JobRunState_RUN_STATE_SUCCEEDED       JobRunState = 4
	JobRunState_RUN_STATE_FAILED          JobRunState = 5
	JobRunState_RUN_STATE_PREEMPTED       JobRunState = 6
	JobRunState_RUN_STATE_CANCELLED       JobRunState = 7
	JobRunState_RUN_STATE_LEASE_EXPIRED   JobRunState = 8
	JobRunState_RUNS_STATE_LEASE_RETURNED JobRunState = 9
)

var JobRunState_name = map[int32]string{
	0: "RUN_STATE_UNKNOWN",
	1: "RUN_STATE_LEASED",
	2: "RUN_STATE_PENDING",
	3: "RUN_STATE_RUNNING",
	4: "RUN_STATE_SUCCEEDED",
	5: "RUN_STATE_FAILED",
	6: "RUN_STATE_PREEMPTED",
	7: "RUN_STATE_CANCELLED",
	8: "RUN_STATE_LEASE_EXPIRED",
	9: "RUNS_STATE_LEASE_RETURNED",
}

var JobRunState_value = map[string]int32{
	"RUN_STATE_UNKNOWN":         0,
	"RUN_STATE_LEASED":          1,
	"RUN_STATE_PENDING":         2,
	"RUN_STATE_RUNNING":         3,
	"RUN_STATE_SUCCEEDED":       4,
	"RUN_STATE_FAILED":          5,
	"RUN_STATE_PREEMPTED":       6,
	"RUN_STATE_CANCELLED":       7,
	"RUN_STATE_LEASE_EXPIRED":   8,
	"RUNS_STATE_LEASE_RETURNED": 9,
}

func (x JobRunState) String() string {
	return proto.EnumName(JobRunState_name, int32(x))
}

func (JobRunState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{0}
}

type JobRunDetails struct {
	RunId      string           `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"runId,omitempty"`
	JobId      string           `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	State      JobRunState      `protobuf:"varint,3,opt,name=state,proto3,enum=api.JobRunState" json:"state,omitempty"`
	Cluster    string           `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Node       string           `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	LeasedTs   *types.Timestamp `protobuf:"bytes,7,opt,name=leased_ts,json=leasedTs,proto3" json:"leasedTs,omitempty"`
	PendingTs  *types.Timestamp `protobuf:"bytes,8,opt,name=pending_ts,json=pendingTs,proto3" json:"pendingTs,omitempty"`
	StartedTs  *types.Timestamp `protobuf:"bytes,9,opt,name=started_ts,json=startedTs,proto3" json:"startedTs,omitempty"`
	FinishedTs *types.Timestamp `protobuf:"bytes,10,opt,name=finished_ts,json=finishedTs,proto3" json:"finishedTs,omitempty"`
}

func (m *JobRunDetails) Reset()      { *m = JobRunDetails{} }
func (*JobRunDetails) ProtoMessage() {}
func (*JobRunDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{0}
}
func (m *JobRunDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunDetails.Merge(m, src)
}
func (m *JobRunDetails) XXX_Size() int {
	return m.Size()
}
func (m *JobRunDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunDetails.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunDetails proto.InternalMessageInfo

func (m *JobRunDetails) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *JobRunDetails) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobRunDetails) GetState() JobRunState {
	if m != nil {
		return m.State
	}
	return JobRunState_RUN_STATE_UNKNOWN
}

func (m *JobRunDetails) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *JobRunDetails) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *JobRunDetails) GetLeasedTs() *types.Timestamp {
	if m != nil {
		return m.LeasedTs
	}
	return nil
}

func (m *JobRunDetails) GetPendingTs() *types.Timestamp {
	if m != nil {
		return m.PendingTs
	}
	return nil
}

func (m *JobRunDetails) GetStartedTs() *types.Timestamp {
	if m != nil {
		return m.StartedTs
	}
	return nil
}

func (m *JobRunDetails) GetFinishedTs() *types.Timestamp {
	if m != nil {
		return m.FinishedTs
	}
	return nil
}

type JobDetails struct {
	JobId            string           `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	Queue            string           `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Jobset           string           `protobuf:"bytes,3,opt,name=jobset,proto3" json:"jobset,omitempty"`
	Namespace        string           `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	State            JobState         `protobuf:"varint,5,opt,name=state,proto3,enum=api.JobState" json:"state,omitempty"`
	SubmittedTs      *types.Timestamp `protobuf:"bytes,6,opt,name=submitted_ts,json=submittedTs,proto3" json:"submittedTs,omitempty"`
	CancelTs         *types.Timestamp `protobuf:"bytes,7,opt,name=cancel_ts,json=cancelTs,proto3" json:"cancelTs,omitempty"`
	CancelReason     string           `protobuf:"bytes,8,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancelReason,omitempty"`
	LastTransitionTs *types.Timestamp `protobuf:"bytes,9,opt,name=last_transition_ts,json=lastTransitionTs,proto3" json:"lastTransitionTs,omitempty"`
	LatestRunId      string           `protobuf:"bytes,10,opt,name=latest_run_id,json=latestRunId,proto3" json:"latestRunId,omitempty"`
	JobSpec          *Job             `protobuf:"bytes,11,opt,name=job_spec,json=jobSpec,proto3" json:"jobSpec,omitempty"`
	JobRuns          []*JobRunDetails `protobuf:"bytes,12,rep,name=job_runs,json=jobRuns,proto3" json:"jobRuns,omitempty"`
}

func (m *JobDetails) Reset()      { *m = JobDetails{} }
func (*JobDetails) ProtoMessage() {}
func (*JobDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{1}
}
func (m *JobDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDetails.Merge(m, src)
}
func (m *JobDetails) XXX_Size() int {
	return m.Size()
}
func (m *JobDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDetails.DiscardUnknown(m)
}

var xxx_messageInfo_JobDetails proto.InternalMessageInfo

func (m *JobDetails) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobDetails) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobDetails) GetJobset() string {
	if m != nil {
		return m.Jobset
	}
	return ""
}

func (m *JobDetails) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobDetails) GetState() JobState {
	if m != nil {
		return m.State
	}
	return JobState_QUEUED
}

func (m *JobDetails) GetSubmittedTs() *types.Timestamp {
	if m != nil {
		return m.SubmittedTs
	}
	return nil
}

func (m *JobDetails) GetCancelTs() *types.Timestamp {
	if m != nil {
		return m.CancelTs
	}
	return nil
}

func (m *JobDetails) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

func (m *JobDetails) GetLastTransitionTs() *types.Timestamp {
	if m != nil {
		return m.LastTransitionTs
	}
	return nil
}

func (m *JobDetails) GetLatestRunId() string {
	if m != nil {
		return m.LatestRunId
	}
	return ""
}

func (m *JobDetails) GetJobSpec() *Job {
	if m != nil {
		return m.JobSpec
	}
	return nil
}

func (m *JobDetails) GetJobRuns() []*JobRunDetails {
	if m != nil {
		return m.JobRuns
	}
	return nil
}

type JobDetailsRequest struct {
	JobIds        []string `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"jobIds,omitempty"`
	ExpandJobSpec bool     `protobuf:"varint,2,opt,name=expand_job_spec,json=expandJobSpec,proto3" json:"expandJobSpec,omitempty"`
	ExpandJobRun  bool     `protobuf:"varint,3,opt,name=expand_job_run,json=expandJobRun,proto3" json:"expandJobRun,omitempty"`
}

func (m *JobDetailsRequest) Reset()      { *m = JobDetailsRequest{} }
func (*JobDetailsRequest) ProtoMessage() {}
func (*JobDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{2}
}
func (m *JobDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDetailsRequest.Merge(m, src)
}
func (m *JobDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobDetailsRequest proto.InternalMessageInfo

func (m *JobDetailsRequest) GetJobIds() []string {
	if m != nil {
		return m.JobIds
	}
	return nil
}

func (m *JobDetailsRequest) GetExpandJobSpec() bool {
	if m != nil {
		return m.ExpandJobSpec
	}
	return false
}

func (m *JobDetailsRequest) GetExpandJobRun() bool {
	if m != nil {
		return m.ExpandJobRun
	}
	return false
}

type JobDetailsResponse struct {
	JobDetails map[string]*JobDetails `protobuf:"bytes,1,rep,name=job_details,json=jobDetails,proto3" json:"jobDetails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *JobDetailsResponse) Reset()      { *m = JobDetailsResponse{} }
func (*JobDetailsResponse) ProtoMessage() {}
func (*JobDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{3}
}
func (m *JobDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDetailsResponse.Merge(m, src)
}
func (m *JobDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobDetailsResponse proto.InternalMessageInfo

func (m *JobDetailsResponse) GetJobDetails() map[string]*JobDetails {
	if m != nil {
		return m.JobDetails
	}
	return nil
}

type JobRunDetailsResponse struct {
	JobRunDetails map[string]*JobRunDetails `protobuf:"bytes,1,rep,name=job_run_details,json=jobRunDetails,proto3" json:"jobRunDetails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *JobRunDetailsResponse) Reset()      { *m = JobRunDetailsResponse{} }
func (*JobRunDetailsResponse) ProtoMessage() {}
func (*JobRunDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{4}
}
func (m *JobRunDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunDetailsResponse.Merge(m, src)
}
func (m *JobRunDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobRunDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunDetailsResponse proto.InternalMessageInfo

func (m *JobRunDetailsResponse) GetJobRunDetails() map[string]*JobRunDetails {
	if m != nil {
		return m.JobRunDetails
	}
	return nil
}

type JobRunDetailsRequest struct {
	RunIds []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"runIds,omitempty"`
}

func (m *JobRunDetailsRequest) Reset()      { *m = JobRunDetailsRequest{} }
func (*JobRunDetailsRequest) ProtoMessage() {}
func (*JobRunDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{5}
}
func (m *JobRunDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunDetailsRequest.Merge(m, src)
}
func (m *JobRunDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobRunDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunDetailsRequest proto.InternalMessageInfo

func (m *JobRunDetailsRequest) GetRunIds() []string {
	if m != nil {
		return m.RunIds
	}
	return nil
}

type JobStatusRequest struct {
	JobIds []string `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"jobIds,omitempty"`
}

func (m *JobStatusRequest) Reset()      { *m = JobStatusRequest{} }
func (*JobStatusRequest) ProtoMessage() {}
func (*JobStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{6}
}
func (m *JobStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatusRequest.Merge(m, src)
}
func (m *JobStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatusRequest proto.InternalMessageInfo

func (m *JobStatusRequest) GetJobIds() []string {
	if m != nil {
		return m.JobIds
	}
	return nil
}

type JobStatusResponse struct {
	JobStates map[string]JobState `protobuf:"bytes,1,rep,name=job_states,json=jobStates,proto3" json:"jobStates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=api.JobState"`
}

func (m *JobStatusResponse) Reset()      { *m = JobStatusResponse{} }
func (*JobStatusResponse) ProtoMessage() {}
func (*JobStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e45f6b75bfad87a4, []int{7}
}
func (m *JobStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatusResponse.Merge(m, src)
}
func (m *JobStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatusResponse proto.InternalMessageInfo

func (m *JobStatusResponse) GetJobStates() map[string]JobState {
	if m != nil {
		return m.JobStates
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.JobRunState", JobRunState_name, JobRunState_value)
	proto.RegisterType((*JobRunDetails)(nil), "api.JobRunDetails")
	proto.RegisterType((*JobDetails)(nil), "api.JobDetails")
	proto.RegisterType((*JobDetailsRequest)(nil), "api.JobDetailsRequest")
	proto.RegisterType((*JobDetailsResponse)(nil), "api.JobDetailsResponse")
	proto.RegisterMapType((map[string]*JobDetails)(nil), "api.JobDetailsResponse.JobDetailsEntry")
	proto.RegisterType((*JobRunDetailsResponse)(nil), "api.JobRunDetailsResponse")
	proto.RegisterMapType((map[string]*JobRunDetails)(nil), "api.JobRunDetailsResponse.JobRunDetailsEntry")
	proto.RegisterType((*JobRunDetailsRequest)(nil), "api.JobRunDetailsRequest")
	proto.RegisterType((*JobStatusRequest)(nil), "api.JobStatusRequest")
	proto.RegisterType((*JobStatusResponse)(nil), "api.JobStatusResponse")
	proto.RegisterMapType((map[string]JobState)(nil), "api.JobStatusResponse.JobStatesEntry")
}

func init() { proto.RegisterFile("pkg/api/job.proto", fileDescriptor_e45f6b75bfad87a4) }

var fileDescriptor_e45f6b75bfad87a4 = []byte{
	// 1268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x41, 0x6f, 0xe3, 0xc4,
	0x17, 0xaf, 0x93, 0xa6, 0x4d, 0x26, 0x9b, 0xc6, 0x9d, 0xa6, 0x6d, 0x9a, 0xfd, 0xff, 0xe3, 0x2a,
	0x08, 0xb6, 0xac, 0x76, 0x13, 0x11, 0x84, 0xb4, 0x2a, 0x5a, 0x41, 0xd3, 0x98, 0x55, 0xca, 0x92,
	0xad, 0x9c, 0x44, 0xac, 0x10, 0x28, 0xb2, 0x93, 0xd9, 0xac, 0xb3, 0x89, 0xed, 0xf5, 0x8c, 0x57,
	0x54, 0xe2, 0x80, 0x90, 0x38, 0x70, 0x43, 0xe2, 0xc4, 0x07, 0xe0, 0xbb, 0xc0, 0x01, 0x69, 0x25,
	0x2e, 0x7b, 0xb2, 0xa0, 0x8b, 0x84, 0xe4, 0x13, 0x1f, 0x01, 0x79, 0xc6, 0x76, 0xc6, 0x6e, 0xab,
	0x14, 0x6e, 0xf1, 0xef, 0xbd, 0xf7, 0x9b, 0x99, 0xf7, 0x7e, 0xef, 0xcd, 0x04, 0x6c, 0x5a, 0xcf,
	0x26, 0x0d, 0xd5, 0xd2, 0x1b, 0x53, 0x53, 0xab, 0x5b, 0xb6, 0x49, 0x4c, 0x98, 0x56, 0x2d, 0xbd,
	0x72, 0x77, 0xa2, 0x93, 0xa7, 0x8e, 0x56, 0x1f, 0x99, 0xf3, 0xc6, 0xc4, 0x9c, 0x98, 0x0d, 0x6a,
	0xd3, 0x9c, 0x27, 0xf4, 0x8b, 0x7e, 0xd0, 0x5f, 0x2c, 0xa6, 0x52, 0x0a, 0x69, 0xb0, 0xa3, 0xcd,
	0x75, 0x12, 0xa0, 0xd2, 0xc4, 0x34, 0x27, 0x33, 0xb4, 0x88, 0x25, 0xfa, 0x1c, 0x61, 0xa2, 0xce,
	0xad, 0xc0, 0xe1, 0x7f, 0x81, 0x83, 0x1f, 0xa9, 0x1a, 0x86, 0x49, 0x54, 0xa2, 0x9b, 0x06, 0x66,
	0xd6, 0xda, 0xaf, 0xab, 0xa0, 0x70, 0x62, 0x6a, 0x8a, 0x63, 0xb4, 0x11, 0x51, 0xf5, 0x19, 0x86,
	0xb7, 0xc1, 0x9a, 0xed, 0x18, 0x43, 0x7d, 0x5c, 0x16, 0xf6, 0x85, 0x83, 0x5c, 0x6b, 0xcb, 0x73,
	0xa5, 0xa2, 0xed, 0x18, 0x9d, 0xf1, 0x1d, 0x73, 0xae, 0x13, 0x34, 0xb7, 0xc8, 0x99, 0x92, 0xa1,
	0x80, 0xef, 0x3b, 0x35, 0x35, 0xdf, 0x37, 0xb5, 0xf0, 0x9d, 0x9a, 0x5a, 0xdc, 0x97, 0x02, 0xf0,
	0x7d, 0x90, 0xc1, 0x44, 0x25, 0xa8, 0x9c, 0xde, 0x17, 0x0e, 0x36, 0x9a, 0x62, 0x5d, 0xb5, 0xf4,
	0x3a, 0x5b, 0xba, 0xe7, 0xe3, 0x2c, 0x98, 0xba, 0xf0, 0xc1, 0x14, 0x80, 0x0d, 0xb0, 0x3e, 0x9a,
	0x39, 0x98, 0x20, 0xbb, 0xbc, 0x4a, 0x57, 0xda, 0xf6, 0x5c, 0x69, 0x33, 0x80, 0x38, 0xf7, 0xd0,
	0x0b, 0xbe, 0x05, 0x56, 0x0d, 0x73, 0x8c, 0xca, 0x19, 0xea, 0x0d, 0x3d, 0x57, 0xda, 0xf0, 0xbf,
	0x39, 0x57, 0x6a, 0x87, 0x8f, 0x40, 0x6e, 0x86, 0x54, 0x8c, 0xc6, 0x43, 0x82, 0xcb, 0xeb, 0xfb,
	0xc2, 0x41, 0xbe, 0x59, 0xa9, 0xb3, 0x8c, 0xd5, 0xc3, 0x94, 0xd6, 0xfb, 0x61, 0x4a, 0x5b, 0x3b,
	0x9e, 0x2b, 0x41, 0x16, 0xd0, 0xc7, 0x1c, 0x59, 0x36, 0xc4, 0xa0, 0x02, 0x80, 0x85, 0x8c, 0xb1,
	0x6e, 0x4c, 0x7c, 0xc6, 0xec, 0x52, 0xc6, 0x5d, 0xcf, 0x95, 0xb6, 0x82, 0x88, 0x18, 0x65, 0x2e,
	0x02, 0x7d, 0x4e, 0x4c, 0x54, 0x9b, 0xb0, 0x5d, 0xe6, 0xae, 0xc7, 0x19, 0x44, 0xc4, 0x39, 0x23,
	0x10, 0x0e, 0x40, 0xfe, 0x89, 0x6e, 0xe8, 0xf8, 0x29, 0x23, 0x05, 0x4b, 0x49, 0xcb, 0x9e, 0x2b,
	0x95, 0xc2, 0x90, 0x18, 0x2b, 0x58, 0xa0, 0xb5, 0x1f, 0xd7, 0x00, 0x38, 0x31, 0x35, 0x4e, 0x4c,
	0x81, 0x40, 0x84, 0xa5, 0x02, 0x79, 0x1b, 0x64, 0x9e, 0x3b, 0xc8, 0x41, 0xbc, 0x96, 0x28, 0xc0,
	0xbb, 0x52, 0x00, 0xde, 0xa1, 0xb4, 0x18, 0x11, 0x2a, 0xa6, 0x5c, 0xab, 0xe4, 0xb9, 0x92, 0xc8,
	0x10, 0xce, 0x39, 0xf0, 0x81, 0xef, 0x81, 0x9c, 0xa1, 0xce, 0x11, 0xb6, 0xd4, 0x11, 0x0a, 0xe4,
	0x43, 0x33, 0x14, 0x81, 0x7c, 0x86, 0x22, 0x10, 0xde, 0x0b, 0x05, 0x9b, 0xa1, 0x82, 0x2d, 0x84,
	0x82, 0x5d, 0xae, 0xd6, 0xc7, 0xe0, 0x06, 0xeb, 0xd1, 0xa0, 0x62, 0x6b, 0x4b, 0x93, 0xbb, 0xe7,
	0xb9, 0xd2, 0x76, 0x14, 0x13, 0xcb, 0x6e, 0x9e, 0x83, 0x7d, 0xb9, 0x8e, 0x54, 0x63, 0x84, 0x66,
	0xff, 0x42, 0xae, 0x2c, 0x20, 0x2e, 0xd7, 0x10, 0x83, 0x1f, 0x80, 0x42, 0x40, 0x68, 0x23, 0x15,
	0x9b, 0x06, 0x55, 0x6c, 0xae, 0x55, 0xf1, 0x5c, 0x69, 0x87, 0x19, 0x14, 0x8a, 0x73, 0xc1, 0x37,
	0x78, 0x1c, 0x3e, 0x05, 0x70, 0xa6, 0x62, 0x32, 0x24, 0xb6, 0x6a, 0x60, 0xdd, 0x1f, 0x2d, 0xd7,
	0xd3, 0x68, 0xd5, 0x73, 0xa5, 0x8a, 0x1f, 0xd9, 0x8f, 0x02, 0x63, 0x5b, 0x14, 0x93, 0x36, 0x78,
	0x1f, 0x14, 0x66, 0x2a, 0x41, 0x98, 0x0c, 0x83, 0xf9, 0x04, 0xe8, 0x56, 0x69, 0xea, 0x98, 0x41,
	0x49, 0x4c, 0xa9, 0x3c, 0x07, 0xc3, 0x43, 0x90, 0xf5, 0xa5, 0x88, 0x2d, 0x34, 0x2a, 0xe7, 0xe9,
	0xf6, 0xb2, 0x61, 0x45, 0xd9, 0x34, 0x99, 0x9a, 0x5a, 0xcf, 0x42, 0x23, 0x7e, 0x9a, 0x04, 0x10,
	0x6c, 0xb3, 0x58, 0xdb, 0x31, 0x70, 0xf9, 0xc6, 0x7e, 0xfa, 0x20, 0xdf, 0x84, 0xdc, 0xf8, 0x0a,
	0xc4, 0x1e, 0xb1, 0x28, 0x8e, 0x81, 0x13, 0x2c, 0x3e, 0x54, 0xfb, 0x45, 0x00, 0x9b, 0x8b, 0xde,
	0x50, 0xd0, 0x73, 0x07, 0x61, 0x02, 0xef, 0x82, 0x75, 0xd6, 0x22, 0xb8, 0x2c, 0xec, 0xa7, 0x39,
	0x31, 0x77, 0xc6, 0x38, 0x21, 0xe6, 0xce, 0x18, 0xc3, 0x63, 0x50, 0x44, 0x5f, 0x5a, 0xaa, 0x31,
	0x1e, 0x46, 0xa7, 0xf1, 0xfb, 0x25, 0xdb, 0xba, 0xe9, 0xb9, 0xd2, 0x2e, 0x33, 0x9d, 0x5c, 0x38,
	0x49, 0x21, 0x66, 0x80, 0x1f, 0x82, 0x0d, 0x8e, 0xc4, 0x76, 0x0c, 0xda, 0x47, 0x59, 0x56, 0xf6,
	0xc8, 0x55, 0x71, 0x62, 0x65, 0xe7, 0xf1, 0xda, 0xdf, 0x02, 0x80, 0xfc, 0x59, 0xb0, 0x65, 0x1a,
	0x18, 0x41, 0x0d, 0xe4, 0x7d, 0xc6, 0x31, 0x83, 0xe9, 0x81, 0xf2, 0xcd, 0x5b, 0x61, 0xae, 0x12,
	0xde, 0x1c, 0x24, 0x1b, 0xc4, 0x3e, 0x63, 0x23, 0x66, 0x1a, 0x81, 0xfc, 0x88, 0x59, 0xa0, 0x95,
	0x17, 0xa0, 0x98, 0x08, 0x84, 0x6f, 0x80, 0xf4, 0x33, 0x74, 0x16, 0xcc, 0x98, 0x4d, 0xcf, 0x95,
	0x0a, 0xcf, 0xd0, 0x19, 0x17, 0xee, 0x5b, 0xe1, 0x21, 0xc8, 0xbc, 0x50, 0x67, 0xc1, 0x7c, 0xc9,
	0x37, 0x8b, 0x89, 0x5d, 0xb1, 0x8e, 0xa6, 0x1e, 0x7c, 0x47, 0x53, 0xe0, 0x30, 0x75, 0x4f, 0xa8,
	0x7d, 0x97, 0x02, 0xdb, 0xb1, 0x82, 0x47, 0xa7, 0xb6, 0x41, 0x31, 0xc8, 0x63, 0xe2, 0xe4, 0x77,
	0x2f, 0xaa, 0x84, 0x3f, 0xfc, 0x02, 0x65, 0xe7, 0xa7, 0x25, 0x9c, 0xf2, 0x38, 0x5f, 0xc2, 0x98,
	0xa1, 0xf2, 0x15, 0xcd, 0x7f, 0x82, 0xe1, 0x7a, 0x89, 0xb8, 0x1f, 0x4f, 0xc4, 0x65, 0x52, 0x5e,
	0x96, 0x0b, 0x19, 0x94, 0x12, 0xa7, 0x8a, 0xc4, 0xcc, 0x9a, 0x33, 0x26, 0x66, 0xfa, 0x58, 0x88,
	0x89, 0x99, 0x21, 0xb5, 0x23, 0x20, 0x06, 0x03, 0xd5, 0xf9, 0x8f, 0xfd, 0x50, 0xfb, 0x8b, 0x35,
	0x55, 0xc8, 0x11, 0x54, 0xe4, 0x0b, 0x00, 0x68, 0x7b, 0xf8, 0xe3, 0x38, 0x2c, 0xc6, 0x9b, 0xfc,
	0x00, 0x77, 0x62, 0x85, 0xa0, 0x23, 0x3d, 0x28, 0x02, 0xbd, 0x1a, 0xa6, 0x21, 0xc6, 0x5f, 0x0d,
	0x11, 0x58, 0xc1, 0x60, 0x23, 0x1e, 0x75, 0xbd, 0xc4, 0xdf, 0xe3, 0x13, 0x7f, 0xf9, 0x8d, 0x72,
	0x75, 0xce, 0x6f, 0x7f, 0x9b, 0x02, 0x79, 0xee, 0xbd, 0x04, 0xb7, 0xc1, 0xa6, 0x32, 0xe8, 0x0e,
	0x7b, 0xfd, 0xa3, 0xbe, 0x3c, 0x1c, 0x74, 0x3f, 0xee, 0x3e, 0xfa, 0xb4, 0x2b, 0xae, 0xc0, 0x12,
	0x10, 0x17, 0xf0, 0x43, 0xf9, 0xa8, 0x27, 0xb7, 0x45, 0x21, 0xee, 0x7c, 0x2a, 0x77, 0xdb, 0x9d,
	0xee, 0x03, 0x31, 0x15, 0x87, 0x95, 0x41, 0xb7, 0xeb, 0xc3, 0x69, 0xb8, 0x0b, 0xb6, 0x16, 0x70,
	0x6f, 0x70, 0x7c, 0x2c, 0xcb, 0x6d, 0xb9, 0x2d, 0xae, 0xc6, 0xc9, 0x3f, 0x3a, 0xea, 0x3c, 0x94,
	0xdb, 0x62, 0x26, 0xee, 0x7e, 0xaa, 0xc8, 0xf2, 0x27, 0xa7, 0x7d, 0xb9, 0x2d, 0xae, 0xc5, 0x0d,
	0xc7, 0x47, 0xdd, 0x63, 0xf9, 0xa1, 0x1f, 0xb1, 0x0e, 0x6f, 0x82, 0xdd, 0xc4, 0x26, 0x87, 0xf2,
	0xe3, 0xd3, 0x8e, 0x22, 0xb7, 0xc5, 0x2c, 0xfc, 0x3f, 0xd8, 0x53, 0x06, 0xdd, 0x5e, 0xcc, 0xaa,
	0xc8, 0xfd, 0x81, 0xd2, 0x95, 0xdb, 0x62, 0xae, 0xf9, 0x53, 0x0a, 0xac, 0x9e, 0x98, 0x1a, 0xf6,
	0xaf, 0xd9, 0x07, 0x88, 0x44, 0x05, 0x85, 0xdb, 0xc9, 0x02, 0x53, 0x41, 0x55, 0x76, 0x2e, 0xaf,
	0x7b, 0x6d, 0xef, 0x9b, 0xdf, 0xfe, 0xfc, 0x21, 0xb5, 0x55, 0xdb, 0x68, 0xbc, 0x78, 0xc7, 0x7f,
	0x9a, 0x37, 0x30, 0xb5, 0x1f, 0x0a, 0xb7, 0xe1, 0xe7, 0xa0, 0xc0, 0x98, 0xc3, 0x77, 0xcc, 0xce,
	0x85, 0x11, 0xc6, 0xb8, 0x77, 0xaf, 0x18, 0x6d, 0xb5, 0x0a, 0x25, 0x2f, 0xd5, 0x8a, 0x21, 0x79,
	0x30, 0x18, 0x7c, 0x76, 0x04, 0x44, 0xc6, 0xce, 0xbd, 0xba, 0xf7, 0x2e, 0x9b, 0x14, 0x6c, 0x8d,
	0xca, 0xd5, 0x43, 0x24, 0xbe, 0x8c, 0xed, 0x18, 0xdc, 0x32, 0xad, 0xce, 0xab, 0x3f, 0xaa, 0x2b,
	0x5f, 0x9f, 0x57, 0x85, 0x9f, 0xcf, 0xab, 0xc2, 0xcb, 0xf3, 0xaa, 0xf0, 0xfb, 0x79, 0x55, 0xf8,
	0xfe, 0x75, 0x75, 0xe5, 0xe5, 0xeb, 0xea, 0xca, 0xab, 0xd7, 0xd5, 0x95, 0xcf, 0x6e, 0x71, 0x7f,
	0x40, 0x54, 0x7b, 0xae, 0x8e, 0x55, 0xcb, 0x36, 0xa7, 0x68, 0x44, 0x82, 0xaf, 0x46, 0xf0, 0x8f,
	0x43, 0x5b, 0xa3, 0x17, 0xf8, 0xbb, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0x4a, 0xae, 0x2e,
	0xca, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsClient interface {
	GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	GetJobDetails(ctx context.Context, in *JobDetailsRequest, opts ...grpc.CallOption) (*JobDetailsResponse, error)
	GetJobRunDetails(ctx context.Context, in *JobRunDetailsRequest, opts ...grpc.CallOption) (*JobRunDetailsResponse, error)
}

type jobsClient struct {
	cc *grpc.ClientConn
}

func NewJobsClient(cc *grpc.ClientConn) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/api.Jobs/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJobDetails(ctx context.Context, in *JobDetailsRequest, opts ...grpc.CallOption) (*JobDetailsResponse, error) {
	out := new(JobDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.Jobs/GetJobDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJobRunDetails(ctx context.Context, in *JobRunDetailsRequest, opts ...grpc.CallOption) (*JobRunDetailsResponse, error) {
	out := new(JobRunDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.Jobs/GetJobRunDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServer is the server API for Jobs service.
type JobsServer interface {
	GetJobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	GetJobDetails(context.Context, *JobDetailsRequest) (*JobDetailsResponse, error)
	GetJobRunDetails(context.Context, *JobRunDetailsRequest) (*JobRunDetailsResponse, error)
}

// UnimplementedJobsServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (*UnimplementedJobsServer) GetJobStatus(ctx context.Context, req *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (*UnimplementedJobsServer) GetJobDetails(ctx context.Context, req *JobDetailsRequest) (*JobDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDetails not implemented")
}
func (*UnimplementedJobsServer) GetJobRunDetails(ctx context.Context, req *JobRunDetailsRequest) (*JobRunDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRunDetails not implemented")
}

func RegisterJobsServer(s *grpc.Server, srv JobsServer) {
	s.RegisterService(&_Jobs_serviceDesc, srv)
}

func _Jobs_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJobDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJobDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/GetJobDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJobDetails(ctx, req.(*JobDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJobRunDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRunDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJobRunDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/GetJobRunDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJobRunDetails(ctx, req.(*JobRunDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobStatus",
			Handler:    _Jobs_GetJobStatus_Handler,
		},
		{
			MethodName: "GetJobDetails",
			Handler:    _Jobs_GetJobDetails_Handler,
		},
		{
			MethodName: "GetJobRunDetails",
			Handler:    _Jobs_GetJobRunDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/job.proto",
}

func (m *JobRunDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRunDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishedTs != nil {
		{
			size, err := m.FinishedTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.StartedTs != nil {
		{
			size, err := m.StartedTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PendingTs != nil {
		{
			size, err := m.PendingTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.LeasedTs != nil {
		{
			size, err := m.LeasedTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobRuns) > 0 {
		for iNdEx := len(m.JobRuns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobRuns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJob(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.JobSpec != nil {
		{
			size, err := m.JobSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LatestRunId) > 0 {
		i -= len(m.LatestRunId)
		copy(dAtA[i:], m.LatestRunId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.LatestRunId)))
		i--
		dAtA[i] = 0x52
	}
	if m.LastTransitionTs != nil {
		{
			size, err := m.LastTransitionTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintJob(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x42
	}
	if m.CancelTs != nil {
		{
			size, err := m.CancelTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SubmittedTs != nil {
		{
			size, err := m.SubmittedTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.State != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Jobset) > 0 {
		i -= len(m.Jobset)
		copy(dAtA[i:], m.Jobset)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Jobset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpandJobRun {
		i--
		if m.ExpandJobRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ExpandJobSpec {
		i--
		if m.ExpandJobSpec {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.JobIds) > 0 {
		for iNdEx := len(m.JobIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JobIds[iNdEx])
			copy(dAtA[i:], m.JobIds[iNdEx])
			i = encodeVarintJob(dAtA, i, uint64(len(m.JobIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobDetails) > 0 {
		for k := range m.JobDetails {
			v := m.JobDetails[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintJob(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintJob(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintJob(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobRunDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRunDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobRunDetails) > 0 {
		for k := range m.JobRunDetails {
			v := m.JobRunDetails[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintJob(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintJob(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintJob(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobRunDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRunDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunIds) > 0 {
		for iNdEx := len(m.RunIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RunIds[iNdEx])
			copy(dAtA[i:], m.RunIds[iNdEx])
			i = encodeVarintJob(dAtA, i, uint64(len(m.RunIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobIds) > 0 {
		for iNdEx := len(m.JobIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JobIds[iNdEx])
			copy(dAtA[i:], m.JobIds[iNdEx])
			i = encodeVarintJob(dAtA, i, uint64(len(m.JobIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobStates) > 0 {
		for k := range m.JobStates {
			v := m.JobStates[k]
			baseI := i
			i = encodeVarintJob(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintJob(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintJob(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintJob(dAtA []byte, offset int, v uint64) int {
	offset -= sovJob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JobRunDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovJob(uint64(m.State))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.LeasedTs != nil {
		l = m.LeasedTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if m.PendingTs != nil {
		l = m.PendingTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if m.StartedTs != nil {
		l = m.StartedTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if m.FinishedTs != nil {
		l = m.FinishedTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func (m *JobDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Jobset)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovJob(uint64(m.State))
	}
	if m.SubmittedTs != nil {
		l = m.SubmittedTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if m.CancelTs != nil {
		l = m.CancelTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.LastTransitionTs != nil {
		l = m.LastTransitionTs.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.LatestRunId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.JobSpec != nil {
		l = m.JobSpec.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if len(m.JobRuns) > 0 {
		for _, e := range m.JobRuns {
			l = e.Size()
			n += 1 + l + sovJob(uint64(l))
		}
	}
	return n
}

func (m *JobDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobIds) > 0 {
		for _, s := range m.JobIds {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	if m.ExpandJobSpec {
		n += 2
	}
	if m.ExpandJobRun {
		n += 2
	}
	return n
}

func (m *JobDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobDetails) > 0 {
		for k, v := range m.JobDetails {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovJob(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovJob(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovJob(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *JobRunDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobRunDetails) > 0 {
		for k, v := range m.JobRunDetails {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovJob(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovJob(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovJob(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *JobRunDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RunIds) > 0 {
		for _, s := range m.RunIds {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	return n
}

func (m *JobStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobIds) > 0 {
		for _, s := range m.JobIds {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	return n
}

func (m *JobStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobStates) > 0 {
		for k, v := range m.JobStates {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovJob(uint64(len(k))) + 1 + sovJob(uint64(v))
			n += mapEntrySize + 1 + sovJob(uint64(mapEntrySize))
		}
	}
	return n
}

func sovJob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJob(x uint64) (n int) {
	return sovJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JobRunDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobRunDetails{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`LeasedTs:` + strings.Replace(fmt.Sprintf("%v", this.LeasedTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`PendingTs:` + strings.Replace(fmt.Sprintf("%v", this.PendingTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartedTs:` + strings.Replace(fmt.Sprintf("%v", this.StartedTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`FinishedTs:` + strings.Replace(fmt.Sprintf("%v", this.FinishedTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobDetails) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobRuns := "[]*JobRunDetails{"
	for _, f := range this.JobRuns {
		repeatedStringForJobRuns += strings.Replace(f.String(), "JobRunDetails", "JobRunDetails", 1) + ","
	}
	repeatedStringForJobRuns += "}"
	s := strings.Join([]string{`&JobDetails{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Jobset:` + fmt.Sprintf("%v", this.Jobset) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`SubmittedTs:` + strings.Replace(fmt.Sprintf("%v", this.SubmittedTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`CancelTs:` + strings.Replace(fmt.Sprintf("%v", this.CancelTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`CancelReason:` + fmt.Sprintf("%v", this.CancelReason) + `,`,
		`LastTransitionTs:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTs), "Timestamp", "types.Timestamp", 1) + `,`,
		`LatestRunId:` + fmt.Sprintf("%v", this.LatestRunId) + `,`,
		`JobSpec:` + strings.Replace(fmt.Sprintf("%v", this.JobSpec), "Job", "Job", 1) + `,`,
		`JobRuns:` + repeatedStringForJobRuns + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobDetailsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobDetailsRequest{`,
		`JobIds:` + fmt.Sprintf("%v", this.JobIds) + `,`,
		`ExpandJobSpec:` + fmt.Sprintf("%v", this.ExpandJobSpec) + `,`,
		`ExpandJobRun:` + fmt.Sprintf("%v", this.ExpandJobRun) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForJobDetails := make([]string, 0, len(this.JobDetails))
	for k, _ := range this.JobDetails {
		keysForJobDetails = append(keysForJobDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForJobDetails)
	mapStringForJobDetails := "map[string]*JobDetails{"
	for _, k := range keysForJobDetails {
		mapStringForJobDetails += fmt.Sprintf("%v: %v,", k, this.JobDetails[k])
	}
	mapStringForJobDetails += "}"
	s := strings.Join([]string{`&JobDetailsResponse{`,
		`JobDetails:` + mapStringForJobDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobRunDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForJobRunDetails := make([]string, 0, len(this.JobRunDetails))
	for k, _ := range this.JobRunDetails {
		keysForJobRunDetails = append(keysForJobRunDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForJobRunDetails)
	mapStringForJobRunDetails := "map[string]*JobRunDetails{"
	for _, k := range keysForJobRunDetails {
		mapStringForJobRunDetails += fmt.Sprintf("%v: %v,", k, this.JobRunDetails[k])
	}
	mapStringForJobRunDetails += "}"
	s := strings.Join([]string{`&JobRunDetailsResponse{`,
		`JobRunDetails:` + mapStringForJobRunDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobRunDetailsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobRunDetailsRequest{`,
		`RunIds:` + fmt.Sprintf("%v", this.RunIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobStatusRequest{`,
		`JobIds:` + fmt.Sprintf("%v", this.JobIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForJobStates := make([]string, 0, len(this.JobStates))
	for k, _ := range this.JobStates {
		keysForJobStates = append(keysForJobStates, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForJobStates)
	mapStringForJobStates := "map[string]JobState{"
	for _, k := range keysForJobStates {
		mapStringForJobStates += fmt.Sprintf("%v: %v,", k, this.JobStates[k])
	}
	mapStringForJobStates += "}"
	s := strings.Join([]string{`&JobStatusResponse{`,
		`JobStates:` + mapStringForJobStates + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringJob(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JobRunDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= JobRunState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeasedTs == nil {
				m.LeasedTs = &types.Timestamp{}
			}
			if err := m.LeasedTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingTs == nil {
				m.PendingTs = &types.Timestamp{}
			}
			if err := m.PendingTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTs == nil {
				m.StartedTs = &types.Timestamp{}
			}
			if err := m.StartedTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishedTs == nil {
				m.FinishedTs = &types.Timestamp{}
			}
			if err := m.FinishedTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= JobState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmittedTs == nil {
				m.SubmittedTs = &types.Timestamp{}
			}
			if err := m.SubmittedTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelTs == nil {
				m.CancelTs = &types.Timestamp{}
			}
			if err := m.CancelTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTs == nil {
				m.LastTransitionTs = &types.Timestamp{}
			}
			if err := m.LastTransitionTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobSpec == nil {
				m.JobSpec = &Job{}
			}
			if err := m.JobSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRuns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobRuns = append(m.JobRuns, &JobRunDetails{})
			if err := m.JobRuns[len(m.JobRuns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobIds = append(m.JobIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpandJobSpec", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpandJobSpec = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpandJobRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpandJobRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobDetails == nil {
				m.JobDetails = make(map[string]*JobDetails)
			}
			var mapkey string
			var mapvalue *JobDetails
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJob
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthJob
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthJob
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthJob
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthJob
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JobDetails{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJob(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthJob
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.JobDetails[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRunDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRunDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobRunDetails == nil {
				m.JobRunDetails = make(map[string]*JobRunDetails)
			}
			var mapkey string
			var mapvalue *JobRunDetails
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJob
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthJob
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthJob
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthJob
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthJob
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JobRunDetails{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJob(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthJob
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.JobRunDetails[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRunDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunIds = append(m.RunIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobIds = append(m.JobIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobStates == nil {
				m.JobStates = make(map[string]JobState)
			}
			var mapkey string
			var mapvalue JobState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJob
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthJob
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthJob
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJob
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= JobState(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJob(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthJob
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.JobStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJob = fmt.Errorf("proto: unexpected end of group")
)
