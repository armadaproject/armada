// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pkg/api/event.proto

package api

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cause int32

const (
	Cause_Error            Cause = 0
	Cause_Evicted          Cause = 1
	Cause_OOM              Cause = 2
	Cause_DeadlineExceeded Cause = 3
	Cause_Rejected         Cause = 4
)

// Enum value maps for Cause.
var (
	Cause_name = map[int32]string{
		0: "Error",
		1: "Evicted",
		2: "OOM",
		3: "DeadlineExceeded",
		4: "Rejected",
	}
	Cause_value = map[string]int32{
		"Error":            0,
		"Evicted":          1,
		"OOM":              2,
		"DeadlineExceeded": 3,
		"Rejected":         4,
	}
)

func (x Cause) Enum() *Cause {
	p := new(Cause)
	*p = x
	return p
}

func (x Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_event_proto_enumTypes[0].Descriptor()
}

func (Cause) Type() protoreflect.EnumType {
	return &file_pkg_api_event_proto_enumTypes[0]
}

func (x Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cause.Descriptor instead.
func (Cause) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{0}
}

type JobSubmittedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Job           *Job                   `protobuf:"bytes,5,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSubmittedEvent) Reset() {
	*x = JobSubmittedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSubmittedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSubmittedEvent) ProtoMessage() {}

func (x *JobSubmittedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSubmittedEvent.ProtoReflect.Descriptor instead.
func (*JobSubmittedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{0}
}

func (x *JobSubmittedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSubmittedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobSubmittedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobSubmittedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobSubmittedEvent) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type JobQueuedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobQueuedEvent) Reset() {
	*x = JobQueuedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobQueuedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueuedEvent) ProtoMessage() {}

func (x *JobQueuedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueuedEvent.ProtoReflect.Descriptor instead.
func (*JobQueuedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{1}
}

func (x *JobQueuedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobQueuedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobQueuedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobQueuedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type JobLeasedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobLeasedEvent) Reset() {
	*x = JobLeasedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobLeasedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLeasedEvent) ProtoMessage() {}

func (x *JobLeasedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLeasedEvent.ProtoReflect.Descriptor instead.
func (*JobLeasedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{2}
}

func (x *JobLeasedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobLeasedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobLeasedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobLeasedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobLeasedEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type JobLeaseReturnedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,7,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	PodNumber     int32                  `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	RunAttempted  bool                   `protobuf:"varint,9,opt,name=run_attempted,json=runAttempted,proto3" json:"run_attempted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobLeaseReturnedEvent) Reset() {
	*x = JobLeaseReturnedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobLeaseReturnedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLeaseReturnedEvent) ProtoMessage() {}

func (x *JobLeaseReturnedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLeaseReturnedEvent.ProtoReflect.Descriptor instead.
func (*JobLeaseReturnedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{3}
}

func (x *JobLeaseReturnedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobLeaseReturnedEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobLeaseReturnedEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobLeaseReturnedEvent) GetRunAttempted() bool {
	if x != nil {
		return x.RunAttempted
	}
	return false
}

type JobLeaseExpiredEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobLeaseExpiredEvent) Reset() {
	*x = JobLeaseExpiredEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobLeaseExpiredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLeaseExpiredEvent) ProtoMessage() {}

func (x *JobLeaseExpiredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLeaseExpiredEvent.ProtoReflect.Descriptor instead.
func (*JobLeaseExpiredEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{4}
}

func (x *JobLeaseExpiredEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobLeaseExpiredEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobLeaseExpiredEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobLeaseExpiredEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type JobPendingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	PodNumber     int32                  `protobuf:"varint,7,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName       string                 `protobuf:"bytes,8,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,9,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobPendingEvent) Reset() {
	*x = JobPendingEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobPendingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPendingEvent) ProtoMessage() {}

func (x *JobPendingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPendingEvent.ProtoReflect.Descriptor instead.
func (*JobPendingEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{5}
}

func (x *JobPendingEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobPendingEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobPendingEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobPendingEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobPendingEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobPendingEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobPendingEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobPendingEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobPendingEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type JobRunningEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	NodeName      string                 `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber     int32                  `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName       string                 `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobRunningEvent) Reset() {
	*x = JobRunningEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunningEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunningEvent) ProtoMessage() {}

func (x *JobRunningEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunningEvent.ProtoReflect.Descriptor instead.
func (*JobRunningEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{6}
}

func (x *JobRunningEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobRunningEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobRunningEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobRunningEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobRunningEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobRunningEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobRunningEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobRunningEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobRunningEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobRunningEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type JobIngressInfoEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	JobId            string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId         string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue            string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId        string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId     string                 `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	NodeName         string                 `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber        int32                  `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName          string                 `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace     string                 `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	IngressAddresses map[int32]string       `protobuf:"bytes,9,rep,name=ingress_addresses,json=ingressAddresses,proto3" json:"ingress_addresses,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JobIngressInfoEvent) Reset() {
	*x = JobIngressInfoEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobIngressInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobIngressInfoEvent) ProtoMessage() {}

func (x *JobIngressInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobIngressInfoEvent.ProtoReflect.Descriptor instead.
func (*JobIngressInfoEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{7}
}

func (x *JobIngressInfoEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobIngressInfoEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobIngressInfoEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobIngressInfoEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobIngressInfoEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobIngressInfoEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobIngressInfoEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobIngressInfoEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobIngressInfoEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobIngressInfoEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *JobIngressInfoEvent) GetIngressAddresses() map[int32]string {
	if x != nil {
		return x.IngressAddresses
	}
	return nil
}

type JobUnableToScheduleEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,7,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	NodeName      string                 `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber     int32                  `protobuf:"varint,9,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName       string                 `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobUnableToScheduleEvent) Reset() {
	*x = JobUnableToScheduleEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobUnableToScheduleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobUnableToScheduleEvent) ProtoMessage() {}

func (x *JobUnableToScheduleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobUnableToScheduleEvent.ProtoReflect.Descriptor instead.
func (*JobUnableToScheduleEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{8}
}

func (x *JobUnableToScheduleEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobUnableToScheduleEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobUnableToScheduleEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobUnableToScheduleEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type JobFailedEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	JobId     string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId  string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue     string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Reason    string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// Deprecated: Marked as deprecated in pkg/api/event.proto.
	ExitCodes         map[string]int32   `protobuf:"bytes,7,rep,name=exit_codes,json=exitCodes,proto3" json:"exit_codes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	KubernetesId      string             `protobuf:"bytes,8,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	NodeName          string             `protobuf:"bytes,9,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber         int32              `protobuf:"varint,10,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName           string             `protobuf:"bytes,13,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace      string             `protobuf:"bytes,14,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	ContainerStatuses []*ContainerStatus `protobuf:"bytes,11,rep,name=container_statuses,json=containerStatuses,proto3" json:"container_statuses,omitempty"`
	Cause             Cause              `protobuf:"varint,12,opt,name=cause,proto3,enum=api.Cause" json:"cause,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *JobFailedEvent) Reset() {
	*x = JobFailedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFailedEvent) ProtoMessage() {}

func (x *JobFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFailedEvent.ProtoReflect.Descriptor instead.
func (*JobFailedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{9}
}

func (x *JobFailedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobFailedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobFailedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobFailedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobFailedEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobFailedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/api/event.proto.
func (x *JobFailedEvent) GetExitCodes() map[string]int32 {
	if x != nil {
		return x.ExitCodes
	}
	return nil
}

func (x *JobFailedEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobFailedEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobFailedEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobFailedEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobFailedEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *JobFailedEvent) GetContainerStatuses() []*ContainerStatus {
	if x != nil {
		return x.ContainerStatuses
	}
	return nil
}

func (x *JobFailedEvent) GetCause() Cause {
	if x != nil {
		return x.Cause
	}
	return Cause_Error
}

type JobPreemptingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Requestor     string                 `protobuf:"bytes,5,opt,name=requestor,proto3" json:"requestor,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobPreemptingEvent) Reset() {
	*x = JobPreemptingEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobPreemptingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPreemptingEvent) ProtoMessage() {}

func (x *JobPreemptingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPreemptingEvent.ProtoReflect.Descriptor instead.
func (*JobPreemptingEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{10}
}

func (x *JobPreemptingEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobPreemptingEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobPreemptingEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobPreemptingEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobPreemptingEvent) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

func (x *JobPreemptingEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type JobPreemptedEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	JobId           string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId        string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue           string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId       string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	RunId           string                 `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	PreemptiveJobId string                 `protobuf:"bytes,7,opt,name=preemptive_job_id,json=preemptiveJobId,proto3" json:"preemptive_job_id,omitempty"`
	PreemptiveRunId string                 `protobuf:"bytes,8,opt,name=preemptive_run_id,json=preemptiveRunId,proto3" json:"preemptive_run_id,omitempty"`
	Reason          string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JobPreemptedEvent) Reset() {
	*x = JobPreemptedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobPreemptedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPreemptedEvent) ProtoMessage() {}

func (x *JobPreemptedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPreemptedEvent.ProtoReflect.Descriptor instead.
func (*JobPreemptedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{11}
}

func (x *JobPreemptedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobPreemptedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobPreemptedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobPreemptedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobPreemptedEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobPreemptedEvent) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *JobPreemptedEvent) GetPreemptiveJobId() string {
	if x != nil {
		return x.PreemptiveJobId
	}
	return ""
}

func (x *JobPreemptedEvent) GetPreemptiveRunId() string {
	if x != nil {
		return x.PreemptiveRunId
	}
	return ""
}

func (x *JobPreemptedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type JobSucceededEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	NodeName      string                 `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber     int32                  `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName       string                 `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSucceededEvent) Reset() {
	*x = JobSucceededEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSucceededEvent) ProtoMessage() {}

func (x *JobSucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSucceededEvent.ProtoReflect.Descriptor instead.
func (*JobSucceededEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{12}
}

func (x *JobSucceededEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSucceededEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobSucceededEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobSucceededEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobSucceededEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobSucceededEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobSucceededEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobSucceededEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobSucceededEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobSucceededEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type JobUtilisationEvent struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	JobId                 string                        `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId              string                        `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue                 string                        `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created               *timestamppb.Timestamp        `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId             string                        `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId          string                        `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	MaxResourcesForPeriod map[string]*resource.Quantity `protobuf:"bytes,7,rep,name=MaxResourcesForPeriod,proto3" json:"MaxResourcesForPeriod,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeName              string                        `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber             int32                         `protobuf:"varint,9,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName               string                        `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace          string                        `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	TotalCumulativeUsage  map[string]*resource.Quantity `protobuf:"bytes,12,rep,name=total_cumulative_usage,json=totalCumulativeUsage,proto3" json:"total_cumulative_usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AvgResourcesForPeriod map[string]*resource.Quantity `protobuf:"bytes,13,rep,name=AvgResourcesForPeriod,proto3" json:"AvgResourcesForPeriod,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JobUtilisationEvent) Reset() {
	*x = JobUtilisationEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobUtilisationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobUtilisationEvent) ProtoMessage() {}

func (x *JobUtilisationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobUtilisationEvent.ProtoReflect.Descriptor instead.
func (*JobUtilisationEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{13}
}

func (x *JobUtilisationEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobUtilisationEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobUtilisationEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobUtilisationEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobUtilisationEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobUtilisationEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobUtilisationEvent) GetMaxResourcesForPeriod() map[string]*resource.Quantity {
	if x != nil {
		return x.MaxResourcesForPeriod
	}
	return nil
}

func (x *JobUtilisationEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JobUtilisationEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobUtilisationEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobUtilisationEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *JobUtilisationEvent) GetTotalCumulativeUsage() map[string]*resource.Quantity {
	if x != nil {
		return x.TotalCumulativeUsage
	}
	return nil
}

func (x *JobUtilisationEvent) GetAvgResourcesForPeriod() map[string]*resource.Quantity {
	if x != nil {
		return x.AvgResourcesForPeriod
	}
	return nil
}

type JobReprioritizingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	NewPriority   float64                `protobuf:"fixed64,5,opt,name=new_priority,json=newPriority,proto3" json:"new_priority,omitempty"`
	Requestor     string                 `protobuf:"bytes,6,opt,name=requestor,proto3" json:"requestor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobReprioritizingEvent) Reset() {
	*x = JobReprioritizingEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobReprioritizingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReprioritizingEvent) ProtoMessage() {}

func (x *JobReprioritizingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReprioritizingEvent.ProtoReflect.Descriptor instead.
func (*JobReprioritizingEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{14}
}

func (x *JobReprioritizingEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobReprioritizingEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobReprioritizingEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobReprioritizingEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobReprioritizingEvent) GetNewPriority() float64 {
	if x != nil {
		return x.NewPriority
	}
	return 0
}

func (x *JobReprioritizingEvent) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

type JobReprioritizedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	NewPriority   float64                `protobuf:"fixed64,5,opt,name=new_priority,json=newPriority,proto3" json:"new_priority,omitempty"`
	Requestor     string                 `protobuf:"bytes,6,opt,name=requestor,proto3" json:"requestor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobReprioritizedEvent) Reset() {
	*x = JobReprioritizedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobReprioritizedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReprioritizedEvent) ProtoMessage() {}

func (x *JobReprioritizedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReprioritizedEvent.ProtoReflect.Descriptor instead.
func (*JobReprioritizedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{15}
}

func (x *JobReprioritizedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobReprioritizedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobReprioritizedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobReprioritizedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobReprioritizedEvent) GetNewPriority() float64 {
	if x != nil {
		return x.NewPriority
	}
	return 0
}

func (x *JobReprioritizedEvent) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

type JobCancellingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Requestor     string                 `protobuf:"bytes,5,opt,name=requestor,proto3" json:"requestor,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobCancellingEvent) Reset() {
	*x = JobCancellingEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobCancellingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCancellingEvent) ProtoMessage() {}

func (x *JobCancellingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCancellingEvent.ProtoReflect.Descriptor instead.
func (*JobCancellingEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{16}
}

func (x *JobCancellingEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobCancellingEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobCancellingEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobCancellingEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobCancellingEvent) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

func (x *JobCancellingEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type JobCancelledEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Requestor     string                 `protobuf:"bytes,5,opt,name=requestor,proto3" json:"requestor,omitempty"`
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobCancelledEvent) Reset() {
	*x = JobCancelledEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobCancelledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCancelledEvent) ProtoMessage() {}

func (x *JobCancelledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCancelledEvent.ProtoReflect.Descriptor instead.
func (*JobCancelledEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{17}
}

func (x *JobCancelledEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobCancelledEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobCancelledEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobCancelledEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobCancelledEvent) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

func (x *JobCancelledEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type JobTerminatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue         string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubernetesId  string                 `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	PodNumber     int32                  `protobuf:"varint,7,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName       string                 `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	Reason        string                 `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobTerminatedEvent) Reset() {
	*x = JobTerminatedEvent{}
	mi := &file_pkg_api_event_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobTerminatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobTerminatedEvent) ProtoMessage() {}

func (x *JobTerminatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobTerminatedEvent.ProtoReflect.Descriptor instead.
func (*JobTerminatedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{18}
}

func (x *JobTerminatedEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobTerminatedEvent) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *JobTerminatedEvent) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobTerminatedEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobTerminatedEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobTerminatedEvent) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *JobTerminatedEvent) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *JobTerminatedEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *JobTerminatedEvent) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *JobTerminatedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EventMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Events:
	//
	//	*EventMessage_Submitted
	//	*EventMessage_Queued
	//	*EventMessage_Leased
	//	*EventMessage_LeaseReturned
	//	*EventMessage_LeaseExpired
	//	*EventMessage_Pending
	//	*EventMessage_Running
	//	*EventMessage_UnableToSchedule
	//	*EventMessage_Failed
	//	*EventMessage_Succeeded
	//	*EventMessage_Reprioritized
	//	*EventMessage_Cancelling
	//	*EventMessage_Cancelled
	//	*EventMessage_Utilisation
	//	*EventMessage_IngressInfo
	//	*EventMessage_Reprioritizing
	//	*EventMessage_Preempted
	//	*EventMessage_Preempting
	Events        isEventMessage_Events `protobuf_oneof:"events"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	mi := &file_pkg_api_event_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{19}
}

func (x *EventMessage) GetEvents() isEventMessage_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventMessage) GetSubmitted() *JobSubmittedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Submitted); ok {
			return x.Submitted
		}
	}
	return nil
}

func (x *EventMessage) GetQueued() *JobQueuedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Queued); ok {
			return x.Queued
		}
	}
	return nil
}

func (x *EventMessage) GetLeased() *JobLeasedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Leased); ok {
			return x.Leased
		}
	}
	return nil
}

func (x *EventMessage) GetLeaseReturned() *JobLeaseReturnedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_LeaseReturned); ok {
			return x.LeaseReturned
		}
	}
	return nil
}

func (x *EventMessage) GetLeaseExpired() *JobLeaseExpiredEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_LeaseExpired); ok {
			return x.LeaseExpired
		}
	}
	return nil
}

func (x *EventMessage) GetPending() *JobPendingEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Pending); ok {
			return x.Pending
		}
	}
	return nil
}

func (x *EventMessage) GetRunning() *JobRunningEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Running); ok {
			return x.Running
		}
	}
	return nil
}

func (x *EventMessage) GetUnableToSchedule() *JobUnableToScheduleEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_UnableToSchedule); ok {
			return x.UnableToSchedule
		}
	}
	return nil
}

func (x *EventMessage) GetFailed() *JobFailedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Failed); ok {
			return x.Failed
		}
	}
	return nil
}

func (x *EventMessage) GetSucceeded() *JobSucceededEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Succeeded); ok {
			return x.Succeeded
		}
	}
	return nil
}

func (x *EventMessage) GetReprioritized() *JobReprioritizedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Reprioritized); ok {
			return x.Reprioritized
		}
	}
	return nil
}

func (x *EventMessage) GetCancelling() *JobCancellingEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Cancelling); ok {
			return x.Cancelling
		}
	}
	return nil
}

func (x *EventMessage) GetCancelled() *JobCancelledEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Cancelled); ok {
			return x.Cancelled
		}
	}
	return nil
}

func (x *EventMessage) GetUtilisation() *JobUtilisationEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Utilisation); ok {
			return x.Utilisation
		}
	}
	return nil
}

func (x *EventMessage) GetIngressInfo() *JobIngressInfoEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_IngressInfo); ok {
			return x.IngressInfo
		}
	}
	return nil
}

func (x *EventMessage) GetReprioritizing() *JobReprioritizingEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Reprioritizing); ok {
			return x.Reprioritizing
		}
	}
	return nil
}

func (x *EventMessage) GetPreempted() *JobPreemptedEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Preempted); ok {
			return x.Preempted
		}
	}
	return nil
}

func (x *EventMessage) GetPreempting() *JobPreemptingEvent {
	if x != nil {
		if x, ok := x.Events.(*EventMessage_Preempting); ok {
			return x.Preempting
		}
	}
	return nil
}

type isEventMessage_Events interface {
	isEventMessage_Events()
}

type EventMessage_Submitted struct {
	Submitted *JobSubmittedEvent `protobuf:"bytes,1,opt,name=submitted,proto3,oneof"`
}

type EventMessage_Queued struct {
	Queued *JobQueuedEvent `protobuf:"bytes,2,opt,name=queued,proto3,oneof"`
}

type EventMessage_Leased struct {
	Leased *JobLeasedEvent `protobuf:"bytes,3,opt,name=leased,proto3,oneof"`
}

type EventMessage_LeaseReturned struct {
	LeaseReturned *JobLeaseReturnedEvent `protobuf:"bytes,4,opt,name=lease_returned,json=leaseReturned,proto3,oneof"`
}

type EventMessage_LeaseExpired struct {
	LeaseExpired *JobLeaseExpiredEvent `protobuf:"bytes,5,opt,name=lease_expired,json=leaseExpired,proto3,oneof"`
}

type EventMessage_Pending struct {
	Pending *JobPendingEvent `protobuf:"bytes,6,opt,name=pending,proto3,oneof"`
}

type EventMessage_Running struct {
	Running *JobRunningEvent `protobuf:"bytes,7,opt,name=running,proto3,oneof"`
}

type EventMessage_UnableToSchedule struct {
	UnableToSchedule *JobUnableToScheduleEvent `protobuf:"bytes,8,opt,name=unable_to_schedule,json=unableToSchedule,proto3,oneof"`
}

type EventMessage_Failed struct {
	Failed *JobFailedEvent `protobuf:"bytes,9,opt,name=failed,proto3,oneof"`
}

type EventMessage_Succeeded struct {
	Succeeded *JobSucceededEvent `protobuf:"bytes,10,opt,name=succeeded,proto3,oneof"`
}

type EventMessage_Reprioritized struct {
	Reprioritized *JobReprioritizedEvent `protobuf:"bytes,11,opt,name=reprioritized,proto3,oneof"`
}

type EventMessage_Cancelling struct {
	Cancelling *JobCancellingEvent `protobuf:"bytes,12,opt,name=cancelling,proto3,oneof"`
}

type EventMessage_Cancelled struct {
	Cancelled *JobCancelledEvent `protobuf:"bytes,13,opt,name=cancelled,proto3,oneof"`
}

type EventMessage_Utilisation struct {
	Utilisation *JobUtilisationEvent `protobuf:"bytes,15,opt,name=utilisation,proto3,oneof"`
}

type EventMessage_IngressInfo struct {
	IngressInfo *JobIngressInfoEvent `protobuf:"bytes,17,opt,name=ingress_info,json=ingressInfo,proto3,oneof"`
}

type EventMessage_Reprioritizing struct {
	Reprioritizing *JobReprioritizingEvent `protobuf:"bytes,18,opt,name=reprioritizing,proto3,oneof"`
}

type EventMessage_Preempted struct {
	Preempted *JobPreemptedEvent `protobuf:"bytes,21,opt,name=preempted,proto3,oneof"`
}

type EventMessage_Preempting struct {
	Preempting *JobPreemptingEvent `protobuf:"bytes,22,opt,name=preempting,proto3,oneof"`
}

func (*EventMessage_Submitted) isEventMessage_Events() {}

func (*EventMessage_Queued) isEventMessage_Events() {}

func (*EventMessage_Leased) isEventMessage_Events() {}

func (*EventMessage_LeaseReturned) isEventMessage_Events() {}

func (*EventMessage_LeaseExpired) isEventMessage_Events() {}

func (*EventMessage_Pending) isEventMessage_Events() {}

func (*EventMessage_Running) isEventMessage_Events() {}

func (*EventMessage_UnableToSchedule) isEventMessage_Events() {}

func (*EventMessage_Failed) isEventMessage_Events() {}

func (*EventMessage_Succeeded) isEventMessage_Events() {}

func (*EventMessage_Reprioritized) isEventMessage_Events() {}

func (*EventMessage_Cancelling) isEventMessage_Events() {}

func (*EventMessage_Cancelled) isEventMessage_Events() {}

func (*EventMessage_Utilisation) isEventMessage_Events() {}

func (*EventMessage_IngressInfo) isEventMessage_Events() {}

func (*EventMessage_Reprioritizing) isEventMessage_Events() {}

func (*EventMessage_Preempted) isEventMessage_Events() {}

func (*EventMessage_Preempting) isEventMessage_Events() {}

type ContainerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExitCode      int32                  `protobuf:"varint,2,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Cause         Cause                  `protobuf:"varint,5,opt,name=cause,proto3,enum=api.Cause" json:"cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	mi := &file_pkg_api_event_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{20}
}

func (x *ContainerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerStatus) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ContainerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContainerStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerStatus) GetCause() Cause {
	if x != nil {
		return x.Cause
	}
	return Cause_Error
}

// swagger:model
type EventStreamMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       *EventMessage          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStreamMessage) Reset() {
	*x = EventStreamMessage{}
	mi := &file_pkg_api_event_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamMessage) ProtoMessage() {}

func (x *EventStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamMessage.ProtoReflect.Descriptor instead.
func (*EventStreamMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{21}
}

func (x *EventStreamMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventStreamMessage) GetMessage() *EventMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// swagger:model
type JobSetRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Watch          bool                   `protobuf:"varint,2,opt,name=watch,proto3" json:"watch,omitempty"`
	FromMessageId  string                 `protobuf:"bytes,3,opt,name=from_message_id,json=fromMessageId,proto3" json:"from_message_id,omitempty"`
	Queue          string                 `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	ErrorIfMissing bool                   `protobuf:"varint,5,opt,name=errorIfMissing,proto3" json:"errorIfMissing,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JobSetRequest) Reset() {
	*x = JobSetRequest{}
	mi := &file_pkg_api_event_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetRequest) ProtoMessage() {}

func (x *JobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetRequest.ProtoReflect.Descriptor instead.
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{22}
}

func (x *JobSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobSetRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *JobSetRequest) GetFromMessageId() string {
	if x != nil {
		return x.FromMessageId
	}
	return ""
}

func (x *JobSetRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *JobSetRequest) GetErrorIfMissing() bool {
	if x != nil {
		return x.ErrorIfMissing
	}
	return false
}

type WatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobSetId      string                 `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	FromId        string                 `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	mi := &file_pkg_api_event_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_event_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_event_proto_rawDescGZIP(), []int{23}
}

func (x *WatchRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *WatchRequest) GetJobSetId() string {
	if x != nil {
		return x.JobSetId
	}
	return ""
}

func (x *WatchRequest) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

var File_pkg_api_event_proto protoreflect.FileDescriptor

var file_pkg_api_event_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x91, 0x01, 0x0a, 0x0e,
	0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xb0, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb8, 0x02, 0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x22, 0x97, 0x01,
	0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xd2, 0x02, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xf8, 0x03, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5b, 0x0a,
	0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf3, 0x02, 0x0a, 0x18, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd5, 0x04, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01,
	0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xba, 0x02, 0x0a, 0x11,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x11, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x83, 0x08, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x15,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a,
	0x15, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x15, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x78, 0x0a, 0x1a, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x77, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x78, 0x0a, 0x1a, 0x41,
	0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x22, 0xcb,
	0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a,
	0x11, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd0, 0x02, 0x0a, 0x12, 0x4a, 0x6f,
	0x62, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbd, 0x08, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4d,
	0x0a, 0x12, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x2a, 0x4c, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x76, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x32, 0xe6, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x30,
	0x01, 0x12, 0x3a, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x07, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x14, 0x41, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_pkg_api_event_proto_rawDescOnce sync.Once
	file_pkg_api_event_proto_rawDescData []byte
)

func file_pkg_api_event_proto_rawDescGZIP() []byte {
	file_pkg_api_event_proto_rawDescOnce.Do(func() {
		file_pkg_api_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_api_event_proto_rawDesc), len(file_pkg_api_event_proto_rawDesc)))
	})
	return file_pkg_api_event_proto_rawDescData
}

var file_pkg_api_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_api_event_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_pkg_api_event_proto_goTypes = []any{
	(Cause)(0),                       // 0: api.Cause
	(*JobSubmittedEvent)(nil),        // 1: api.JobSubmittedEvent
	(*JobQueuedEvent)(nil),           // 2: api.JobQueuedEvent
	(*JobLeasedEvent)(nil),           // 3: api.JobLeasedEvent
	(*JobLeaseReturnedEvent)(nil),    // 4: api.JobLeaseReturnedEvent
	(*JobLeaseExpiredEvent)(nil),     // 5: api.JobLeaseExpiredEvent
	(*JobPendingEvent)(nil),          // 6: api.JobPendingEvent
	(*JobRunningEvent)(nil),          // 7: api.JobRunningEvent
	(*JobIngressInfoEvent)(nil),      // 8: api.JobIngressInfoEvent
	(*JobUnableToScheduleEvent)(nil), // 9: api.JobUnableToScheduleEvent
	(*JobFailedEvent)(nil),           // 10: api.JobFailedEvent
	(*JobPreemptingEvent)(nil),       // 11: api.JobPreemptingEvent
	(*JobPreemptedEvent)(nil),        // 12: api.JobPreemptedEvent
	(*JobSucceededEvent)(nil),        // 13: api.JobSucceededEvent
	(*JobUtilisationEvent)(nil),      // 14: api.JobUtilisationEvent
	(*JobReprioritizingEvent)(nil),   // 15: api.JobReprioritizingEvent
	(*JobReprioritizedEvent)(nil),    // 16: api.JobReprioritizedEvent
	(*JobCancellingEvent)(nil),       // 17: api.JobCancellingEvent
	(*JobCancelledEvent)(nil),        // 18: api.JobCancelledEvent
	(*JobTerminatedEvent)(nil),       // 19: api.JobTerminatedEvent
	(*EventMessage)(nil),             // 20: api.EventMessage
	(*ContainerStatus)(nil),          // 21: api.ContainerStatus
	(*EventStreamMessage)(nil),       // 22: api.EventStreamMessage
	(*JobSetRequest)(nil),            // 23: api.JobSetRequest
	(*WatchRequest)(nil),             // 24: api.WatchRequest
	nil,                              // 25: api.JobIngressInfoEvent.IngressAddressesEntry
	nil,                              // 26: api.JobFailedEvent.ExitCodesEntry
	nil,                              // 27: api.JobUtilisationEvent.MaxResourcesForPeriodEntry
	nil,                              // 28: api.JobUtilisationEvent.TotalCumulativeUsageEntry
	nil,                              // 29: api.JobUtilisationEvent.AvgResourcesForPeriodEntry
	(*timestamppb.Timestamp)(nil),    // 30: google.protobuf.Timestamp
	(*Job)(nil),                      // 31: api.Job
	(*resource.Quantity)(nil),        // 32: k8s.io.apimachinery.pkg.api.resource.Quantity
	(*emptypb.Empty)(nil),            // 33: google.protobuf.Empty
	(*HealthCheckResponse)(nil),      // 34: api.HealthCheckResponse
}
var file_pkg_api_event_proto_depIdxs = []int32{
	30, // 0: api.JobSubmittedEvent.created:type_name -> google.protobuf.Timestamp
	31, // 1: api.JobSubmittedEvent.job:type_name -> api.Job
	30, // 2: api.JobQueuedEvent.created:type_name -> google.protobuf.Timestamp
	30, // 3: api.JobLeasedEvent.created:type_name -> google.protobuf.Timestamp
	30, // 4: api.JobLeaseReturnedEvent.created:type_name -> google.protobuf.Timestamp
	30, // 5: api.JobLeaseExpiredEvent.created:type_name -> google.protobuf.Timestamp
	30, // 6: api.JobPendingEvent.created:type_name -> google.protobuf.Timestamp
	30, // 7: api.JobRunningEvent.created:type_name -> google.protobuf.Timestamp
	30, // 8: api.JobIngressInfoEvent.created:type_name -> google.protobuf.Timestamp
	25, // 9: api.JobIngressInfoEvent.ingress_addresses:type_name -> api.JobIngressInfoEvent.IngressAddressesEntry
	30, // 10: api.JobUnableToScheduleEvent.created:type_name -> google.protobuf.Timestamp
	30, // 11: api.JobFailedEvent.created:type_name -> google.protobuf.Timestamp
	26, // 12: api.JobFailedEvent.exit_codes:type_name -> api.JobFailedEvent.ExitCodesEntry
	21, // 13: api.JobFailedEvent.container_statuses:type_name -> api.ContainerStatus
	0,  // 14: api.JobFailedEvent.cause:type_name -> api.Cause
	30, // 15: api.JobPreemptingEvent.created:type_name -> google.protobuf.Timestamp
	30, // 16: api.JobPreemptedEvent.created:type_name -> google.protobuf.Timestamp
	30, // 17: api.JobSucceededEvent.created:type_name -> google.protobuf.Timestamp
	30, // 18: api.JobUtilisationEvent.created:type_name -> google.protobuf.Timestamp
	27, // 19: api.JobUtilisationEvent.MaxResourcesForPeriod:type_name -> api.JobUtilisationEvent.MaxResourcesForPeriodEntry
	28, // 20: api.JobUtilisationEvent.total_cumulative_usage:type_name -> api.JobUtilisationEvent.TotalCumulativeUsageEntry
	29, // 21: api.JobUtilisationEvent.AvgResourcesForPeriod:type_name -> api.JobUtilisationEvent.AvgResourcesForPeriodEntry
	30, // 22: api.JobReprioritizingEvent.created:type_name -> google.protobuf.Timestamp
	30, // 23: api.JobReprioritizedEvent.created:type_name -> google.protobuf.Timestamp
	30, // 24: api.JobCancellingEvent.created:type_name -> google.protobuf.Timestamp
	30, // 25: api.JobCancelledEvent.created:type_name -> google.protobuf.Timestamp
	30, // 26: api.JobTerminatedEvent.created:type_name -> google.protobuf.Timestamp
	1,  // 27: api.EventMessage.submitted:type_name -> api.JobSubmittedEvent
	2,  // 28: api.EventMessage.queued:type_name -> api.JobQueuedEvent
	3,  // 29: api.EventMessage.leased:type_name -> api.JobLeasedEvent
	4,  // 30: api.EventMessage.lease_returned:type_name -> api.JobLeaseReturnedEvent
	5,  // 31: api.EventMessage.lease_expired:type_name -> api.JobLeaseExpiredEvent
	6,  // 32: api.EventMessage.pending:type_name -> api.JobPendingEvent
	7,  // 33: api.EventMessage.running:type_name -> api.JobRunningEvent
	9,  // 34: api.EventMessage.unable_to_schedule:type_name -> api.JobUnableToScheduleEvent
	10, // 35: api.EventMessage.failed:type_name -> api.JobFailedEvent
	13, // 36: api.EventMessage.succeeded:type_name -> api.JobSucceededEvent
	16, // 37: api.EventMessage.reprioritized:type_name -> api.JobReprioritizedEvent
	17, // 38: api.EventMessage.cancelling:type_name -> api.JobCancellingEvent
	18, // 39: api.EventMessage.cancelled:type_name -> api.JobCancelledEvent
	14, // 40: api.EventMessage.utilisation:type_name -> api.JobUtilisationEvent
	8,  // 41: api.EventMessage.ingress_info:type_name -> api.JobIngressInfoEvent
	15, // 42: api.EventMessage.reprioritizing:type_name -> api.JobReprioritizingEvent
	12, // 43: api.EventMessage.preempted:type_name -> api.JobPreemptedEvent
	11, // 44: api.EventMessage.preempting:type_name -> api.JobPreemptingEvent
	0,  // 45: api.ContainerStatus.cause:type_name -> api.Cause
	20, // 46: api.EventStreamMessage.message:type_name -> api.EventMessage
	32, // 47: api.JobUtilisationEvent.MaxResourcesForPeriodEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	32, // 48: api.JobUtilisationEvent.TotalCumulativeUsageEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	32, // 49: api.JobUtilisationEvent.AvgResourcesForPeriodEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	23, // 50: api.Event.GetJobSetEvents:input_type -> api.JobSetRequest
	24, // 51: api.Event.Watch:input_type -> api.WatchRequest
	33, // 52: api.Event.Health:input_type -> google.protobuf.Empty
	22, // 53: api.Event.GetJobSetEvents:output_type -> api.EventStreamMessage
	22, // 54: api.Event.Watch:output_type -> api.EventStreamMessage
	34, // 55: api.Event.Health:output_type -> api.HealthCheckResponse
	53, // [53:56] is the sub-list for method output_type
	50, // [50:53] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_pkg_api_event_proto_init() }
func file_pkg_api_event_proto_init() {
	if File_pkg_api_event_proto != nil {
		return
	}
	file_pkg_api_submit_proto_init()
	file_pkg_api_health_proto_init()
	file_pkg_api_event_proto_msgTypes[19].OneofWrappers = []any{
		(*EventMessage_Submitted)(nil),
		(*EventMessage_Queued)(nil),
		(*EventMessage_Leased)(nil),
		(*EventMessage_LeaseReturned)(nil),
		(*EventMessage_LeaseExpired)(nil),
		(*EventMessage_Pending)(nil),
		(*EventMessage_Running)(nil),
		(*EventMessage_UnableToSchedule)(nil),
		(*EventMessage_Failed)(nil),
		(*EventMessage_Succeeded)(nil),
		(*EventMessage_Reprioritized)(nil),
		(*EventMessage_Cancelling)(nil),
		(*EventMessage_Cancelled)(nil),
		(*EventMessage_Utilisation)(nil),
		(*EventMessage_IngressInfo)(nil),
		(*EventMessage_Reprioritizing)(nil),
		(*EventMessage_Preempted)(nil),
		(*EventMessage_Preempting)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_api_event_proto_rawDesc), len(file_pkg_api_event_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_event_proto_goTypes,
		DependencyIndexes: file_pkg_api_event_proto_depIdxs,
		EnumInfos:         file_pkg_api_event_proto_enumTypes,
		MessageInfos:      file_pkg_api_event_proto_msgTypes,
	}.Build()
	File_pkg_api_event_proto = out.File
	file_pkg_api_event_proto_goTypes = nil
	file_pkg_api_event_proto_depIdxs = nil
}
