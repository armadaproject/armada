// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/event.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cause int32

const (
	Cause_Error            Cause = 0
	Cause_Evicted          Cause = 1
	Cause_OOM              Cause = 2
	Cause_DeadlineExceeded Cause = 3
)

var Cause_name = map[int32]string{
	0: "Error",
	1: "Evicted",
	2: "OOM",
	3: "DeadlineExceeded",
}

var Cause_value = map[string]int32{
	"Error":            0,
	"Evicted":          1,
	"OOM":              2,
	"DeadlineExceeded": 3,
}

func (x Cause) String() string {
	return proto.EnumName(Cause_name, int32(x))
}

func (Cause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{0}
}

type JobSubmittedEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	Job      Job       `protobuf:"bytes,5,opt,name=job,proto3" json:"job"`
}

func (m *JobSubmittedEvent) Reset()      { *m = JobSubmittedEvent{} }
func (*JobSubmittedEvent) ProtoMessage() {}
func (*JobSubmittedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{0}
}
func (m *JobSubmittedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmittedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmittedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmittedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmittedEvent.Merge(m, src)
}
func (m *JobSubmittedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmittedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmittedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmittedEvent proto.InternalMessageInfo

func (m *JobSubmittedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobSubmittedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobSubmittedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSubmittedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobSubmittedEvent) GetJob() Job {
	if m != nil {
		return m.Job
	}
	return Job{}
}

type JobQueuedEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
}

func (m *JobQueuedEvent) Reset()      { *m = JobQueuedEvent{} }
func (*JobQueuedEvent) ProtoMessage() {}
func (*JobQueuedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{1}
}
func (m *JobQueuedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobQueuedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobQueuedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobQueuedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobQueuedEvent.Merge(m, src)
}
func (m *JobQueuedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobQueuedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobQueuedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobQueuedEvent proto.InternalMessageInfo

func (m *JobQueuedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobQueuedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobQueuedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobQueuedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobDuplicateFoundEvent struct {
	JobId         string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId      string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue         string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created       time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	OriginalJobId string    `protobuf:"bytes,5,opt,name=original_job_id,json=originalJobId,proto3" json:"originalJobId,omitempty"`
}

func (m *JobDuplicateFoundEvent) Reset()      { *m = JobDuplicateFoundEvent{} }
func (*JobDuplicateFoundEvent) ProtoMessage() {}
func (*JobDuplicateFoundEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{2}
}
func (m *JobDuplicateFoundEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobDuplicateFoundEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobDuplicateFoundEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobDuplicateFoundEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDuplicateFoundEvent.Merge(m, src)
}
func (m *JobDuplicateFoundEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobDuplicateFoundEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDuplicateFoundEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobDuplicateFoundEvent proto.InternalMessageInfo

func (m *JobDuplicateFoundEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobDuplicateFoundEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobDuplicateFoundEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobDuplicateFoundEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobDuplicateFoundEvent) GetOriginalJobId() string {
	if m != nil {
		return m.OriginalJobId
	}
	return ""
}

type JobLeasedEvent struct {
	JobId     string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId  string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue     string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created   time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
}

func (m *JobLeasedEvent) Reset()      { *m = JobLeasedEvent{} }
func (*JobLeasedEvent) ProtoMessage() {}
func (*JobLeasedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{3}
}
func (m *JobLeasedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeasedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeasedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeasedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeasedEvent.Merge(m, src)
}
func (m *JobLeasedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeasedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeasedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeasedEvent proto.InternalMessageInfo

func (m *JobLeasedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeasedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeasedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeasedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobLeasedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type JobLeaseReturnedEvent struct {
	JobId     string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId  string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue     string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created   time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	Reason    string    `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *JobLeaseReturnedEvent) Reset()      { *m = JobLeaseReturnedEvent{} }
func (*JobLeaseReturnedEvent) ProtoMessage() {}
func (*JobLeaseReturnedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{4}
}
func (m *JobLeaseReturnedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeaseReturnedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeaseReturnedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeaseReturnedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeaseReturnedEvent.Merge(m, src)
}
func (m *JobLeaseReturnedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeaseReturnedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeaseReturnedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeaseReturnedEvent proto.InternalMessageInfo

func (m *JobLeaseReturnedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobLeaseReturnedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type JobLeaseExpiredEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
}

func (m *JobLeaseExpiredEvent) Reset()      { *m = JobLeaseExpiredEvent{} }
func (*JobLeaseExpiredEvent) ProtoMessage() {}
func (*JobLeaseExpiredEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{5}
}
func (m *JobLeaseExpiredEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeaseExpiredEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeaseExpiredEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeaseExpiredEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeaseExpiredEvent.Merge(m, src)
}
func (m *JobLeaseExpiredEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeaseExpiredEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeaseExpiredEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeaseExpiredEvent proto.InternalMessageInfo

func (m *JobLeaseExpiredEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobPendingEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	PodNumber    int32     `protobuf:"varint,7,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName      string    `protobuf:"bytes,8,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace string    `protobuf:"bytes,9,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (m *JobPendingEvent) Reset()      { *m = JobPendingEvent{} }
func (*JobPendingEvent) ProtoMessage() {}
func (*JobPendingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{6}
}
func (m *JobPendingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobPendingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobPendingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobPendingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobPendingEvent.Merge(m, src)
}
func (m *JobPendingEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobPendingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobPendingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobPendingEvent proto.InternalMessageInfo

func (m *JobPendingEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobPendingEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobPendingEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobPendingEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobPendingEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobPendingEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobPendingEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobPendingEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobPendingEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

type JobRunningEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber    int32     `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName      string    `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace string    `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (m *JobRunningEvent) Reset()      { *m = JobRunningEvent{} }
func (*JobRunningEvent) ProtoMessage() {}
func (*JobRunningEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{7}
}
func (m *JobRunningEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunningEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunningEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunningEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunningEvent.Merge(m, src)
}
func (m *JobRunningEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobRunningEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunningEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunningEvent proto.InternalMessageInfo

func (m *JobRunningEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobRunningEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobRunningEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobRunningEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobRunningEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobRunningEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobRunningEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobRunningEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobRunningEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobRunningEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

type JobIngressInfoEvent struct {
	JobId            string           `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId         string           `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue            string           `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created          time.Time        `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId        string           `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId     string           `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	NodeName         string           `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber        int32            `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName          string           `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace     string           `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
	IngressAddresses map[int32]string `protobuf:"bytes,9,rep,name=ingress_addresses,json=ingressAddresses,proto3" json:"ingressAddresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *JobIngressInfoEvent) Reset()      { *m = JobIngressInfoEvent{} }
func (*JobIngressInfoEvent) ProtoMessage() {}
func (*JobIngressInfoEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{8}
}
func (m *JobIngressInfoEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobIngressInfoEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobIngressInfoEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobIngressInfoEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobIngressInfoEvent.Merge(m, src)
}
func (m *JobIngressInfoEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobIngressInfoEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobIngressInfoEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobIngressInfoEvent proto.InternalMessageInfo

func (m *JobIngressInfoEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobIngressInfoEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobIngressInfoEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobIngressInfoEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobIngressInfoEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobIngressInfoEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobIngressInfoEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobIngressInfoEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobIngressInfoEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobIngressInfoEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *JobIngressInfoEvent) GetIngressAddresses() map[int32]string {
	if m != nil {
		return m.IngressAddresses
	}
	return nil
}

type JobUnableToScheduleEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	Reason       string    `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	KubernetesId string    `protobuf:"bytes,7,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber    int32     `protobuf:"varint,9,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName      string    `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace string    `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (m *JobUnableToScheduleEvent) Reset()      { *m = JobUnableToScheduleEvent{} }
func (*JobUnableToScheduleEvent) ProtoMessage() {}
func (*JobUnableToScheduleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{9}
}
func (m *JobUnableToScheduleEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobUnableToScheduleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobUnableToScheduleEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobUnableToScheduleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobUnableToScheduleEvent.Merge(m, src)
}
func (m *JobUnableToScheduleEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobUnableToScheduleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobUnableToScheduleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobUnableToScheduleEvent proto.InternalMessageInfo

func (m *JobUnableToScheduleEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobUnableToScheduleEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobUnableToScheduleEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

type JobFailedEvent struct {
	JobId             string             `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId          string             `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue             string             `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created           time.Time          `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId         string             `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	Reason            string             `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	ExitCodes         map[string]int32   `protobuf:"bytes,7,rep,name=exit_codes,json=exitCodes,proto3" json:"exitCodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Deprecated: Do not use.
	KubernetesId      string             `protobuf:"bytes,8,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	NodeName          string             `protobuf:"bytes,9,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber         int32              `protobuf:"varint,10,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName           string             `protobuf:"bytes,13,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace      string             `protobuf:"bytes,14,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
	ContainerStatuses []*ContainerStatus `protobuf:"bytes,11,rep,name=container_statuses,json=containerStatuses,proto3" json:"containerStatuses,omitempty"`
	Cause             Cause              `protobuf:"varint,12,opt,name=cause,proto3,enum=api.Cause" json:"cause,omitempty"`
}

func (m *JobFailedEvent) Reset()      { *m = JobFailedEvent{} }
func (*JobFailedEvent) ProtoMessage() {}
func (*JobFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{10}
}
func (m *JobFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobFailedEvent.Merge(m, src)
}
func (m *JobFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobFailedEvent proto.InternalMessageInfo

func (m *JobFailedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobFailedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobFailedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobFailedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobFailedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobFailedEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Deprecated: Do not use.
func (m *JobFailedEvent) GetExitCodes() map[string]int32 {
	if m != nil {
		return m.ExitCodes
	}
	return nil
}

func (m *JobFailedEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobFailedEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobFailedEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobFailedEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobFailedEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *JobFailedEvent) GetContainerStatuses() []*ContainerStatus {
	if m != nil {
		return m.ContainerStatuses
	}
	return nil
}

func (m *JobFailedEvent) GetCause() Cause {
	if m != nil {
		return m.Cause
	}
	return Cause_Error
}

type JobSucceededEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber    int32     `protobuf:"varint,8,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName      string    `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace string    `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (m *JobSucceededEvent) Reset()      { *m = JobSucceededEvent{} }
func (*JobSucceededEvent) ProtoMessage() {}
func (*JobSucceededEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{11}
}
func (m *JobSucceededEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSucceededEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSucceededEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSucceededEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSucceededEvent.Merge(m, src)
}
func (m *JobSucceededEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobSucceededEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSucceededEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobSucceededEvent proto.InternalMessageInfo

func (m *JobSucceededEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobSucceededEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobSucceededEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSucceededEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobSucceededEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobSucceededEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobSucceededEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobSucceededEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobSucceededEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobSucceededEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

type JobUtilisationEvent struct {
	JobId                 string                       `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId              string                       `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue                 string                       `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created               time.Time                    `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId             string                       `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId          string                       `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	MaxResourcesForPeriod map[string]resource.Quantity `protobuf:"bytes,7,rep,name=MaxResourcesForPeriod,proto3" json:"MaxResourcesForPeriod" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeName              string                       `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"nodeName,omitempty"`
	PodNumber             int32                        `protobuf:"varint,9,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName               string                       `protobuf:"bytes,10,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace          string                       `protobuf:"bytes,11,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
}

func (m *JobUtilisationEvent) Reset()      { *m = JobUtilisationEvent{} }
func (*JobUtilisationEvent) ProtoMessage() {}
func (*JobUtilisationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{12}
}
func (m *JobUtilisationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobUtilisationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobUtilisationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobUtilisationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobUtilisationEvent.Merge(m, src)
}
func (m *JobUtilisationEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobUtilisationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobUtilisationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobUtilisationEvent proto.InternalMessageInfo

func (m *JobUtilisationEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobUtilisationEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobUtilisationEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobUtilisationEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobUtilisationEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobUtilisationEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobUtilisationEvent) GetMaxResourcesForPeriod() map[string]resource.Quantity {
	if m != nil {
		return m.MaxResourcesForPeriod
	}
	return nil
}

func (m *JobUtilisationEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JobUtilisationEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobUtilisationEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobUtilisationEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

type JobReprioritizingEvent struct {
	JobId       string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId    string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue       string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created     time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	NewPriority float64   `protobuf:"fixed64,5,opt,name=new_priority,json=newPriority,proto3" json:"newPriority,omitempty"`
}

func (m *JobReprioritizingEvent) Reset()      { *m = JobReprioritizingEvent{} }
func (*JobReprioritizingEvent) ProtoMessage() {}
func (*JobReprioritizingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{13}
}
func (m *JobReprioritizingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobReprioritizingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobReprioritizingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobReprioritizingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobReprioritizingEvent.Merge(m, src)
}
func (m *JobReprioritizingEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobReprioritizingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobReprioritizingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobReprioritizingEvent proto.InternalMessageInfo

func (m *JobReprioritizingEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobReprioritizingEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobReprioritizingEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobReprioritizingEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobReprioritizingEvent) GetNewPriority() float64 {
	if m != nil {
		return m.NewPriority
	}
	return 0
}

type JobReprioritizedEvent struct {
	JobId       string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId    string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue       string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created     time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	NewPriority float64   `protobuf:"fixed64,5,opt,name=new_priority,json=newPriority,proto3" json:"newPriority,omitempty"`
}

func (m *JobReprioritizedEvent) Reset()      { *m = JobReprioritizedEvent{} }
func (*JobReprioritizedEvent) ProtoMessage() {}
func (*JobReprioritizedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{14}
}
func (m *JobReprioritizedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobReprioritizedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobReprioritizedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobReprioritizedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobReprioritizedEvent.Merge(m, src)
}
func (m *JobReprioritizedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobReprioritizedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobReprioritizedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobReprioritizedEvent proto.InternalMessageInfo

func (m *JobReprioritizedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobReprioritizedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobReprioritizedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobReprioritizedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobReprioritizedEvent) GetNewPriority() float64 {
	if m != nil {
		return m.NewPriority
	}
	return 0
}

type JobCancellingEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
}

func (m *JobCancellingEvent) Reset()      { *m = JobCancellingEvent{} }
func (*JobCancellingEvent) ProtoMessage() {}
func (*JobCancellingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{15}
}
func (m *JobCancellingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancellingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancellingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancellingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancellingEvent.Merge(m, src)
}
func (m *JobCancellingEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobCancellingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancellingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancellingEvent proto.InternalMessageInfo

func (m *JobCancellingEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancellingEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancellingEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobCancellingEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobCancelledEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
}

func (m *JobCancelledEvent) Reset()      { *m = JobCancelledEvent{} }
func (*JobCancelledEvent) ProtoMessage() {}
func (*JobCancelledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{16}
}
func (m *JobCancelledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancelledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancelledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancelledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancelledEvent.Merge(m, src)
}
func (m *JobCancelledEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobCancelledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancelledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancelledEvent proto.InternalMessageInfo

func (m *JobCancelledEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancelledEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancelledEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobCancelledEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobTerminatedEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"jobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"clusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetesId,omitempty"`
	PodNumber    int32     `protobuf:"varint,7,opt,name=pod_number,json=podNumber,proto3" json:"podNumber,omitempty"`
	PodName      string    `protobuf:"bytes,9,opt,name=pod_name,json=podName,proto3" json:"podName,omitempty"`
	PodNamespace string    `protobuf:"bytes,10,opt,name=pod_namespace,json=podNamespace,proto3" json:"podNamespace,omitempty"`
	Reason       string    `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *JobTerminatedEvent) Reset()      { *m = JobTerminatedEvent{} }
func (*JobTerminatedEvent) ProtoMessage() {}
func (*JobTerminatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{17}
}
func (m *JobTerminatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobTerminatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobTerminatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobTerminatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobTerminatedEvent.Merge(m, src)
}
func (m *JobTerminatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobTerminatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobTerminatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobTerminatedEvent proto.InternalMessageInfo

func (m *JobTerminatedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobTerminatedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobTerminatedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobTerminatedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobTerminatedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobTerminatedEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobTerminatedEvent) GetPodNumber() int32 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *JobTerminatedEvent) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobTerminatedEvent) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *JobTerminatedEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type EventMessage struct {
	// Types that are valid to be assigned to Events:
	//	*EventMessage_Submitted
	//	*EventMessage_Queued
	//	*EventMessage_DuplicateFound
	//	*EventMessage_Leased
	//	*EventMessage_LeaseReturned
	//	*EventMessage_LeaseExpired
	//	*EventMessage_Pending
	//	*EventMessage_Running
	//	*EventMessage_UnableToSchedule
	//	*EventMessage_Failed
	//	*EventMessage_Succeeded
	//	*EventMessage_Reprioritized
	//	*EventMessage_Cancelling
	//	*EventMessage_Cancelled
	//	*EventMessage_Terminated
	//	*EventMessage_Utilisation
	//	*EventMessage_IngressInfo
	//	*EventMessage_Reprioritizing
	Events isEventMessage_Events `protobuf_oneof:"events"`
}

func (m *EventMessage) Reset()      { *m = EventMessage{} }
func (*EventMessage) ProtoMessage() {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{18}
}
func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return m.Size()
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

type isEventMessage_Events interface {
	isEventMessage_Events()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventMessage_Submitted struct {
	Submitted *JobSubmittedEvent `protobuf:"bytes,1,opt,name=submitted,proto3,oneof" json:"submitted,omitempty"`
}
type EventMessage_Queued struct {
	Queued *JobQueuedEvent `protobuf:"bytes,2,opt,name=queued,proto3,oneof" json:"queued,omitempty"`
}
type EventMessage_DuplicateFound struct {
	DuplicateFound *JobDuplicateFoundEvent `protobuf:"bytes,16,opt,name=duplicate_found,json=duplicateFound,proto3,oneof" json:"duplicateFound,omitempty"`
}
type EventMessage_Leased struct {
	Leased *JobLeasedEvent `protobuf:"bytes,3,opt,name=leased,proto3,oneof" json:"leased,omitempty"`
}
type EventMessage_LeaseReturned struct {
	LeaseReturned *JobLeaseReturnedEvent `protobuf:"bytes,4,opt,name=lease_returned,json=leaseReturned,proto3,oneof" json:"leaseReturned,omitempty"`
}
type EventMessage_LeaseExpired struct {
	LeaseExpired *JobLeaseExpiredEvent `protobuf:"bytes,5,opt,name=lease_expired,json=leaseExpired,proto3,oneof" json:"leaseExpired,omitempty"`
}
type EventMessage_Pending struct {
	Pending *JobPendingEvent `protobuf:"bytes,6,opt,name=pending,proto3,oneof" json:"pending,omitempty"`
}
type EventMessage_Running struct {
	Running *JobRunningEvent `protobuf:"bytes,7,opt,name=running,proto3,oneof" json:"running,omitempty"`
}
type EventMessage_UnableToSchedule struct {
	UnableToSchedule *JobUnableToScheduleEvent `protobuf:"bytes,8,opt,name=unable_to_schedule,json=unableToSchedule,proto3,oneof" json:"unableToSchedule,omitempty"`
}
type EventMessage_Failed struct {
	Failed *JobFailedEvent `protobuf:"bytes,9,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type EventMessage_Succeeded struct {
	Succeeded *JobSucceededEvent `protobuf:"bytes,10,opt,name=succeeded,proto3,oneof" json:"succeeded,omitempty"`
}
type EventMessage_Reprioritized struct {
	Reprioritized *JobReprioritizedEvent `protobuf:"bytes,11,opt,name=reprioritized,proto3,oneof" json:"reprioritized,omitempty"`
}
type EventMessage_Cancelling struct {
	Cancelling *JobCancellingEvent `protobuf:"bytes,12,opt,name=cancelling,proto3,oneof" json:"cancelling,omitempty"`
}
type EventMessage_Cancelled struct {
	Cancelled *JobCancelledEvent `protobuf:"bytes,13,opt,name=cancelled,proto3,oneof" json:"cancelled,omitempty"`
}
type EventMessage_Terminated struct {
	Terminated *JobTerminatedEvent `protobuf:"bytes,14,opt,name=terminated,proto3,oneof" json:"terminated,omitempty"`
}
type EventMessage_Utilisation struct {
	Utilisation *JobUtilisationEvent `protobuf:"bytes,15,opt,name=utilisation,proto3,oneof" json:"utilisation,omitempty"`
}
type EventMessage_IngressInfo struct {
	IngressInfo *JobIngressInfoEvent `protobuf:"bytes,17,opt,name=ingress_info,json=ingressInfo,proto3,oneof" json:"ingressInfo,omitempty"`
}
type EventMessage_Reprioritizing struct {
	Reprioritizing *JobReprioritizingEvent `protobuf:"bytes,18,opt,name=reprioritizing,proto3,oneof" json:"reprioritizing,omitempty"`
}

func (*EventMessage_Submitted) isEventMessage_Events()        {}
func (*EventMessage_Queued) isEventMessage_Events()           {}
func (*EventMessage_DuplicateFound) isEventMessage_Events()   {}
func (*EventMessage_Leased) isEventMessage_Events()           {}
func (*EventMessage_LeaseReturned) isEventMessage_Events()    {}
func (*EventMessage_LeaseExpired) isEventMessage_Events()     {}
func (*EventMessage_Pending) isEventMessage_Events()          {}
func (*EventMessage_Running) isEventMessage_Events()          {}
func (*EventMessage_UnableToSchedule) isEventMessage_Events() {}
func (*EventMessage_Failed) isEventMessage_Events()           {}
func (*EventMessage_Succeeded) isEventMessage_Events()        {}
func (*EventMessage_Reprioritized) isEventMessage_Events()    {}
func (*EventMessage_Cancelling) isEventMessage_Events()       {}
func (*EventMessage_Cancelled) isEventMessage_Events()        {}
func (*EventMessage_Terminated) isEventMessage_Events()       {}
func (*EventMessage_Utilisation) isEventMessage_Events()      {}
func (*EventMessage_IngressInfo) isEventMessage_Events()      {}
func (*EventMessage_Reprioritizing) isEventMessage_Events()   {}

func (m *EventMessage) GetEvents() isEventMessage_Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventMessage) GetSubmitted() *JobSubmittedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Submitted); ok {
		return x.Submitted
	}
	return nil
}

func (m *EventMessage) GetQueued() *JobQueuedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Queued); ok {
		return x.Queued
	}
	return nil
}

func (m *EventMessage) GetDuplicateFound() *JobDuplicateFoundEvent {
	if x, ok := m.GetEvents().(*EventMessage_DuplicateFound); ok {
		return x.DuplicateFound
	}
	return nil
}

func (m *EventMessage) GetLeased() *JobLeasedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Leased); ok {
		return x.Leased
	}
	return nil
}

func (m *EventMessage) GetLeaseReturned() *JobLeaseReturnedEvent {
	if x, ok := m.GetEvents().(*EventMessage_LeaseReturned); ok {
		return x.LeaseReturned
	}
	return nil
}

func (m *EventMessage) GetLeaseExpired() *JobLeaseExpiredEvent {
	if x, ok := m.GetEvents().(*EventMessage_LeaseExpired); ok {
		return x.LeaseExpired
	}
	return nil
}

func (m *EventMessage) GetPending() *JobPendingEvent {
	if x, ok := m.GetEvents().(*EventMessage_Pending); ok {
		return x.Pending
	}
	return nil
}

func (m *EventMessage) GetRunning() *JobRunningEvent {
	if x, ok := m.GetEvents().(*EventMessage_Running); ok {
		return x.Running
	}
	return nil
}

func (m *EventMessage) GetUnableToSchedule() *JobUnableToScheduleEvent {
	if x, ok := m.GetEvents().(*EventMessage_UnableToSchedule); ok {
		return x.UnableToSchedule
	}
	return nil
}

func (m *EventMessage) GetFailed() *JobFailedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *EventMessage) GetSucceeded() *JobSucceededEvent {
	if x, ok := m.GetEvents().(*EventMessage_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (m *EventMessage) GetReprioritized() *JobReprioritizedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Reprioritized); ok {
		return x.Reprioritized
	}
	return nil
}

func (m *EventMessage) GetCancelling() *JobCancellingEvent {
	if x, ok := m.GetEvents().(*EventMessage_Cancelling); ok {
		return x.Cancelling
	}
	return nil
}

func (m *EventMessage) GetCancelled() *JobCancelledEvent {
	if x, ok := m.GetEvents().(*EventMessage_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

func (m *EventMessage) GetTerminated() *JobTerminatedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Terminated); ok {
		return x.Terminated
	}
	return nil
}

func (m *EventMessage) GetUtilisation() *JobUtilisationEvent {
	if x, ok := m.GetEvents().(*EventMessage_Utilisation); ok {
		return x.Utilisation
	}
	return nil
}

func (m *EventMessage) GetIngressInfo() *JobIngressInfoEvent {
	if x, ok := m.GetEvents().(*EventMessage_IngressInfo); ok {
		return x.IngressInfo
	}
	return nil
}

func (m *EventMessage) GetReprioritizing() *JobReprioritizingEvent {
	if x, ok := m.GetEvents().(*EventMessage_Reprioritizing); ok {
		return x.Reprioritizing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventMessage_Submitted)(nil),
		(*EventMessage_Queued)(nil),
		(*EventMessage_DuplicateFound)(nil),
		(*EventMessage_Leased)(nil),
		(*EventMessage_LeaseReturned)(nil),
		(*EventMessage_LeaseExpired)(nil),
		(*EventMessage_Pending)(nil),
		(*EventMessage_Running)(nil),
		(*EventMessage_UnableToSchedule)(nil),
		(*EventMessage_Failed)(nil),
		(*EventMessage_Succeeded)(nil),
		(*EventMessage_Reprioritized)(nil),
		(*EventMessage_Cancelling)(nil),
		(*EventMessage_Cancelled)(nil),
		(*EventMessage_Terminated)(nil),
		(*EventMessage_Utilisation)(nil),
		(*EventMessage_IngressInfo)(nil),
		(*EventMessage_Reprioritizing)(nil),
	}
}

type ContainerStatus struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExitCode int32  `protobuf:"varint,2,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Cause    Cause  `protobuf:"varint,5,opt,name=cause,proto3,enum=api.Cause" json:"cause,omitempty"`
}

func (m *ContainerStatus) Reset()      { *m = ContainerStatus{} }
func (*ContainerStatus) ProtoMessage() {}
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{19}
}
func (m *ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatus.Merge(m, src)
}
func (m *ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatus proto.InternalMessageInfo

func (m *ContainerStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ContainerStatus) GetCause() Cause {
	if m != nil {
		return m.Cause
	}
	return Cause_Error
}

type EventList struct {
	Events []*EventMessage `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *EventList) Reset()      { *m = EventList{} }
func (*EventList) ProtoMessage() {}
func (*EventList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{20}
}
func (m *EventList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventList.Merge(m, src)
}
func (m *EventList) XXX_Size() int {
	return m.Size()
}
func (m *EventList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventList.DiscardUnknown(m)
}

var xxx_messageInfo_EventList proto.InternalMessageInfo

func (m *EventList) GetEvents() []*EventMessage {
	if m != nil {
		return m.Events
	}
	return nil
}

// swagger:model
type EventStreamMessage struct {
	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message *EventMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EventStreamMessage) Reset()      { *m = EventStreamMessage{} }
func (*EventStreamMessage) ProtoMessage() {}
func (*EventStreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{21}
}
func (m *EventStreamMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStreamMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamMessage.Merge(m, src)
}
func (m *EventStreamMessage) XXX_Size() int {
	return m.Size()
}
func (m *EventStreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamMessage proto.InternalMessageInfo

func (m *EventStreamMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventStreamMessage) GetMessage() *EventMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// swagger:model
type JobSetRequest struct {
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Watch         bool   `protobuf:"varint,2,opt,name=watch,proto3" json:"watch,omitempty"`
	FromMessageId string `protobuf:"bytes,3,opt,name=from_message_id,json=fromMessageId,proto3" json:"fromMessageId,omitempty"`
	Queue         string `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (m *JobSetRequest) Reset()      { *m = JobSetRequest{} }
func (*JobSetRequest) ProtoMessage() {}
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{22}
}
func (m *JobSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetRequest.Merge(m, src)
}
func (m *JobSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetRequest proto.InternalMessageInfo

func (m *JobSetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobSetRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *JobSetRequest) GetFromMessageId() string {
	if m != nil {
		return m.FromMessageId
	}
	return ""
}

func (m *JobSetRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.Cause", Cause_name, Cause_value)
	proto.RegisterType((*JobSubmittedEvent)(nil), "api.JobSubmittedEvent")
	proto.RegisterType((*JobQueuedEvent)(nil), "api.JobQueuedEvent")
	proto.RegisterType((*JobDuplicateFoundEvent)(nil), "api.JobDuplicateFoundEvent")
	proto.RegisterType((*JobLeasedEvent)(nil), "api.JobLeasedEvent")
	proto.RegisterType((*JobLeaseReturnedEvent)(nil), "api.JobLeaseReturnedEvent")
	proto.RegisterType((*JobLeaseExpiredEvent)(nil), "api.JobLeaseExpiredEvent")
	proto.RegisterType((*JobPendingEvent)(nil), "api.JobPendingEvent")
	proto.RegisterType((*JobRunningEvent)(nil), "api.JobRunningEvent")
	proto.RegisterType((*JobIngressInfoEvent)(nil), "api.JobIngressInfoEvent")
	proto.RegisterMapType((map[int32]string)(nil), "api.JobIngressInfoEvent.IngressAddressesEntry")
	proto.RegisterType((*JobUnableToScheduleEvent)(nil), "api.JobUnableToScheduleEvent")
	proto.RegisterType((*JobFailedEvent)(nil), "api.JobFailedEvent")
	proto.RegisterMapType((map[string]int32)(nil), "api.JobFailedEvent.ExitCodesEntry")
	proto.RegisterType((*JobSucceededEvent)(nil), "api.JobSucceededEvent")
	proto.RegisterType((*JobUtilisationEvent)(nil), "api.JobUtilisationEvent")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.JobUtilisationEvent.MaxResourcesForPeriodEntry")
	proto.RegisterType((*JobReprioritizingEvent)(nil), "api.JobReprioritizingEvent")
	proto.RegisterType((*JobReprioritizedEvent)(nil), "api.JobReprioritizedEvent")
	proto.RegisterType((*JobCancellingEvent)(nil), "api.JobCancellingEvent")
	proto.RegisterType((*JobCancelledEvent)(nil), "api.JobCancelledEvent")
	proto.RegisterType((*JobTerminatedEvent)(nil), "api.JobTerminatedEvent")
	proto.RegisterType((*EventMessage)(nil), "api.EventMessage")
	proto.RegisterType((*ContainerStatus)(nil), "api.ContainerStatus")
	proto.RegisterType((*EventList)(nil), "api.EventList")
	proto.RegisterType((*EventStreamMessage)(nil), "api.EventStreamMessage")
	proto.RegisterType((*JobSetRequest)(nil), "api.JobSetRequest")
}

func init() { proto.RegisterFile("pkg/api/event.proto", fileDescriptor_7758595c3bb8cf56) }

var fileDescriptor_7758595c3bb8cf56 = []byte{
	// 1767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x5f, 0x6f, 0x23, 0x57,
	0x15, 0xf7, 0x38, 0x71, 0x6c, 0x1f, 0x27, 0x8e, 0x73, 0x37, 0xbb, 0x9d, 0x7a, 0xbb, 0x5e, 0x33,
	0x95, 0xaa, 0x50, 0xb4, 0x76, 0xc9, 0xa2, 0x6a, 0xa9, 0x4a, 0x05, 0xc9, 0x7a, 0x71, 0xac, 0x86,
	0xee, 0x4e, 0xb6, 0x4f, 0x3c, 0x58, 0xf3, 0xe7, 0xc4, 0x7b, 0x93, 0xf1, 0xdc, 0xe9, 0xcc, 0x9d,
	0xdd, 0x84, 0xaa, 0x12, 0xea, 0x27, 0xa8, 0x84, 0x78, 0x42, 0x02, 0xf1, 0x35, 0x78, 0x81, 0x17,
	0x50, 0xa5, 0x0a, 0xa9, 0x12, 0x2f, 0x05, 0x41, 0x0b, 0xbb, 0x7c, 0x0d, 0x24, 0x74, 0xef, 0x9d,
	0xb1, 0x67, 0x1c, 0x6f, 0x02, 0x08, 0x09, 0x6f, 0xc4, 0x53, 0x3c, 0xe7, 0x9e, 0x73, 0xef, 0xb9,
	0xbf, 0x73, 0xee, 0xf9, 0x17, 0xb8, 0x12, 0x1c, 0x8f, 0xba, 0x56, 0x40, 0xbb, 0xf8, 0x18, 0x7d,
	0xde, 0x09, 0x42, 0xc6, 0x19, 0x59, 0xb2, 0x02, 0xda, 0xbc, 0x39, 0x62, 0x6c, 0xe4, 0x61, 0x57,
	0x92, 0xec, 0xf8, 0xb0, 0xcb, 0xe9, 0x18, 0x23, 0x6e, 0x8d, 0x03, 0xc5, 0xd5, 0x9c, 0x88, 0x7e,
	0x10, 0x63, 0x8c, 0x09, 0xf1, 0xfa, 0xac, 0x14, 0x8e, 0x03, 0x7e, 0x9a, 0x2c, 0xde, 0x1a, 0x51,
	0xfe, 0x28, 0xb6, 0x3b, 0x0e, 0x1b, 0x77, 0x47, 0x6c, 0xc4, 0xa6, 0x5c, 0xe2, 0x4b, 0x7e, 0xc8,
	0x5f, 0x09, 0xfb, 0x2b, 0xc9, 0x5e, 0xe2, 0x0c, 0xcb, 0xf7, 0x19, 0xb7, 0x38, 0x65, 0x7e, 0x94,
	0xac, 0x7e, 0xeb, 0xf8, 0x4e, 0xd4, 0xa1, 0x4c, 0xac, 0x8e, 0x2d, 0xe7, 0x11, 0xf5, 0x31, 0x3c,
	0xed, 0xa6, 0x2a, 0x85, 0x18, 0xb1, 0x38, 0x74, 0xb0, 0x3b, 0x42, 0x1f, 0x43, 0x8b, 0xa3, 0xab,
	0xa4, 0x8c, 0xdf, 0x68, 0xb0, 0x31, 0x60, 0xf6, 0x41, 0x6c, 0x8f, 0x29, 0xe7, 0xe8, 0xf6, 0xc4,
	0xb5, 0xc9, 0x55, 0x58, 0x39, 0x62, 0xf6, 0x90, 0xba, 0xba, 0xd6, 0xd6, 0xb6, 0xaa, 0x66, 0xe9,
	0x88, 0xd9, 0x7b, 0x2e, 0x79, 0x05, 0x40, 0x90, 0x23, 0xe4, 0x62, 0xa9, 0x28, 0x97, 0x2a, 0x47,
	0xcc, 0x3e, 0x40, 0xbe, 0xe7, 0x92, 0x4d, 0x28, 0xc9, 0x9b, 0xeb, 0x4b, 0x4a, 0x46, 0x7e, 0x90,
	0x77, 0xa0, 0xec, 0x84, 0x28, 0x4e, 0xd4, 0x97, 0xdb, 0xda, 0x56, 0x6d, 0xbb, 0xd9, 0x51, 0xd7,
	0xe8, 0xa4, 0x97, 0xed, 0x3c, 0x4c, 0x81, 0xdc, 0xa9, 0x7c, 0xfa, 0xe5, 0xcd, 0xc2, 0x27, 0x5f,
	0xdd, 0xd4, 0xcc, 0x54, 0x88, 0xb4, 0x61, 0xe9, 0x88, 0xd9, 0x7a, 0x49, 0xca, 0x56, 0x3a, 0x56,
	0x40, 0x3b, 0x03, 0x66, 0xef, 0x2c, 0x0b, 0x4e, 0x53, 0x2c, 0x19, 0x3f, 0xd3, 0xa0, 0x3e, 0x60,
	0xf6, 0x03, 0x71, 0xdc, 0xc2, 0xe9, 0x6f, 0x7c, 0xa6, 0xc1, 0xb5, 0x01, 0xb3, 0xef, 0xc6, 0x81,
	0x47, 0x1d, 0x8b, 0xe3, 0x3d, 0x16, 0xfb, 0x8b, 0x87, 0xf2, 0x6b, 0xb0, 0xce, 0x42, 0x3a, 0xa2,
	0xbe, 0xe5, 0x0d, 0x13, 0x9d, 0x4a, 0x72, 0xff, 0xb5, 0x94, 0x3c, 0x10, 0xba, 0x19, 0xbf, 0x52,
	0x58, 0xbf, 0x8b, 0x56, 0xb4, 0x80, 0xbe, 0x72, 0x03, 0xc0, 0xf1, 0xe2, 0x88, 0x63, 0x38, 0xbd,
	0x40, 0x35, 0xa1, 0xec, 0xb9, 0xc6, 0x1f, 0x35, 0xb8, 0x9a, 0x2a, 0x6f, 0x22, 0x8f, 0x43, 0xff,
	0x85, 0xbb, 0x03, 0xb9, 0x06, 0x2b, 0x21, 0x5a, 0x11, 0xf3, 0xf5, 0x15, 0xb9, 0x94, 0x7c, 0x19,
	0xbf, 0xd4, 0x60, 0x33, 0xbd, 0x5b, 0xef, 0x24, 0xa0, 0xe1, 0x02, 0x3e, 0x85, 0x5f, 0x17, 0x61,
	0x7d, 0xc0, 0xec, 0xfb, 0xe8, 0xbb, 0xd4, 0x1f, 0xbd, 0x68, 0xc8, 0xbf, 0x0a, 0x6b, 0xc7, 0xb1,
	0x8d, 0xa1, 0x8f, 0x1c, 0x23, 0xc1, 0xa1, 0x0c, 0xb0, 0x3a, 0x25, 0xee, 0xc9, 0x3d, 0x02, 0xe6,
	0x0e, 0xfd, 0x78, 0x6c, 0x63, 0xa8, 0x97, 0xdb, 0xda, 0x56, 0xc9, 0xac, 0x06, 0xcc, 0xfd, 0x81,
	0x24, 0x90, 0x97, 0xa1, 0x22, 0x97, 0xad, 0x31, 0xea, 0x15, 0x29, 0x5e, 0x16, 0x8b, 0xd6, 0x18,
	0xc5, 0xf6, 0xe9, 0x52, 0x14, 0x58, 0x0e, 0xea, 0x55, 0xb5, 0x7d, 0xb2, 0x2e, 0x69, 0xc6, 0x9f,
	0x15, 0x82, 0x66, 0xec, 0xfb, 0x97, 0x15, 0xc1, 0xeb, 0x50, 0xf5, 0x99, 0x8b, 0x0a, 0xa3, 0xb2,
	0x52, 0x5b, 0x10, 0x24, 0x48, 0x79, 0x78, 0x2b, 0xe7, 0xc1, 0x5b, 0xbd, 0x00, 0x5e, 0x98, 0x03,
	0xef, 0xc7, 0xcb, 0x70, 0x45, 0xc4, 0x39, 0x7f, 0x14, 0x62, 0x14, 0xed, 0xf9, 0x87, 0xec, 0xff,
	0x10, 0x9f, 0x03, 0x31, 0x5c, 0x00, 0x71, 0xed, 0x2c, 0xc4, 0xe4, 0x87, 0xb0, 0x41, 0x15, 0xbc,
	0x43, 0xcb, 0x75, 0xc5, 0x5f, 0x8c, 0xf4, 0x6a, 0x7b, 0x69, 0xab, 0xb6, 0xdd, 0x49, 0x93, 0xfb,
	0x2c, 0xfe, 0x9d, 0x84, 0xf0, 0xbd, 0x54, 0xa0, 0xe7, 0xf3, 0xf0, 0xd4, 0x6c, 0xd0, 0x19, 0x72,
	0x73, 0x17, 0xae, 0xce, 0x65, 0x25, 0x0d, 0x58, 0x3a, 0xc6, 0x53, 0x69, 0xbd, 0x92, 0x29, 0x7e,
	0x0a, 0xeb, 0x3c, 0xb6, 0xbc, 0x18, 0x13, 0xb3, 0xa9, 0x8f, 0xb7, 0x8a, 0x77, 0x34, 0xe3, 0x1f,
	0x45, 0xd0, 0x07, 0xcc, 0x7e, 0xdf, 0xb7, 0x6c, 0x0f, 0x1f, 0xb2, 0x03, 0xe7, 0x11, 0xba, 0xb1,
	0x87, 0x97, 0x24, 0x51, 0x9c, 0xf5, 0x90, 0xf2, 0x45, 0x1e, 0x52, 0x39, 0xd7, 0x43, 0xaa, 0xff,
	0x65, 0x0f, 0x31, 0xbe, 0x5a, 0x96, 0x25, 0xc6, 0x3d, 0x8b, 0x7a, 0x97, 0x26, 0x3d, 0x93, 0x1e,
	0x00, 0x9e, 0x50, 0x3e, 0x74, 0x98, 0x8b, 0x91, 0x5e, 0x96, 0xfe, 0x6e, 0xa4, 0xfe, 0x9e, 0xb9,
	0x6a, 0xa7, 0x77, 0x42, 0xf9, 0xae, 0x60, 0x92, 0x8e, 0xbb, 0x53, 0xd4, 0x35, 0xb3, 0x8a, 0x29,
	0xed, 0xac, 0xf1, 0x2a, 0x17, 0x19, 0xaf, 0x7a, 0xae, 0xf1, 0xe0, 0x3c, 0xe3, 0xad, 0x5d, 0x60,
	0xbc, 0xfa, 0x9c, 0xe7, 0xbd, 0x0b, 0xc4, 0x61, 0x3e, 0xb7, 0x44, 0xf7, 0x31, 0x8c, 0xb8, 0xc5,
	0x63, 0xf1, 0xbe, 0x6b, 0xf2, 0xbe, 0x9b, 0xf2, 0xbe, 0xbb, 0xe9, 0xf2, 0x81, 0x5c, 0x35, 0x37,
	0x9c, 0x3c, 0x01, 0x23, 0xd2, 0x86, 0x92, 0x63, 0xc5, 0x11, 0xea, 0xab, 0x6d, 0x6d, 0xab, 0xbe,
	0x0d, 0x4a, 0x4e, 0x50, 0x4c, 0xb5, 0xd0, 0x7c, 0x1b, 0xea, 0x79, 0xa0, 0xb2, 0x2f, 0xbc, 0x3a,
	0xe7, 0x85, 0x97, 0xb2, 0x2f, 0xfc, 0xcb, 0x62, 0xd2, 0xf3, 0x38, 0x0e, 0xa2, 0xfb, 0xe2, 0x39,
	0xd9, 0xc2, 0xe7, 0xd1, 0xcf, 0x54, 0x1e, 0x7d, 0x9f, 0x53, 0x8f, 0x46, 0xb2, 0x49, 0xbd, 0x94,
	0x10, 0x33, 0xb8, 0xba, 0x6f, 0x9d, 0x98, 0x49, 0x6b, 0x1d, 0xdd, 0x63, 0xe1, 0x7d, 0x0c, 0x29,
	0x73, 0x93, 0xf7, 0x7d, 0x3b, 0x7d, 0xdf, 0xb3, 0x38, 0x74, 0xe6, 0x4a, 0xa9, 0x07, 0xaf, 0xfa,
	0xda, 0xf9, 0xfb, 0xfe, 0x2f, 0xc3, 0x72, 0xf3, 0x04, 0x9a, 0xcf, 0x57, 0x7b, 0xce, 0xf3, 0xbb,
	0x9b, 0x7d, 0x7e, 0x22, 0xb9, 0xab, 0xf1, 0x44, 0x27, 0x3b, 0x9e, 0xe8, 0x04, 0xc7, 0x23, 0x09,
	0x52, 0x3a, 0x9e, 0xe8, 0x3c, 0x88, 0x2d, 0x9f, 0x53, 0x7e, 0x9a, 0x7d, 0xae, 0xbf, 0x53, 0x1d,
	0xb4, 0x89, 0x41, 0x48, 0x59, 0x48, 0x39, 0xfd, 0xd1, 0x22, 0xd6, 0xbe, 0x5f, 0x83, 0x55, 0x1f,
	0x9f, 0x0c, 0x13, 0x1d, 0x4f, 0xa5, 0x4b, 0x69, 0x66, 0xcd, 0xc7, 0x27, 0xf7, 0x13, 0x92, 0xf1,
	0x5b, 0xd5, 0x7f, 0x66, 0x2e, 0xb2, 0x80, 0xb1, 0xe7, 0x5f, 0xb8, 0xc7, 0x2f, 0x34, 0x20, 0x03,
	0x66, 0xef, 0x5a, 0xbe, 0x83, 0x9e, 0xb7, 0x80, 0xc6, 0x30, 0x7e, 0xae, 0xa6, 0x5a, 0x89, 0x86,
	0x0b, 0xd8, 0x0a, 0xff, 0xa9, 0x28, 0x21, 0x7c, 0x88, 0xe1, 0x98, 0xfa, 0x16, 0xbf, 0xa4, 0x39,
	0xe8, 0xdf, 0xe8, 0x86, 0xff, 0x83, 0x34, 0x93, 0x29, 0xb6, 0x2a, 0xb9, 0x59, 0xc8, 0xef, 0x2b,
	0xb0, 0x2a, 0xf1, 0xdc, 0xc7, 0x28, 0xb2, 0x46, 0x48, 0xde, 0x84, 0x6a, 0x94, 0x0e, 0x38, 0x25,
	0xb2, 0xb5, 0xed, 0x6b, 0x69, 0x70, 0xce, 0x4f, 0x3e, 0xfb, 0x05, 0x73, 0xca, 0x4a, 0x6e, 0xc1,
	0x8a, 0x04, 0xd3, 0x4d, 0x82, 0xd8, 0x95, 0x54, 0x28, 0x33, 0x6b, 0xec, 0x17, 0xcc, 0x84, 0x89,
	0xdc, 0x83, 0x75, 0x37, 0x1d, 0xf3, 0x0d, 0x0f, 0x59, 0xec, 0xbb, 0x7a, 0x43, 0xca, 0x5d, 0x4f,
	0xe5, 0xe6, 0x4c, 0x01, 0xfb, 0x05, 0xb3, 0xee, 0xe6, 0xc8, 0xe2, 0x58, 0x4f, 0x0e, 0xd8, 0xa4,
	0x45, 0x33, 0xc7, 0x66, 0xc6, 0x6e, 0xe2, 0x58, 0xc5, 0x44, 0x76, 0xa1, 0x2e, 0x7f, 0x0d, 0xc3,
	0x64, 0xa6, 0x35, 0x31, 0x78, 0x56, 0x2c, 0x37, 0xf0, 0xea, 0x17, 0xcc, 0x35, 0x2f, 0x4b, 0x25,
	0xdf, 0x05, 0x45, 0x18, 0xa2, 0x1a, 0x1e, 0x25, 0x03, 0xd7, 0x97, 0x73, 0x7b, 0x64, 0x07, 0x4b,
	0xfd, 0x82, 0xb9, 0xea, 0x65, 0x88, 0xe4, 0x0d, 0x28, 0x07, 0x6a, 0xb2, 0x23, 0x7d, 0x21, 0xad,
	0xf7, 0x66, 0x06, 0x3e, 0xfd, 0x82, 0x99, 0xb2, 0x09, 0x89, 0x50, 0x4d, 0x32, 0xa4, 0x6f, 0x64,
	0x24, 0xb2, 0x03, 0x0e, 0x21, 0x91, 0xb0, 0x91, 0x7d, 0x20, 0xb1, 0xec, 0xcb, 0x86, 0x9c, 0x0d,
	0xa3, 0xa4, 0x33, 0x93, 0xd6, 0xaf, 0x6d, 0xdf, 0x98, 0xa4, 0xdb, 0x79, 0x9d, 0x5b, 0xbf, 0x60,
	0x36, 0xe2, 0x99, 0x05, 0x01, 0xf4, 0xa1, 0xac, 0xbd, 0xa5, 0xfb, 0x65, 0x80, 0xce, 0x54, 0xe4,
	0x02, 0x68, 0xc5, 0xa4, 0xdc, 0x28, 0xa9, 0x19, 0xa5, 0x43, 0xe6, 0xdc, 0x28, 0x5b, 0x4c, 0x2a,
	0x37, 0x4a, 0x28, 0x64, 0x07, 0xd6, 0xc2, 0x6c, 0xcc, 0x97, 0xf9, 0x35, 0x63, 0x9f, 0xb3, 0x09,
	0x41, 0xd8, 0x27, 0x27, 0x42, 0xbe, 0x0d, 0xe0, 0x4c, 0xe2, 0xad, 0x2c, 0x8c, 0x6b, 0xdb, 0x2f,
	0xa5, 0x1b, 0xcc, 0x44, 0xe2, 0x7e, 0xc1, 0xcc, 0x30, 0x0b, 0xb5, 0x9d, 0x34, 0x10, 0xca, 0xa2,
	0x3e, 0xa3, 0x76, 0x3e, 0x42, 0x0a, 0xb5, 0x27, 0xac, 0xe2, 0x48, 0x3e, 0x89, 0x4f, 0xb2, 0xda,
	0xcf, 0x1c, 0x39, 0x13, 0xb9, 0xc4, 0x91, 0x53, 0x66, 0xf2, 0x36, 0xd4, 0xe2, 0x69, 0xd1, 0xa3,
	0xaf, 0x4b, 0x59, 0xfd, 0x79, 0xf5, 0x50, 0xbf, 0x60, 0x66, 0xd9, 0xc9, 0x77, 0x60, 0x35, 0x9d,
	0x11, 0x50, 0xff, 0x90, 0xe9, 0x1b, 0x79, 0xf1, 0xd9, 0xf1, 0x80, 0x10, 0xa7, 0x53, 0x1a, 0xe9,
	0x41, 0x3d, 0xcc, 0xd5, 0x0a, 0x3a, 0xc9, 0xbf, 0xc2, 0x39, 0x95, 0x84, 0x78, 0x85, 0x79, 0xa1,
	0x9d, 0x0a, 0xac, 0xc8, 0xff, 0x01, 0x45, 0xc6, 0x4f, 0x35, 0x58, 0x9f, 0x69, 0x5b, 0x08, 0x81,
	0x65, 0x19, 0xb7, 0x54, 0x9c, 0x96, 0xbf, 0x49, 0x13, 0x2a, 0x69, 0xab, 0x96, 0x34, 0x1d, 0x93,
	0x6f, 0xa2, 0x43, 0x79, 0xac, 0xa2, 0x51, 0x12, 0xa6, 0xd3, 0xcf, 0x4c, 0x14, 0x5b, 0xce, 0xb5,
	0x8c, 0x93, 0x2e, 0xa8, 0xf4, 0x9c, 0x2e, 0xc8, 0x78, 0x13, 0xaa, 0x52, 0xf9, 0x77, 0x69, 0xc4,
	0xc9, 0xd7, 0x53, 0x75, 0x75, 0x4d, 0x56, 0x9f, 0x1b, 0x92, 0x3f, 0x1b, 0x06, 0xcd, 0xf4, 0x3e,
	0x0f, 0x80, 0x48, 0xfa, 0x01, 0x0f, 0xd1, 0x1a, 0xa7, 0x41, 0xb2, 0x0e, 0xc5, 0x49, 0xde, 0x29,
	0x52, 0x97, 0x7c, 0x63, 0xaa, 0xb1, 0x8a, 0x7e, 0x73, 0x76, 0x4c, 0x39, 0x8c, 0x08, 0xd6, 0x06,
	0x32, 0x1f, 0x99, 0xf8, 0x41, 0x8c, 0x11, 0x3f, 0xb3, 0xdb, 0x26, 0x94, 0x9e, 0x58, 0xdc, 0x79,
	0x24, 0xf7, 0xaa, 0x98, 0xea, 0x83, 0xbc, 0x06, 0xeb, 0x87, 0x21, 0x1b, 0x0f, 0x93, 0x6d, 0x44,
	0x1e, 0x51, 0xe8, 0xac, 0x09, 0x72, 0x72, 0x4a, 0x36, 0xc5, 0x2d, 0x67, 0x52, 0xdc, 0xeb, 0xef,
	0x40, 0x49, 0xe2, 0x41, 0xaa, 0x50, 0xea, 0x85, 0x21, 0x0b, 0x1b, 0x05, 0x52, 0x83, 0x72, 0xef,
	0x31, 0x75, 0x38, 0xba, 0x0d, 0x8d, 0x94, 0x61, 0xe9, 0xbd, 0xf7, 0xf6, 0x1b, 0x45, 0xb2, 0x09,
	0x8d, 0xbb, 0x68, 0xb9, 0x1e, 0xf5, 0xb1, 0x77, 0xa2, 0x5e, 0x65, 0x63, 0x69, 0xfb, 0x2f, 0x1a,
	0x94, 0x54, 0xde, 0xbd, 0x03, 0x75, 0x13, 0x03, 0x16, 0xf2, 0xfd, 0xd8, 0xe3, 0x34, 0xf0, 0x90,
	0xd4, 0xa7, 0x97, 0x15, 0xf0, 0x36, 0xaf, 0x9d, 0xc9, 0x9e, 0xbd, 0x71, 0xc0, 0x4f, 0xc9, 0x6d,
	0x58, 0x51, 0x92, 0xe4, 0x2c, 0x3c, 0xcf, 0x15, 0x42, 0x58, 0xff, 0x3e, 0x72, 0x05, 0x98, 0x14,
	0x88, 0x08, 0x99, 0x04, 0x92, 0x09, 0x86, 0xcd, 0x97, 0xa6, 0x3b, 0xe6, 0x4c, 0x65, 0xbc, 0xfa,
	0xf1, 0x1f, 0xfe, 0xfe, 0x93, 0xe2, 0x0d, 0x43, 0xef, 0x3e, 0xfe, 0x66, 0xf7, 0x88, 0xd9, 0xb7,
	0x22, 0xe4, 0xdd, 0x0f, 0x25, 0x28, 0x1f, 0x75, 0x3f, 0xa4, 0xee, 0x47, 0x6f, 0x69, 0xaf, 0xbf,
	0xa1, 0xed, 0xb4, 0xbf, 0xf8, 0x5b, 0xab, 0xf0, 0xe3, 0xa7, 0x2d, 0xed, 0xd3, 0xa7, 0x2d, 0xed,
	0xf3, 0xa7, 0x2d, 0xed, 0xaf, 0x4f, 0x5b, 0xda, 0x27, 0xcf, 0x5a, 0x85, 0xcf, 0x9f, 0xb5, 0x0a,
	0x5f, 0x3c, 0x6b, 0x15, 0xec, 0x15, 0xa9, 0xd8, 0xed, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0x31, 0x3e, 0xf6, 0xf6, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	ReportMultiple(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error)
	Report(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*types.Empty, error)
	GetJobSetEvents(ctx context.Context, in *JobSetRequest, opts ...grpc.CallOption) (Event_GetJobSetEventsClient, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) ReportMultiple(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Event/ReportMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Report(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Event/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetJobSetEvents(ctx context.Context, in *JobSetRequest, opts ...grpc.CallOption) (Event_GetJobSetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Event_serviceDesc.Streams[0], "/api.Event/GetJobSetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventGetJobSetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Event_GetJobSetEventsClient interface {
	Recv() (*EventStreamMessage, error)
	grpc.ClientStream
}

type eventGetJobSetEventsClient struct {
	grpc.ClientStream
}

func (x *eventGetJobSetEventsClient) Recv() (*EventStreamMessage, error) {
	m := new(EventStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	ReportMultiple(context.Context, *EventList) (*types.Empty, error)
	Report(context.Context, *EventMessage) (*types.Empty, error)
	GetJobSetEvents(*JobSetRequest, Event_GetJobSetEventsServer) error
}

// UnimplementedEventServer can be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (*UnimplementedEventServer) ReportMultiple(ctx context.Context, req *EventList) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMultiple not implemented")
}
func (*UnimplementedEventServer) Report(ctx context.Context, req *EventMessage) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedEventServer) GetJobSetEvents(req *JobSetRequest, srv Event_GetJobSetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobSetEvents not implemented")
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_ReportMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ReportMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Event/ReportMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ReportMultiple(ctx, req.(*EventList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Event/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Report(ctx, req.(*EventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetJobSetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobSetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServer).GetJobSetEvents(m, &eventGetJobSetEventsServer{stream})
}

type Event_GetJobSetEventsServer interface {
	Send(*EventStreamMessage) error
	grpc.ServerStream
}

type eventGetJobSetEventsServer struct {
	grpc.ServerStream
}

func (x *eventGetJobSetEventsServer) Send(m *EventStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportMultiple",
			Handler:    _Event_ReportMultiple_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Event_Report_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobSetEvents",
			Handler:       _Event_GetJobSetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/event.proto",
}

func (m *JobSubmittedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmittedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSubmittedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvent(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobQueuedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobQueuedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobQueuedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintEvent(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobDuplicateFoundEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobDuplicateFoundEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobDuplicateFoundEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalJobId) > 0 {
		i -= len(m.OriginalJobId)
		copy(dAtA[i:], m.OriginalJobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.OriginalJobId)))
		i--
		dAtA[i] = 0x2a
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintEvent(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLeasedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeasedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLeasedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintEvent(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLeaseReturnedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeaseReturnedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLeaseReturnedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintEvent(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLeaseExpiredEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeaseExpiredEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLeaseExpiredEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintEvent(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobPendingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobPendingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobPendingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x42
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintEvent(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobRunningEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunningEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRunningEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintEvent(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobIngressInfoEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobIngressInfoEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobIngressInfoEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IngressAddresses) > 0 {
		for k := range m.IngressAddresses {
			v := m.IngressAddresses[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintEvent(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobUnableToScheduleEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobUnableToScheduleEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobUnableToScheduleEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x52
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintEvent(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobFailedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Cause != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ContainerStatuses) > 0 {
		for iNdEx := len(m.ContainerStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContainerStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x50
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExitCodes) > 0 {
		for k := range m.ExitCodes {
			v := m.ExitCodes[k]
			baseI := i
			i = encodeVarintEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintEvent(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobSucceededEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSucceededEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSucceededEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintEvent(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobUtilisationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobUtilisationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobUtilisationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x52
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MaxResourcesForPeriod) > 0 {
		for k := range m.MaxResourcesForPeriod {
			v := m.MaxResourcesForPeriod[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintEvent(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobReprioritizingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobReprioritizingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobReprioritizingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewPriority != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NewPriority))))
		i--
		dAtA[i] = 0x29
	}
	n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err16 != nil {
		return 0, err16
	}
	i -= n16
	i = encodeVarintEvent(dAtA, i, uint64(n16))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobReprioritizedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobReprioritizedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobReprioritizedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewPriority != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NewPriority))))
		i--
		dAtA[i] = 0x29
	}
	n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintEvent(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobCancellingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancellingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobCancellingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintEvent(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobCancelledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancelledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobCancelledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintEvent(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobTerminatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobTerminatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobTerminatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if m.PodNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.KubernetesId) > 0 {
		i -= len(m.KubernetesId)
		copy(dAtA[i:], m.KubernetesId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintEvent(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x22
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Events != nil {
		{
			size := m.Events.Size()
			i -= size
			if _, err := m.Events.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventMessage_Submitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Submitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Submitted != nil {
		{
			size, err := m.Submitted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Queued) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Queued) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Queued != nil {
		{
			size, err := m.Queued.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Leased) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Leased) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Leased != nil {
		{
			size, err := m.Leased.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_LeaseReturned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_LeaseReturned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeaseReturned != nil {
		{
			size, err := m.LeaseReturned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_LeaseExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_LeaseExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeaseExpired != nil {
		{
			size, err := m.LeaseExpired.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Pending) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Pending) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pending != nil {
		{
			size, err := m.Pending.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Running) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Running) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Running != nil {
		{
			size, err := m.Running.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_UnableToSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_UnableToSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnableToSchedule != nil {
		{
			size, err := m.UnableToSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Succeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Succeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Succeeded != nil {
		{
			size, err := m.Succeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Reprioritized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Reprioritized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reprioritized != nil {
		{
			size, err := m.Reprioritized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Cancelling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Cancelling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelling != nil {
		{
			size, err := m.Cancelling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Cancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelled != nil {
		{
			size, err := m.Cancelled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Terminated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Terminated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terminated != nil {
		{
			size, err := m.Terminated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Utilisation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Utilisation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Utilisation != nil {
		{
			size, err := m.Utilisation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_DuplicateFound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_DuplicateFound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DuplicateFound != nil {
		{
			size, err := m.DuplicateFound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_IngressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_IngressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IngressInfo != nil {
		{
			size, err := m.IngressInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *EventMessage_Reprioritizing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMessage_Reprioritizing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reprioritizing != nil {
		{
			size, err := m.Reprioritizing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cause != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExitCode != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventStreamMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStreamMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStreamMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromMessageId) > 0 {
		i -= len(m.FromMessageId)
		copy(dAtA[i:], m.FromMessageId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FromMessageId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Watch {
		i--
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JobSubmittedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = m.Job.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobQueuedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobDuplicateFoundEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.OriginalJobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobLeasedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobLeaseReturnedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobLeaseExpiredEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobPendingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobRunningEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobIngressInfoEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	if len(m.IngressAddresses) > 0 {
		for k, v := range m.IngressAddresses {
			_ = k
			_ = v
			mapEntrySize := 1 + sovEvent(uint64(k)) + 1 + len(v) + sovEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobUnableToScheduleEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.ExitCodes) > 0 {
		for k, v := range m.ExitCodes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEvent(uint64(len(k))) + 1 + sovEvent(uint64(v))
			n += mapEntrySize + 1 + sovEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	if len(m.ContainerStatuses) > 0 {
		for _, e := range m.ContainerStatuses {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.Cause != 0 {
		n += 1 + sovEvent(uint64(m.Cause))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobSucceededEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobUtilisationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.MaxResourcesForPeriod) > 0 {
		for k, v := range m.MaxResourcesForPeriod {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovEvent(uint64(len(k))) + 1 + l + sovEvent(uint64(l))
			n += mapEntrySize + 1 + sovEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobReprioritizingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	if m.NewPriority != 0 {
		n += 9
	}
	return n
}

func (m *JobReprioritizedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	if m.NewPriority != 0 {
		n += 9
	}
	return n
}

func (m *JobCancellingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobCancelledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobTerminatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovEvent(uint64(m.PodNumber))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Events != nil {
		n += m.Events.Size()
	}
	return n
}

func (m *EventMessage_Submitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Submitted != nil {
		l = m.Submitted.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Queued) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queued != nil {
		l = m.Queued.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Leased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leased != nil {
		l = m.Leased.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_LeaseReturned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaseReturned != nil {
		l = m.LeaseReturned.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_LeaseExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaseExpired != nil {
		l = m.LeaseExpired.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Pending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pending != nil {
		l = m.Pending.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Running) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Running != nil {
		l = m.Running.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_UnableToSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnableToSchedule != nil {
		l = m.UnableToSchedule.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Succeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded != nil {
		l = m.Succeeded.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Reprioritized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reprioritized != nil {
		l = m.Reprioritized.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Cancelling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelling != nil {
		l = m.Cancelling.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Terminated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terminated != nil {
		l = m.Terminated.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Utilisation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Utilisation != nil {
		l = m.Utilisation.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_DuplicateFound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DuplicateFound != nil {
		l = m.DuplicateFound.Size()
		n += 2 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_IngressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IngressInfo != nil {
		l = m.IngressInfo.Size()
		n += 2 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Reprioritizing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reprioritizing != nil {
		l = m.Reprioritizing.Size()
		n += 2 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ExitCode != 0 {
		n += 1 + sovEvent(uint64(m.ExitCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovEvent(uint64(m.Cause))
	}
	return n
}

func (m *EventList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventStreamMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Watch {
		n += 2
	}
	l = len(m.FromMessageId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JobSubmittedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSubmittedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Job:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Job), "Job", "Job", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobQueuedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobQueuedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobDuplicateFoundEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobDuplicateFoundEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`OriginalJobId:` + fmt.Sprintf("%v", this.OriginalJobId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeasedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeasedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeaseReturnedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeaseReturnedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeaseExpiredEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeaseExpiredEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobPendingEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobPendingEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobRunningEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobRunningEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobIngressInfoEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForIngressAddresses := make([]int32, 0, len(this.IngressAddresses))
	for k, _ := range this.IngressAddresses {
		keysForIngressAddresses = append(keysForIngressAddresses, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForIngressAddresses)
	mapStringForIngressAddresses := "map[int32]string{"
	for _, k := range keysForIngressAddresses {
		mapStringForIngressAddresses += fmt.Sprintf("%v: %v,", k, this.IngressAddresses[k])
	}
	mapStringForIngressAddresses += "}"
	s := strings.Join([]string{`&JobIngressInfoEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`IngressAddresses:` + mapStringForIngressAddresses + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobUnableToScheduleEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobUnableToScheduleEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobFailedEvent) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContainerStatuses := "[]*ContainerStatus{"
	for _, f := range this.ContainerStatuses {
		repeatedStringForContainerStatuses += strings.Replace(f.String(), "ContainerStatus", "ContainerStatus", 1) + ","
	}
	repeatedStringForContainerStatuses += "}"
	keysForExitCodes := make([]string, 0, len(this.ExitCodes))
	for k, _ := range this.ExitCodes {
		keysForExitCodes = append(keysForExitCodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExitCodes)
	mapStringForExitCodes := "map[string]int32{"
	for _, k := range keysForExitCodes {
		mapStringForExitCodes += fmt.Sprintf("%v: %v,", k, this.ExitCodes[k])
	}
	mapStringForExitCodes += "}"
	s := strings.Join([]string{`&JobFailedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`ExitCodes:` + mapStringForExitCodes + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`ContainerStatuses:` + repeatedStringForContainerStatuses + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSucceededEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSucceededEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobUtilisationEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForMaxResourcesForPeriod := make([]string, 0, len(this.MaxResourcesForPeriod))
	for k, _ := range this.MaxResourcesForPeriod {
		keysForMaxResourcesForPeriod = append(keysForMaxResourcesForPeriod, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMaxResourcesForPeriod)
	mapStringForMaxResourcesForPeriod := "map[string]resource.Quantity{"
	for _, k := range keysForMaxResourcesForPeriod {
		mapStringForMaxResourcesForPeriod += fmt.Sprintf("%v: %v,", k, this.MaxResourcesForPeriod[k])
	}
	mapStringForMaxResourcesForPeriod += "}"
	s := strings.Join([]string{`&JobUtilisationEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`MaxResourcesForPeriod:` + mapStringForMaxResourcesForPeriod + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobReprioritizingEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobReprioritizingEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`NewPriority:` + fmt.Sprintf("%v", this.NewPriority) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobReprioritizedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobReprioritizedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`NewPriority:` + fmt.Sprintf("%v", this.NewPriority) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobCancellingEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobCancellingEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobCancelledEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobCancelledEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobTerminatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobTerminatedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`PodNumber:` + fmt.Sprintf("%v", this.PodNumber) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage{`,
		`Events:` + fmt.Sprintf("%v", this.Events) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Submitted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Submitted{`,
		`Submitted:` + strings.Replace(fmt.Sprintf("%v", this.Submitted), "JobSubmittedEvent", "JobSubmittedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Queued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Queued{`,
		`Queued:` + strings.Replace(fmt.Sprintf("%v", this.Queued), "JobQueuedEvent", "JobQueuedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Leased) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Leased{`,
		`Leased:` + strings.Replace(fmt.Sprintf("%v", this.Leased), "JobLeasedEvent", "JobLeasedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_LeaseReturned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_LeaseReturned{`,
		`LeaseReturned:` + strings.Replace(fmt.Sprintf("%v", this.LeaseReturned), "JobLeaseReturnedEvent", "JobLeaseReturnedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_LeaseExpired) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_LeaseExpired{`,
		`LeaseExpired:` + strings.Replace(fmt.Sprintf("%v", this.LeaseExpired), "JobLeaseExpiredEvent", "JobLeaseExpiredEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Pending) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Pending{`,
		`Pending:` + strings.Replace(fmt.Sprintf("%v", this.Pending), "JobPendingEvent", "JobPendingEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Running) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Running{`,
		`Running:` + strings.Replace(fmt.Sprintf("%v", this.Running), "JobRunningEvent", "JobRunningEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_UnableToSchedule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_UnableToSchedule{`,
		`UnableToSchedule:` + strings.Replace(fmt.Sprintf("%v", this.UnableToSchedule), "JobUnableToScheduleEvent", "JobUnableToScheduleEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "JobFailedEvent", "JobFailedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Succeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Succeeded{`,
		`Succeeded:` + strings.Replace(fmt.Sprintf("%v", this.Succeeded), "JobSucceededEvent", "JobSucceededEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Reprioritized) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Reprioritized{`,
		`Reprioritized:` + strings.Replace(fmt.Sprintf("%v", this.Reprioritized), "JobReprioritizedEvent", "JobReprioritizedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Cancelling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Cancelling{`,
		`Cancelling:` + strings.Replace(fmt.Sprintf("%v", this.Cancelling), "JobCancellingEvent", "JobCancellingEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "JobCancelledEvent", "JobCancelledEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Terminated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Terminated{`,
		`Terminated:` + strings.Replace(fmt.Sprintf("%v", this.Terminated), "JobTerminatedEvent", "JobTerminatedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Utilisation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Utilisation{`,
		`Utilisation:` + strings.Replace(fmt.Sprintf("%v", this.Utilisation), "JobUtilisationEvent", "JobUtilisationEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_DuplicateFound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_DuplicateFound{`,
		`DuplicateFound:` + strings.Replace(fmt.Sprintf("%v", this.DuplicateFound), "JobDuplicateFoundEvent", "JobDuplicateFoundEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_IngressInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_IngressInfo{`,
		`IngressInfo:` + strings.Replace(fmt.Sprintf("%v", this.IngressInfo), "JobIngressInfoEvent", "JobIngressInfoEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Reprioritizing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Reprioritizing{`,
		`Reprioritizing:` + strings.Replace(fmt.Sprintf("%v", this.Reprioritizing), "JobReprioritizingEvent", "JobReprioritizingEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExitCode:` + fmt.Sprintf("%v", this.ExitCode) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*EventMessage{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "EventMessage", "EventMessage", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&EventList{`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventStreamMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventStreamMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "EventMessage", "EventMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSetRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Watch:` + fmt.Sprintf("%v", this.Watch) + `,`,
		`FromMessageId:` + fmt.Sprintf("%v", this.FromMessageId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JobSubmittedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmittedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmittedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobQueuedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobQueuedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobQueuedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobDuplicateFoundEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDuplicateFoundEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDuplicateFoundEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalJobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalJobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeasedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeasedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeasedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeaseReturnedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeaseReturnedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeaseReturnedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeaseExpiredEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeaseExpiredEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeaseExpiredEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobPendingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobPendingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobPendingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRunningEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunningEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunningEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobIngressInfoEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobIngressInfoEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobIngressInfoEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngressAddresses == nil {
				m.IngressAddresses = make(map[int32]string)
			}
			var mapkey int32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IngressAddresses[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobUnableToScheduleEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobUnableToScheduleEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobUnableToScheduleEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitCodes == nil {
				m.ExitCodes = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExitCodes[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerStatuses = append(m.ContainerStatuses, &ContainerStatus{})
			if err := m.ContainerStatuses[len(m.ContainerStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= Cause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSucceededEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSucceededEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSucceededEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobUtilisationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobUtilisationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobUtilisationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResourcesForPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxResourcesForPeriod == nil {
				m.MaxResourcesForPeriod = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEvent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEvent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MaxResourcesForPeriod[mapkey] = *mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobReprioritizingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobReprioritizingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobReprioritizingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPriority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NewPriority = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobReprioritizedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobReprioritizedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobReprioritizedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPriority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NewPriority = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancellingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancellingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancellingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancelledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancelledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancelledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobTerminatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobTerminatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobTerminatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobSubmittedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Submitted{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobQueuedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Queued{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leased", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeasedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Leased{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseReturned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeaseReturnedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_LeaseReturned{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseExpired", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeaseExpiredEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_LeaseExpired{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobPendingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Pending{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobRunningEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Running{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnableToSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobUnableToScheduleEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_UnableToSchedule{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobFailedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Failed{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobSucceededEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Succeeded{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reprioritized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobReprioritizedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Reprioritized{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobCancellingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Cancelling{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobCancelledEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Cancelled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobTerminatedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Terminated{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilisation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobUtilisationEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Utilisation{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuplicateFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobDuplicateFoundEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_DuplicateFound{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobIngressInfoEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_IngressInfo{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reprioritizing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobReprioritizingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Reprioritizing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= Cause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventMessage{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStreamMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStreamMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStreamMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &EventMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
