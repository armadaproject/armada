// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/binoculars/binoculars.proto

package binocularsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	binoculars "github.com/armadaproject/armada/pkg/api/binoculars"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BinocularsName is the fully-qualified name of the Binoculars service.
	BinocularsName = "binoculars.Binoculars"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BinocularsLogsProcedure is the fully-qualified name of the Binoculars's Logs RPC.
	BinocularsLogsProcedure = "/binoculars.Binoculars/Logs"
	// BinocularsCordonProcedure is the fully-qualified name of the Binoculars's Cordon RPC.
	BinocularsCordonProcedure = "/binoculars.Binoculars/Cordon"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	binocularsServiceDescriptor      = binoculars.File_api_binoculars_binoculars_proto.Services().ByName("Binoculars")
	binocularsLogsMethodDescriptor   = binocularsServiceDescriptor.Methods().ByName("Logs")
	binocularsCordonMethodDescriptor = binocularsServiceDescriptor.Methods().ByName("Cordon")
)

// BinocularsClient is a client for the binoculars.Binoculars service.
type BinocularsClient interface {
	Logs(context.Context, *connect.Request[binoculars.LogRequest]) (*connect.Response[binoculars.LogResponse], error)
	Cordon(context.Context, *connect.Request[binoculars.CordonRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewBinocularsClient constructs a client for the binoculars.Binoculars service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBinocularsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BinocularsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &binocularsClient{
		logs: connect.NewClient[binoculars.LogRequest, binoculars.LogResponse](
			httpClient,
			baseURL+BinocularsLogsProcedure,
			connect.WithSchema(binocularsLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cordon: connect.NewClient[binoculars.CordonRequest, emptypb.Empty](
			httpClient,
			baseURL+BinocularsCordonProcedure,
			connect.WithSchema(binocularsCordonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// binocularsClient implements BinocularsClient.
type binocularsClient struct {
	logs   *connect.Client[binoculars.LogRequest, binoculars.LogResponse]
	cordon *connect.Client[binoculars.CordonRequest, emptypb.Empty]
}

// Logs calls binoculars.Binoculars.Logs.
func (c *binocularsClient) Logs(ctx context.Context, req *connect.Request[binoculars.LogRequest]) (*connect.Response[binoculars.LogResponse], error) {
	return c.logs.CallUnary(ctx, req)
}

// Cordon calls binoculars.Binoculars.Cordon.
func (c *binocularsClient) Cordon(ctx context.Context, req *connect.Request[binoculars.CordonRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cordon.CallUnary(ctx, req)
}

// BinocularsHandler is an implementation of the binoculars.Binoculars service.
type BinocularsHandler interface {
	Logs(context.Context, *connect.Request[binoculars.LogRequest]) (*connect.Response[binoculars.LogResponse], error)
	Cordon(context.Context, *connect.Request[binoculars.CordonRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewBinocularsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBinocularsHandler(svc BinocularsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	binocularsLogsHandler := connect.NewUnaryHandler(
		BinocularsLogsProcedure,
		svc.Logs,
		connect.WithSchema(binocularsLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	binocularsCordonHandler := connect.NewUnaryHandler(
		BinocularsCordonProcedure,
		svc.Cordon,
		connect.WithSchema(binocularsCordonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/binoculars.Binoculars/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BinocularsLogsProcedure:
			binocularsLogsHandler.ServeHTTP(w, r)
		case BinocularsCordonProcedure:
			binocularsCordonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBinocularsHandler returns CodeUnimplemented from all methods.
type UnimplementedBinocularsHandler struct{}

func (UnimplementedBinocularsHandler) Logs(context.Context, *connect.Request[binoculars.LogRequest]) (*connect.Response[binoculars.LogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("binoculars.Binoculars.Logs is not implemented"))
}

func (UnimplementedBinocularsHandler) Cordon(context.Context, *connect.Request[binoculars.CordonRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("binoculars.Binoculars.Cordon is not implemented"))
}
