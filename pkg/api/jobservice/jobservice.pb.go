// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/jobservice/jobservice.proto

package jobservice

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// See event.proto for a list of possible events
// We have filtered down these events to only the important ones for a user
type JobServiceResponse_State int32

const (
	JobServiceResponse_SUBMITTED        JobServiceResponse_State = 0
	JobServiceResponse_DUPLICATE_FOUND  JobServiceResponse_State = 1
	JobServiceResponse_RUNNING          JobServiceResponse_State = 2
	JobServiceResponse_FAILED           JobServiceResponse_State = 3
	JobServiceResponse_SUCCEEDED        JobServiceResponse_State = 4
	JobServiceResponse_CANCELLED        JobServiceResponse_State = 5
	JobServiceResponse_JOB_ID_NOT_FOUND JobServiceResponse_State = 6
)

var JobServiceResponse_State_name = map[int32]string{
	0: "SUBMITTED",
	1: "DUPLICATE_FOUND",
	2: "RUNNING",
	3: "FAILED",
	4: "SUCCEEDED",
	5: "CANCELLED",
	6: "JOB_ID_NOT_FOUND",
}

var JobServiceResponse_State_value = map[string]int32{
	"SUBMITTED":        0,
	"DUPLICATE_FOUND":  1,
	"RUNNING":          2,
	"FAILED":           3,
	"SUCCEEDED":        4,
	"CANCELLED":        5,
	"JOB_ID_NOT_FOUND": 6,
}

func (x JobServiceResponse_State) String() string {
	return proto.EnumName(JobServiceResponse_State_name, int32(x))
}

func (JobServiceResponse_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acaf6279d0169157, []int{1, 0}
}

type JobServiceRequest struct {
	JobId    string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobSetId string `protobuf:"bytes,2,opt,name=job_set_id,json=jobSetId,proto3" json:"job_set_id,omitempty"`
	Queue    string `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (m *JobServiceRequest) Reset()         { *m = JobServiceRequest{} }
func (m *JobServiceRequest) String() string { return proto.CompactTextString(m) }
func (*JobServiceRequest) ProtoMessage()    {}
func (*JobServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_acaf6279d0169157, []int{0}
}
func (m *JobServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobServiceRequest.Merge(m, src)
}
func (m *JobServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobServiceRequest proto.InternalMessageInfo

func (m *JobServiceRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobServiceRequest) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobServiceRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type JobServiceResponse struct {
	State JobServiceResponse_State `protobuf:"varint,1,opt,name=state,proto3,enum=jobservice.JobServiceResponse_State" json:"state,omitempty"`
	// For failed jobs, this will contain a reason why the job failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *JobServiceResponse) Reset()         { *m = JobServiceResponse{} }
func (m *JobServiceResponse) String() string { return proto.CompactTextString(m) }
func (*JobServiceResponse) ProtoMessage()    {}
func (*JobServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acaf6279d0169157, []int{1}
}
func (m *JobServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobServiceResponse.Merge(m, src)
}
func (m *JobServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobServiceResponse proto.InternalMessageInfo

func (m *JobServiceResponse) GetState() JobServiceResponse_State {
	if m != nil {
		return m.State
	}
	return JobServiceResponse_SUBMITTED
}

func (m *JobServiceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("jobservice.JobServiceResponse_State", JobServiceResponse_State_name, JobServiceResponse_State_value)
	proto.RegisterType((*JobServiceRequest)(nil), "jobservice.JobServiceRequest")
	proto.RegisterType((*JobServiceResponse)(nil), "jobservice.JobServiceResponse")
}

func init() {
	proto.RegisterFile("pkg/api/jobservice/jobservice.proto", fileDescriptor_acaf6279d0169157)
}

var fileDescriptor_acaf6279d0169157 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x4e, 0xfa, 0x40,
	0x18, 0x6c, 0xe1, 0xd7, 0xfe, 0xe4, 0xf3, 0x5f, 0x5d, 0x31, 0x21, 0x46, 0x1b, 0x53, 0x3d, 0x78,
	0x82, 0x04, 0x6f, 0xde, 0xa0, 0x5d, 0xc8, 0x12, 0x6c, 0x4d, 0x69, 0x8f, 0xda, 0x50, 0xd9, 0x18,
	0x6a, 0xe2, 0x96, 0xee, 0xd6, 0xf8, 0x18, 0x3e, 0x96, 0x47, 0x8e, 0x1e, 0x09, 0xbc, 0x88, 0xd9,
	0x96, 0x04, 0x12, 0xa3, 0xb7, 0x9d, 0x6f, 0x66, 0x76, 0xe6, 0xdb, 0x85, 0xcb, 0xf4, 0xe5, 0xb9,
	0x35, 0x4e, 0xa7, 0xad, 0x84, 0xc5, 0x9c, 0x66, 0x6f, 0xd3, 0x27, 0xba, 0x75, 0x6c, 0xa6, 0x19,
	0x13, 0x0c, 0xc1, 0x66, 0x62, 0x3d, 0xc2, 0xd1, 0x80, 0xc5, 0xa3, 0x12, 0xf9, 0x74, 0x96, 0x53,
	0x2e, 0xd0, 0x09, 0xe8, 0x09, 0x8b, 0xa3, 0xe9, 0xa4, 0xa1, 0x5e, 0xa8, 0xd7, 0x35, 0x5f, 0x4b,
	0x58, 0x4c, 0x26, 0xe8, 0x0c, 0xa4, 0x33, 0xe2, 0x54, 0x48, 0xaa, 0x52, 0x50, 0x3b, 0x89, 0x74,
	0x0b, 0x32, 0x41, 0x75, 0xd0, 0x66, 0x39, 0xcd, 0x69, 0xa3, 0x5a, 0x7a, 0x0a, 0x60, 0x2d, 0x54,
	0x40, 0xdb, 0x01, 0x3c, 0x65, 0xaf, 0x9c, 0xa2, 0x5b, 0xd0, 0xb8, 0x18, 0x0b, 0x5a, 0x04, 0x1c,
	0xb4, 0xaf, 0x9a, 0x5b, 0x25, 0x7f, 0xca, 0x9b, 0x23, 0xa9, 0xf5, 0x4b, 0x8b, 0x0c, 0xa2, 0x59,
	0xc6, 0xb2, 0x75, 0x83, 0x12, 0x58, 0xef, 0xa0, 0x15, 0x2a, 0xb4, 0x0f, 0xb5, 0x51, 0xd8, 0xbd,
	0x23, 0x41, 0x80, 0x1d, 0x43, 0x41, 0xc7, 0x70, 0xe8, 0x84, 0xf7, 0x43, 0x62, 0x77, 0x02, 0x1c,
	0xf5, 0xbc, 0xd0, 0x75, 0x0c, 0x15, 0xed, 0xc2, 0x7f, 0x3f, 0x74, 0x5d, 0xe2, 0xf6, 0x8d, 0x0a,
	0x02, 0xd0, 0x7b, 0x1d, 0x32, 0xc4, 0x8e, 0x51, 0x2d, 0xcd, 0xb6, 0x8d, 0xb1, 0x83, 0x1d, 0xe3,
	0x9f, 0x84, 0x76, 0xc7, 0xb5, 0xf1, 0x50, 0xb2, 0x1a, 0xaa, 0x83, 0x31, 0xf0, 0xba, 0x11, 0x71,
	0x22, 0xd7, 0x0b, 0xd6, 0x97, 0xe9, 0xed, 0x07, 0x80, 0x4d, 0x65, 0xe4, 0xc1, 0x5e, 0x9f, 0x0a,
	0x39, 0x10, 0x63, 0x91, 0x73, 0x74, 0xfe, 0xdb, 0x6a, 0xc5, 0x53, 0x9f, 0x9a, 0x7f, 0x6f, 0x6e,
	0x29, 0xdd, 0xc6, 0xe7, 0xd2, 0x54, 0xe7, 0x4b, 0x53, 0x5d, 0x2c, 0x4d, 0xf5, 0x63, 0x65, 0x2a,
	0xf3, 0x95, 0xa9, 0x7c, 0xad, 0x4c, 0x25, 0xd6, 0x8b, 0xef, 0xbc, 0xf9, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0x56, 0x36, 0xe4, 0xf5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	GetJobStatus(ctx context.Context, in *JobServiceRequest, opts ...grpc.CallOption) (*JobServiceResponse, error)
}

type jobServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobServiceClient(cc *grpc.ClientConn) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) GetJobStatus(ctx context.Context, in *JobServiceRequest, opts ...grpc.CallOption) (*JobServiceResponse, error) {
	out := new(JobServiceResponse)
	err := c.cc.Invoke(ctx, "/jobservice.JobService/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	GetJobStatus(context.Context, *JobServiceRequest) (*JobServiceResponse, error)
}

// UnimplementedJobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (*UnimplementedJobServiceServer) GetJobStatus(ctx context.Context, req *JobServiceRequest) (*JobServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobservice.JobService/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobStatus(ctx, req.(*JobServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobservice.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobStatus",
			Handler:    _JobService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/jobservice/jobservice.proto",
}

func (m *JobServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintJobservice(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobSetId) > 0 {
		i -= len(m.JobSetId)
		copy(dAtA[i:], m.JobSetId)
		i = encodeVarintJobservice(dAtA, i, uint64(len(m.JobSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintJobservice(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintJobservice(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintJobservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintJobservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovJobservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JobServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovJobservice(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovJobservice(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovJobservice(uint64(l))
	}
	return n
}

func (m *JobServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovJobservice(uint64(m.State))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovJobservice(uint64(l))
	}
	return n
}

func sovJobservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJobservice(x uint64) (n int) {
	return sovJobservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= JobServiceResponse_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJobservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJobservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJobservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJobservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJobservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJobservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJobservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJobservice = fmt.Errorf("proto: unexpected end of group")
)
