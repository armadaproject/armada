// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/jobservice/jobservice.proto

package jobserviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	jobservice "github.com/armadaproject/armada/pkg/api/jobservice"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "jobservice.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceGetJobStatusProcedure is the fully-qualified name of the JobService's GetJobStatus RPC.
	JobServiceGetJobStatusProcedure = "/jobservice.JobService/GetJobStatus"
	// JobServiceHealthProcedure is the fully-qualified name of the JobService's Health RPC.
	JobServiceHealthProcedure = "/jobservice.JobService/Health"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jobServiceServiceDescriptor            = jobservice.File_api_jobservice_jobservice_proto.Services().ByName("JobService")
	jobServiceGetJobStatusMethodDescriptor = jobServiceServiceDescriptor.Methods().ByName("GetJobStatus")
	jobServiceHealthMethodDescriptor       = jobServiceServiceDescriptor.Methods().ByName("Health")
)

// JobServiceClient is a client for the jobservice.JobService service.
type JobServiceClient interface {
	GetJobStatus(context.Context, *connect.Request[jobservice.JobServiceRequest]) (*connect.Response[jobservice.JobServiceResponse], error)
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[jobservice.HealthCheckResponse], error)
}

// NewJobServiceClient constructs a client for the jobservice.JobService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		getJobStatus: connect.NewClient[jobservice.JobServiceRequest, jobservice.JobServiceResponse](
			httpClient,
			baseURL+JobServiceGetJobStatusProcedure,
			connect.WithSchema(jobServiceGetJobStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[emptypb.Empty, jobservice.HealthCheckResponse](
			httpClient,
			baseURL+JobServiceHealthProcedure,
			connect.WithSchema(jobServiceHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	getJobStatus *connect.Client[jobservice.JobServiceRequest, jobservice.JobServiceResponse]
	health       *connect.Client[emptypb.Empty, jobservice.HealthCheckResponse]
}

// GetJobStatus calls jobservice.JobService.GetJobStatus.
func (c *jobServiceClient) GetJobStatus(ctx context.Context, req *connect.Request[jobservice.JobServiceRequest]) (*connect.Response[jobservice.JobServiceResponse], error) {
	return c.getJobStatus.CallUnary(ctx, req)
}

// Health calls jobservice.JobService.Health.
func (c *jobServiceClient) Health(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[jobservice.HealthCheckResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the jobservice.JobService service.
type JobServiceHandler interface {
	GetJobStatus(context.Context, *connect.Request[jobservice.JobServiceRequest]) (*connect.Response[jobservice.JobServiceResponse], error)
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[jobservice.HealthCheckResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceGetJobStatusHandler := connect.NewUnaryHandler(
		JobServiceGetJobStatusProcedure,
		svc.GetJobStatus,
		connect.WithSchema(jobServiceGetJobStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceHealthHandler := connect.NewUnaryHandler(
		JobServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(jobServiceHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/jobservice.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceGetJobStatusProcedure:
			jobServiceGetJobStatusHandler.ServeHTTP(w, r)
		case JobServiceHealthProcedure:
			jobServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) GetJobStatus(context.Context, *connect.Request[jobservice.JobServiceRequest]) (*connect.Response[jobservice.JobServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jobservice.JobService.GetJobStatus is not implemented"))
}

func (UnimplementedJobServiceHandler) Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[jobservice.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jobservice.JobService.Health is not implemented"))
}
