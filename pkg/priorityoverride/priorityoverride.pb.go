// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/priorityoverride/priorityoverride.proto

package priorityoverride

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PriorityOverrideRequest struct {
}

func (m *PriorityOverrideRequest) Reset()         { *m = PriorityOverrideRequest{} }
func (m *PriorityOverrideRequest) String() string { return proto.CompactTextString(m) }
func (*PriorityOverrideRequest) ProtoMessage()    {}
func (*PriorityOverrideRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564243d1236d3887, []int{0}
}
func (m *PriorityOverrideRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriorityOverrideRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriorityOverrideRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriorityOverrideRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriorityOverrideRequest.Merge(m, src)
}
func (m *PriorityOverrideRequest) XXX_Size() int {
	return m.Size()
}
func (m *PriorityOverrideRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PriorityOverrideRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PriorityOverrideRequest proto.InternalMessageInfo

type PoolPriorityOverrides struct {
	Pool      string             `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Overrides map[string]float64 `protobuf:"bytes,2,rep,name=overrides,proto3" json:"overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *PoolPriorityOverrides) Reset()         { *m = PoolPriorityOverrides{} }
func (m *PoolPriorityOverrides) String() string { return proto.CompactTextString(m) }
func (*PoolPriorityOverrides) ProtoMessage()    {}
func (*PoolPriorityOverrides) Descriptor() ([]byte, []int) {
	return fileDescriptor_564243d1236d3887, []int{1}
}
func (m *PoolPriorityOverrides) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPriorityOverrides) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPriorityOverrides.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPriorityOverrides) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPriorityOverrides.Merge(m, src)
}
func (m *PoolPriorityOverrides) XXX_Size() int {
	return m.Size()
}
func (m *PoolPriorityOverrides) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPriorityOverrides.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPriorityOverrides proto.InternalMessageInfo

func (m *PoolPriorityOverrides) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *PoolPriorityOverrides) GetOverrides() map[string]float64 {
	if m != nil {
		return m.Overrides
	}
	return nil
}

type PriorityOverrideResponse struct {
	PoolPriorityOverrides []*PoolPriorityOverrides `protobuf:"bytes,1,rep,name=poolPriorityOverrides,proto3" json:"poolPriorityOverrides,omitempty"`
}

func (m *PriorityOverrideResponse) Reset()         { *m = PriorityOverrideResponse{} }
func (m *PriorityOverrideResponse) String() string { return proto.CompactTextString(m) }
func (*PriorityOverrideResponse) ProtoMessage()    {}
func (*PriorityOverrideResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564243d1236d3887, []int{2}
}
func (m *PriorityOverrideResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriorityOverrideResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriorityOverrideResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriorityOverrideResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriorityOverrideResponse.Merge(m, src)
}
func (m *PriorityOverrideResponse) XXX_Size() int {
	return m.Size()
}
func (m *PriorityOverrideResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PriorityOverrideResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PriorityOverrideResponse proto.InternalMessageInfo

func (m *PriorityOverrideResponse) GetPoolPriorityOverrides() []*PoolPriorityOverrides {
	if m != nil {
		return m.PoolPriorityOverrides
	}
	return nil
}

func init() {
	proto.RegisterType((*PriorityOverrideRequest)(nil), "api.PriorityOverrideRequest")
	proto.RegisterType((*PoolPriorityOverrides)(nil), "api.PoolPriorityOverrides")
	proto.RegisterMapType((map[string]float64)(nil), "api.PoolPriorityOverrides.OverridesEntry")
	proto.RegisterType((*PriorityOverrideResponse)(nil), "api.PriorityOverrideResponse")
}

func init() {
	proto.RegisterFile("pkg/priorityoverride/priorityoverride.proto", fileDescriptor_564243d1236d3887)
}

var fileDescriptor_564243d1236d3887 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2e, 0xc8, 0x4e, 0xd7,
	0x2f, 0x28, 0xca, 0xcc, 0x2f, 0xca, 0x2c, 0xa9, 0xcc, 0x2f, 0x4b, 0x2d, 0x2a, 0xca, 0x4c, 0x49,
	0xc5, 0x10, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x92, 0xe4,
	0x12, 0x0f, 0x80, 0x4a, 0xfb, 0x43, 0xa5, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0xda,
	0x99, 0xb8, 0x44, 0x03, 0xf2, 0xf3, 0x73, 0xd0, 0xe5, 0x8b, 0x85, 0xd4, 0xb8, 0x58, 0x0a, 0xf2,
	0xf3, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0x84, 0x5e, 0xdd, 0x93, 0xe7, 0x03, 0xf1,
	0x75, 0xf2, 0x73, 0x33, 0x4b, 0x52, 0x73, 0x0b, 0x4a, 0x2a, 0x83, 0xc0, 0xf2, 0x42, 0x09, 0x5c,
	0x9c, 0x30, 0x3b, 0x8b, 0x25, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x34, 0xf5, 0x12, 0x0b, 0x32,
	0xf5, 0xb0, 0x1a, 0xab, 0x07, 0x67, 0xb9, 0xe6, 0x95, 0x14, 0x55, 0x3a, 0x89, 0xbf, 0xba, 0x27,
	0x2f, 0x0c, 0xd7, 0x8f, 0x64, 0x38, 0xc2, 0x50, 0xa9, 0x14, 0x2e, 0x3e, 0x54, 0x5d, 0x42, 0xca,
	0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x50, 0xa7, 0x09, 0xbe, 0xba, 0x27, 0xcf, 0x9b, 0x9d, 0x5a, 0x89,
	0xa4, 0x19, 0x24, 0x2b, 0xa4, 0xc9, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1, 0xa4, 0xc0,
	0xa8, 0xc1, 0xe8, 0x24, 0xfc, 0xea, 0x9e, 0x3c, 0x3f, 0x58, 0x00, 0x49, 0x21, 0x44, 0x85, 0x15,
	0x93, 0x05, 0xa3, 0xd2, 0x44, 0x46, 0x2e, 0x09, 0xcc, 0x50, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x2a, 0xe5, 0x12, 0x2d, 0xc0, 0xe6, 0x1d, 0x09, 0x46, 0xb0, 0x87, 0xa5, 0x70, 0x7b, 0xd8,
	0x49, 0xf9, 0xd5, 0x3d, 0x79, 0x79, 0xac, 0x9a, 0x91, 0xdc, 0x81, 0xdd, 0x74, 0xa3, 0x3c, 0xcc,
	0x88, 0x0b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x0a, 0xe6, 0x12, 0x71, 0x4f, 0x2d, 0xc1,
	0x8c, 0x36, 0x19, 0x88, 0x53, 0xb0, 0x47, 0xb7, 0x94, 0x2c, 0x0e, 0x59, 0x88, 0x37, 0x9d, 0xf4,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x04, 0x5b, 0xa2, 0x4b, 0x62,
	0x03, 0x27, 0x32, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0xf8, 0x10, 0xec, 0x93, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PriorityOverrideServiceClient is the client API for PriorityOverrideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PriorityOverrideServiceClient interface {
	GetPriorityOverrides(ctx context.Context, in *PriorityOverrideRequest, opts ...grpc.CallOption) (*PriorityOverrideResponse, error)
}

type priorityOverrideServiceClient struct {
	cc *grpc.ClientConn
}

func NewPriorityOverrideServiceClient(cc *grpc.ClientConn) PriorityOverrideServiceClient {
	return &priorityOverrideServiceClient{cc}
}

func (c *priorityOverrideServiceClient) GetPriorityOverrides(ctx context.Context, in *PriorityOverrideRequest, opts ...grpc.CallOption) (*PriorityOverrideResponse, error) {
	out := new(PriorityOverrideResponse)
	err := c.cc.Invoke(ctx, "/api.PriorityOverrideService/GetPriorityOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriorityOverrideServiceServer is the server API for PriorityOverrideService service.
type PriorityOverrideServiceServer interface {
	GetPriorityOverrides(context.Context, *PriorityOverrideRequest) (*PriorityOverrideResponse, error)
}

// UnimplementedPriorityOverrideServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPriorityOverrideServiceServer struct {
}

func (*UnimplementedPriorityOverrideServiceServer) GetPriorityOverrides(ctx context.Context, req *PriorityOverrideRequest) (*PriorityOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriorityOverrides not implemented")
}

func RegisterPriorityOverrideServiceServer(s *grpc.Server, srv PriorityOverrideServiceServer) {
	s.RegisterService(&_PriorityOverrideService_serviceDesc, srv)
}

func _PriorityOverrideService_GetPriorityOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriorityOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriorityOverrideServiceServer).GetPriorityOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PriorityOverrideService/GetPriorityOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriorityOverrideServiceServer).GetPriorityOverrides(ctx, req.(*PriorityOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PriorityOverrideService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PriorityOverrideService",
	HandlerType: (*PriorityOverrideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPriorityOverrides",
			Handler:    _PriorityOverrideService_GetPriorityOverrides_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/priorityoverride/priorityoverride.proto",
}

func (m *PriorityOverrideRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriorityOverrideRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriorityOverrideRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoolPriorityOverrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPriorityOverrides) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPriorityOverrides) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Overrides) > 0 {
		for k := range m.Overrides {
			v := m.Overrides[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPriorityoverride(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPriorityoverride(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintPriorityoverride(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriorityOverrideResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriorityOverrideResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriorityOverrideResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolPriorityOverrides) > 0 {
		for iNdEx := len(m.PoolPriorityOverrides) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolPriorityOverrides[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPriorityoverride(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPriorityoverride(dAtA []byte, offset int, v uint64) int {
	offset -= sovPriorityoverride(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriorityOverrideRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoolPriorityOverrides) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovPriorityoverride(uint64(l))
	}
	if len(m.Overrides) > 0 {
		for k, v := range m.Overrides {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPriorityoverride(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovPriorityoverride(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PriorityOverrideResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolPriorityOverrides) > 0 {
		for _, e := range m.PoolPriorityOverrides {
			l = e.Size()
			n += 1 + l + sovPriorityoverride(uint64(l))
		}
	}
	return n
}

func sovPriorityoverride(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPriorityoverride(x uint64) (n int) {
	return sovPriorityoverride(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriorityOverrideRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriorityoverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriorityOverrideRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriorityOverrideRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPriorityoverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPriorityOverrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriorityoverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPriorityOverrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPriorityOverrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriorityoverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriorityoverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Overrides == nil {
				m.Overrides = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPriorityoverride
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPriorityoverride
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPriorityoverride
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPriorityoverride
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPriorityoverride(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPriorityoverride
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Overrides[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriorityoverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriorityOverrideResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPriorityoverride
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriorityOverrideResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriorityOverrideResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPriorityOverrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPriorityoverride
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPriorityOverrides = append(m.PoolPriorityOverrides, &PoolPriorityOverrides{})
			if err := m.PoolPriorityOverrides[len(m.PoolPriorityOverrides)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPriorityoverride(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPriorityoverride
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPriorityoverride(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPriorityoverride
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriorityoverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPriorityoverride
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPriorityoverride
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPriorityoverride
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPriorityoverride
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPriorityoverride        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPriorityoverride          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPriorityoverride = fmt.Errorf("proto: unexpected end of group")
)
