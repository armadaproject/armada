# Default values for armada-bundle.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

dependencies:
  armada-server: true
  armada-executor: true
  armada-lookout: true
  armada-lookout-migration: true
  armada-lookout-ingester: true
  redis-ha: true
  stan: true
  pulsar: true
  executor-cluster-monitoring: true
  postgresql: true

redis-ha:
  fullnameOverride: redis-ha
  hardAntiAffinity: false
  persistentVolume:
    enabled: false

postgresql:
  fullnameOverride: postgresql
  auth:
    postgresPassword: psw

stan:
  stan:
    # -- Streaming NATS Cluster ID (set during install and saved in the persistence backend)
    clusterID: "armada-cluster"
  nameOverride: stan

kube-prometheus-stack:
  alertmanager:
    enabled: false

  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false

  grafana:
    service:
      type: NodePort
      nodePort: 30001

  prometheusOperator:
    admissionWebhooks:
      enabled: false
    tls:
      enabled: false
    tlsProxy:
      enabled: false
    createCustomResource: false

armada:
  image:
    repository: gresearchdev/armada-server
    tag: v0.3.36
  # -- Ingress class
  ingressClass: nginx
  ingress:
    labels:
      # -- Ingress class as label, used usually as a workaround by external-dns as they currently do not support filtering by ingressClass field
      kubernetes.io/ingress.class: nginx
  # -- ClusterIssuer from whom a Let's Encrypt certificate will be requested
  clusterIssuer: dev-ca
  hostnames: []

  applicationConfig:
    grpcPort: 50051
    httpPort: 8080
    auth:
      basicAuth:
        enableAuthentication: false
      anonymousAuth: true
      permissionGroupMapping:
        submit_any_jobs: [ "everyone" ]
        create_queue: [ "everyone" ]
        delete_queue: [ "everyone" ]
        cancel_any_jobs: [ "everyone" ]
        reprioritize_any_jobs: [ "everyone" ]
        watch_all_events: [ "everyone" ]
        execute_jobs: [ "everyone" ]
    redis:
      masterName: "mymaster"
      addrs:
        - "redis-ha-announce-0.armada.svc.cluster.local:26379"
        - "redis-ha-announce-1.armada.svc.cluster.local:26379"
        - "redis-ha-announce-2.armada.svc.cluster.local:26379"
    eventsRedis:
      masterName: "mymaster"
      addrs:
        - "redis-ha-announce-0.armada.svc.cluster.local:26379"
        - "redis-ha-announce-1.armada.svc.cluster.local:26379"
        - "redis-ha-announce-2.armada.svc.cluster.local:26379"
      poolSize: 1000
    eventsNats:
      timeout: 10s
      servers:
        - "nats://stan.armada.svc.cluster.local:4222"
      clusterId: "armada-cluster"
      subject: "ArmadaTest"
      QueueGroup: "ArmadaEventRedisProcessor"
    scheduling:
      probabilityOfUsingNewScheduler: 1
      defaultJobTolerations:
        - key: armada.io/batch
          operator: Exists
          effect: NoSchedule
    pulsar:
      # -- Toggle whether to connect to Pulsar
      enabled: true
      # -- Pulsar connection string
      URL: "pulsar://pulsar-broker.armada.svc.cluster.local:6650"
  prometheus:
    # -- Toggle whether to create a ServiceMonitor for Armada Server
    enabled: true

  nodePort: 30000

armada-executor:
  image:
    repository: gresearchdev/armada-executor
    tag: v0.3.36
  nodeSelector: nil
  applicationConfig:
    apiConnection:
      # -- URL of Armada Server gRPC endpoint
      armadaUrl: armada.default.svc.cluster.local:50051
      ## Please note that this setting is insecure
      ## Do not use this setting in a production environment
      ## This should only be used for the quickstart and local testing
      # -- Only to be used for development purposes and in cases where Armada server does not have a certificate
      forceNoTls: true
    kubernetes:
      minimumPodAge: 0s

  prometheus:
    # -- Toggle whether to create ServiceMonitor for Armada Executor
    enabled: true

executor-cluster-monitoring:
  additionalLabels:
    app: prometheus-operator
    release: prometheus-operator

  interval: 5s

armada-lookout:
  image:
    repository: gresearchdev/armada-lookout
    tag: v0.3.36
  # -- Ingress class
  ingressClass: nginx
  ingress:
    annotations: {}
    labels: {}
  # -- ClusterIssuer from whom a Let's Encrypt certificate will be requested
  clusterIssuer: dev-ca
  hostnames: []

  prometheus:
    # -- Toggle whether to create a ServiceMonitor for Lookout
    enabled: true

  applicationConfig:
    # -- Armada does not require a streaming backend anymore so this options turns off processing via streaming backend (Jetstream, SNAT)
    disableEventProcessing: true
    eventQueue: "ArmadaLookoutEventProcessor"
    postgres:
      connection:
        # -- Postgres host
        host: postgresql.armada.svc.cluster.local
        # -- Postgres port
        port: 5432
        # -- Postgres username
        user: postgres
        # -- Postgres user password
        password: psw
        # -- Postgres database
        dbname: postgres

armada-lookout-migration:
  image:
    tag: v0.3.36
  ingressClass: nginx
  clusterIssuer: letsencrypt-dev

  prometheus:
    enabled: true

  applicationConfig:
    postgres:
      # -- Postgres max open connections
      maxOpenConns: 100
      # -- Postgres max idle connections
      maxIdleConns: 25
      # -- Postgres connection max lifetime
      connMaxLifetime: 30m
      connection:
        # -- Postgres host
        host: postgresql.armada.svc.cluster.local
        # -- Postgres port
        port: 5432
        # -- Postgres username
        user: postgres
        # -- Postgres user password
        password: psw
        # -- Postgres database
        dbname: postgres

armada-lookout-ingester:
  image:
    repository: gresearchdev/armada-lookout-ingester-dev
    tag: 88ea8f0b8124c7dbbb44f7c7315c0fca13655f18
  applicationConfig:
    postgres:
      # -- Postgres max open connections
      maxOpenConns: 100
      # -- Postgres max idle connections
      maxIdleConns: 25
      # -- Postgres connection max lifetime
      connMaxLifetime: 30m
      connection:
        # -- Postgres host
        host: postgresql.armada.svc.cluster.local
        # -- Postgres port
        port: 5432
        # -- Postgres username
        user: postgres
        # -- Postgres user password
        password: psw
        # -- Postgres database
        dbname: postgres
        # -- Postgres SSL mode
        sslmode: disable
    pulsar:
      # -- Toggle whether to connect to Pulsar
      enabled: true
      # -- Pulsar connection string
      URL: "pulsar://pulsar-broker.armada.svc.cluster.local:6650"
      jobsetEventsTopic: "persistent://armada/armada/events"

pulsar:
  armadaInit:
    # -- Toggle whether to enable the job which creates necessary Pulsar resources needed by Armada
    enabled: false
    image:
      # -- Pulsar image which contains pulsar-admin
      repository: apachepulsar/pulsar
      # -- Pulsar image tag
      tag: 2.10.2
    # -- Pulsar Broker host
    brokerHost: pulsar-broker.armada.svc.cluster.local
    # -- Protocol used for connecting to Pulsar Broker host (either `http` or `https`)
    protocol: http
    # -- Pulsar admin (REST) port
    adminPort: 8080
    # -- Pulsar application port
    port: 6650
  proxy:
    service:
      # -- Pulsar Proxy kubernetes service type
      type: ClusterIP
  grafana:
    service:
      # -- Pulsar Grafana kubernetes service type
      type: ClusterIP
  initialize: true
  # -- Fullname override for Pulsar release
  fullnameOverride: pulsar
