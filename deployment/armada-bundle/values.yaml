# Default values for armada-bundle.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

dependencies:
  redis-ha: true
  stan: true
  kube-prometheus-stack: true
  armada-executor: true
  executor-cluster-monitoring: true
  postgresql: true
  pulsar: true
  armada-lookout-migration: true

redis-ha:
  fullnameOverride: redis-ha
  hardAntiAffinity: false
  persistentVolume:
    enabled: false

postgresql:
  fullnameOverride: postgresql
  auth:
    postgresPassword: psw

armada-lookout-migration:
  image:
    tag: v0.1.43
  ingressClass: nginx
  clusterIssuer: dummy-value
  hostnames:
    - test

  dbPruningEnabled: true
  dbPruneSchedule: '"@hourly"'

  prometheus:
    enabled: true

  applicationConfig:
    nats:
      servers:
        - nats://nats.default.svc.cluster.local:4222
      clusterId: nats
      subject: ArmadaTest
      queueGroup: ArmadaLookoutEventProcessor
    postgres:
      maxOpenConns: 100
      maxIdleConns: 25
      connMaxLifetime: 30m
      connection:
        host: postgresql.default.svc.cluster.local
        port: 5432
        user: postgres
        password: psw
        dbname: postgres
    uiConfig:
      armadaApiBaseUrl: "http://armada.default.svc.cluster.local:8080"
    prunerConfig:
      daysToKeep: 42
      batchSize: 1000

stan:
  nameOverride: "nats"

pulsar:
  fullnameOverride: pulsar

kube-prometheus-stack:
  alertmanager:
    enabled: false

  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
  grafana:
    service:
      type: NodePort
      nodePort: 30001

  prometheusOperator:
    admissionWebhooks:
      enabled: false
    tls:
      enabled: false
    tlsProxy:
      enabled: false
    createCustomResource: false

armada:
  ingressClass: "nginx"
  clusterIssuer: "dummy-value"
  hostnames:
    - "dummy-value"
  replicas: 3

  applicationConfig:
    redis:
      masterName: "mymaster"
      addrs:
        - "redis-ha-announce-0.default.svc.cluster.local:26379"
        - "redis-ha-announce-1.default.svc.cluster.local:26379"
        - "redis-ha-announce-2.default.svc.cluster.local:26379"
      poolSize: 1000
    eventsRedis:
      masterName: "mymaster"
      addrs:
        - "redis-ha-announce-0.default.svc.cluster.local:26379"
        - "redis-ha-announce-1.default.svc.cluster.local:26379"
        - "redis-ha-announce-2.default.svc.cluster.local:26379"
      poolSize: 1000
    eventsNats:
      servers:
        - nats://nats.default.svc.cluster.local:4222
      clusterID: nats
      subject: ArmadaTest
      queueGroup: ArmadaEventRedisProcessor
    auth:
      basicAuth:
        enableAuthentication: false
      anonymousAuth: true
      permissionGroupMapping:
        submit_jobs: [ "everyone" ]
        submit_any_jobs: [ "everyone" ]
        create_queue: [ "everyone" ]
        delete_queue: [ "everyone" ]
        cancel_jobs: [ "everyone" ]
        cancel_any_jobs: [ "everyone" ]
        reprioritize_jobs: [ "everyone" ]
        reprioritize_any_jobs: [ "everyone" ]
        watch_events: [ "everyone" ]
        watch_all_events: [ "everyone" ]
        execute_jobs: [ "everyone" ]

  prometheus:
    enabled: true

  nodePort: 30000

armada-executor:
  applicationConfig:
    apiConnection:
      armadaUrl: armada.default.svc.cluster.local:50051
      ## Please note that this setting is insecure
      ## Do not use this setting in a production environment
      ## This should only be used for the quickstart and local testing
      forceNoTls: true
    kubernetes:
      minimumPodAge: 0s

  prometheus:
    enabled: true

executor-cluster-monitoring:
  additionalLabels:
    app: prometheus-operator
    release: prometheus-operator

  interval: 5s

armada-lookout:
  ingressClass: nginx
  clusterIssuer: dummy-value
  hostnames:
    - test

  dbPruningEnabled: true
  dbPruneSchedule: '"@hourly"'

  prometheus:
    enabled: true

  applicationConfig:
    nats:
      servers:
        - nats://nats.default.svc.cluster.local:4222
      clusterId: nats
      subject: ArmadaTest
      queueGroup: ArmadaLookoutEventProcessor
    postgres:
      maxOpenConns: 100
      maxIdleConns: 25
      connMaxLifetime: 30m
      connection:
        host: postgresql.default.svc.cluster.local
        port: 5432
        user: postgres
        password: psw
        dbname: postgres
    uiConfig:
      armadaApiBaseUrl: "http://armada.default.svc.cluster.local:8080"
    prunerConfig:
      daysToKeep: 42
      batchSize: 1000