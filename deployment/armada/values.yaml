nameOverride: ""
fullnameOverride: ""

image:
  repository: gresearchdev/armada-server
  tag: 0.0.0-latest

resources:
  limits:
    memory: 1Gi
    cpu: 300m
  requests:
    memory: 512Mi
    cpu: 200m

# -- Security Context for armada Container
containerSecurityContext:
  allowPrivilegeEscalation: false
# -- Pod Security Context
podSecurityContext: {}
# -- Tolerations
tolerations: []

# -- Additional labels for all Armada Server K8s resources
additionalLabels: {}
# -- Additional volume mounts for Armada Server Deployment resource
additionalVolumeMounts: []
# -- Additional volumes for Armada Server Deployment resource
additionalVolumes: []

# -- Number of seconds to wait for Armada Server to gracefully shutdown
terminationGracePeriodSeconds: 30
# -- Armada Server replica count
replicas: 1

# -- See https://pkg.go.dev/k8s.io/api/core/v1#EnvVar for env model
# -- Additional environment variables for Armada Server Deployment resource
env: {}
 # - name: FOO
 #   value: bar

strategy:
  rollingUpdate:
    maxUnavailable: 1
  type: RollingUpdate

ingressClass: nginx
# -- cert-manager's ClusterIssuer from which to request TLS certificate for the Ingres resources
clusterIssuer: ""
# -- Hostnames for which to create gRPC and REST Ingress rules
hostnames: []
  # - armada.example.com
ingress:
  # -- Toggle whether to create gRPC and HTTP Ingress for Armada Server
  enabled: true
  # -- Ingress resource name override
  nameOverride: ""
  # -- Additional annotations for Ingress resource
  annotations: {}
  # -- Additional labels for Ingress resource
  labels: {}

prometheus:
  # -- Toggle whether to install ServiceMonitor and PrometheusRule for Armada Server monitoring
  enabled: false
  # -- Additional labels for ServiceMonitor and PrometheusRule
  labels: {}
  # -- Prometheus scrape interval
  scrapeInterval: 15s
  # -- Prometheus scrape timeout
  scrapeTimeout: 10s

podDisruptionBudget: {}

# Service type.  May be NodePort, ClusterIp, LoadBalancer
serviceType: ClusterIP

# -- If Service is of type NodePort this wil lbe the port that the gRPC server will be exposed on
#nodePort: 50051
# -- If Service is of type NodePort this wil lbe the port that the rest server will be exposed on
#httpNodePort: 8080

## Internal and external traffic policy for the armada service
# externalTrafficPolicy: Local
# internalTrafficPolicy: Local

# -- If specified, custom ServiceAccount name will be attached to Armada Server Deployment resource and the default ServiceAccount will not be created
customServiceAccount: ""
# -- More info here https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
# -- Additional ServiceAccount properties (e.g. automountServiceAccountToken, imagePullSecrets, etc.)
serviceAccount: {}

routableService:
  enabled: false

applicationConfig:
  # -- Armada Server gRPC port
  grpcPort: 50051
  grpc:
    tls:
      enabled: false
      certPath: /certs/tls.crt
      keyPath: /certs/tls.key
  # -- Armada Server REST port
  httpPort: 8080
  pulsar:
    # -- Toggle whether to mount Pulsar Token secret
    authenticationEnabled: false
    # -- Name of the secret which contains the Pulsar Token
    authenticationSecret: armada-pulsar-token-armada-admin
    # -- Toggle whether to mount Pulsar CA certificate secret
    tlsEnabled: false
    # -- Name of the secret which contains the Pulsar CA certificate
    cacert: armada-pulsar-ca-tls
