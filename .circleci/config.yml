version: 2.1

commands:
  deploy-executor:
    parameters:
      worker-id:
        type: string
        default: "1"
    steps:
      - run:
          name: "Deploy to worker << parameters.worker-id >>"
          command: |
            echo $KUBECONFIG_WORKER_<< parameters.worker-id >> | base64 -d > kubeconfig_worker_<< parameters.worker-id >>_decoded.yaml
            export KUBECONFIG=./kubeconfig_worker_<< parameters.worker-id >>_decoded.yaml
            if timeout 15 helm list; then
              helm upgrade --install armada-executor --namespace=armada ./deployment/executor/ -f ./executor_config.yaml \
              --set applicationConfig.application.clusterId="worker-pool-<< parameters.worker-id >>" \
              --set image.repository=gresearchdev/armada-executor-dev  \
              --set image.tag="${CIRCLE_SHA1}"

              helm upgrade --install executor-cluster-monitoring --namespace=common ./deployment/executor-cluster-monitoring --set interval=5s
            else
              echo Unable to connect to worker << parameters.worker-id >>
            fi

  install-helm-client:
    description: |
      Install the Helm v3 client
      Download from: https://get.helm.sh
    steps:
    - run:
        name: Install and init the helm client
        command: |
          if which helm > /dev/null; then
            echo "Helm is already installed.. skipping install"
          else
            HELM_VERSION="3.2.4"
            HELM_PLATFORM="linux-amd64"

            # Create local bin directory for later convenience
            mkdir -p /home/circleci/bin/
            echo 'export PATH=/home/circleci/bin/:$PATH' >> $BASH_ENV
            source $BASH_ENV

            # Get helm
            curl -LSs https://get.helm.sh/helm-v$HELM_VERSION-$HELM_PLATFORM.tar.gz | tar xvz --strip-components=1 -C /home/circleci/bin $HELM_PLATFORM/helm
          fi

  checkout-charts:
    description: |
      Checkout G-Research charts repo so we can update them later
      Checkout from: https://github.com/G-Research/charts
    steps:
    - run:
        name: Set .ssh directory and GIT_SSH_COMMAND
        command: |
          echo 'SSH_CONFIG_DIR="/home/circleci/.ssh"' >> $BASH_ENV
          echo 'GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=$SSH_CONFIG_DIR/known_hosts"' >> $BASH_ENV
          source $BASH_ENV

    - run:
        name: Create known_hosts file for github.com
        command: |
          mkdir -p $SSH_CONFIG_DIR
          echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> $SSH_CONFIG_DIR/known_hosts

    - run:
        name: Clone the G-Research common charts repo
        command: |
          eval "$(ssh-agent -s)"
          echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
          git clone -q git@github.com:G-Research/charts.git

  update-charts:
    description: |
      Update Armada charts in the common G-Research charts repo
    steps:
    - run:
        name: Update version, appVersion and image tag to match current $RELEASE_TAG
        command: |
          RELEASE_TAG=${CIRCLE_TAG}
          echo release version is $RELEASE_TAG
          find . \( -name "Chart.yaml" -o -name "values.yaml" \) -exec sed -i s/LATEST/$RELEASE_TAG/ {} +

    - run:
        name: Build new packages and index.yaml
        command: |
          helm package deployment/armada/ -d charts/armada/
          helm package deployment/executor -d charts/armada/
          helm package deployment/executor-cluster-monitoring/ -d charts/armada/
          helm package deployment/lookout/ -d charts/armada/
          helm package deployment/lookout-migration/ -d charts/armada/
          helm package deployment/binoculars/ -d charts/armada/
          helm package deployment/jobservice/ -d charts/armada/
          helm package deployment/lookout-ingester/ -d charts/armada/
          helm package deployment/event-ingester/ -d charts/armada/
          helm repo index charts/

    - run:
        name: Commit and push updated charts
        command: |
          RELEASE_TAG=${CIRCLE_TAG}
          cd charts
          git checkout -b circlci-armada_$RELEASE_TAG
          git add ./armada
          git -c user.name='GR OSS' -c user.email=github@gr-oss.io commit -qam "Pushing new helm charts at version $RELEASE_TAG"
          eval "$(ssh-agent -s)"
          echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
          git push -q origin HEAD

jobs:
  build_and_integration_tests:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.07.1
      resource_class: xlarge
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/armadaproject/armada
    steps:
      - checkout

      - restore_cache: # restore dependencies
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}

      - run:
          name: Download dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /home/circleci/bin/
            make download # no-op if we restored from cache

      - run:
          name: Build
          command: make build-ci

      - run:
          name: e2e test environment setup
          command: make tests-e2e-setup

      - run:
          name: Enable integration tests
          command: echo 'export INTEGRATION_ENABLED="true"' >> $BASH_ENV

      - run:
          name: e2e tests
          command: make tests-e2e-no-setup

      - run:
          name: e2e test environment teardown
          command: make tests-e2e-teardown
          
      - run:
          name: Prepare reports
          command: make junit-report
          when: always

      - store_test_results:
          path: test_reports/junit.xml

      - run:
          name: Push Image
          command: |

            if [ -z "${DOCKERHUB_USER}" ]
              then
                echo "Do not push image inside fork."
                exit 0
            fi

            TAG=${CIRCLE_SHA1}

            if [ ${CIRCLE_BRANCH} != master ]
              then
                TAG=branch-$(echo -n $CIRCLE_BRANCH | sed 's|/|-|g')-${CIRCLE_SHA1}
            fi

            echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

            docker tag armada gresearchdev/armada-server-dev:${TAG}
            docker push gresearchdev/armada-server-dev:${TAG}

            docker tag armada-executor gresearchdev/armada-executor-dev:${TAG}
            docker push gresearchdev/armada-executor-dev:${TAG}

            docker tag armadactl gresearchdev/armada-armadactl-dev:${TAG}
            docker push gresearchdev/armada-armadactl-dev:${TAG}

            docker tag testsuite gresearchdev/armada-testsuite-dev:${TAG}
            docker push gresearchdev/armada-testsuite-dev:${TAG}

            docker tag armada-load-tester gresearchdev/armada-load-tester-dev:${TAG}
            docker push gresearchdev/armada-load-tester-dev:${TAG}

            docker tag armada-fakeexecutor gresearchdev/armada-fakeexecutor-dev:${TAG}
            docker push gresearchdev/armada-fakeexecutor-dev:${TAG}

            docker tag armada-lookout gresearchdev/armada-lookout-dev:${TAG}
            docker push gresearchdev/armada-lookout-dev:${TAG}

            docker tag armada-lookout-ingester gresearchdev/armada-lookout-ingester-dev:${TAG}
            docker push gresearchdev/armada-lookout-ingester-dev:${TAG}
            
            docker tag armada-event-ingester gresearchdev/armada-event-ingester-dev:${TAG}
            docker push gresearchdev/armada-event-ingester-dev:${TAG}

            docker tag armada-binoculars gresearchdev/armada-binoculars-dev:${TAG}
            docker push gresearchdev/armada-binoculars-dev:${TAG}

            docker tag armadactl gresearchdev/armada-armadactl-dev:${TAG}
            docker push gresearchdev/armada-armadactl-dev:${TAG}

            docker tag armada-jobservice gresearchdev/armada-jobservice-dev:${TAG}
            docker push gresearchdev/armada-jobservice-dev:${TAG}


  release-armadactl:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.07.1
      resource_class: xlarge
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/armadaproject/armada
    steps:
      - checkout

      - restore_cache: # restore dependencies
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}

      - run:
          name: Download dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            make download # no-op if we restored from cache

      - run:
          name: Build armadactl release artifacts
          command: make build-armadactl-release RELEASE_VERSION=${CIRCLE_TAG}

      - store_artifacts:
          path: dist

      - run:
          name: Upload artifacts to Github release
          command: |
            for artifact in ./dist/*; do
              ./scripts/upload-github-release-asset.sh ${GITHUB_TOKEN} ${CIRCLE_TAG} $artifact
            done

            ./scripts/add-checksum-summary.sh ${GITHUB_TOKEN} ${CIRCLE_TAG}

  release-docker-images:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.07.1
      resource_class: medium
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/armadaproject/armada
    steps:
      - checkout
      - run:
          name: Publish images
          command: |
            TAG=${CIRCLE_SHA1}
            RELEASE_TAG=${CIRCLE_TAG}

            echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

            docker pull gresearchdev/armada-server-dev:${TAG}
            docker tag gresearchdev/armada-server-dev:${TAG} gresearchdev/armada-server:${RELEASE_TAG}
            docker push gresearchdev/armada-server:${RELEASE_TAG}

            docker pull gresearchdev/armada-executor-dev:${TAG}
            docker tag gresearchdev/armada-executor-dev:${TAG} gresearchdev/armada-executor:${RELEASE_TAG}
            docker push gresearchdev/armada-executor:${RELEASE_TAG}

            docker pull gresearchdev/armada-armadactl-dev:${TAG}
            docker tag gresearchdev/armada-armadactl-dev:${TAG} gresearchdev/armada-armadactl:${RELEASE_TAG}
            docker push gresearchdev/armada-armadactl:${RELEASE_TAG}

            docker pull gresearchdev/armada-testsuite-dev:${TAG}
            docker tag gresearchdev/armada-testsuite-dev:${TAG} gresearchdev/armada-testsuite:${RELEASE_TAG}
            docker push gresearchdev/armada-testsuite:${RELEASE_TAG}

            docker pull gresearchdev/armada-lookout-dev:${TAG}
            docker tag gresearchdev/armada-lookout-dev:${TAG} gresearchdev/armada-lookout:${RELEASE_TAG}
            docker push gresearchdev/armada-lookout:${RELEASE_TAG}

            docker pull gresearchdev/armada-binoculars-dev:${TAG}
            docker tag gresearchdev/armada-binoculars-dev:${TAG} gresearchdev/armada-binoculars:${RELEASE_TAG}
            docker push gresearchdev/armada-binoculars:${RELEASE_TAG}

            docker pull gresearchdev/armada-jobservice-dev:${TAG}
            docker tag gresearchdev/armada-jobservice-dev:${TAG} gresearchdev/armada-jobservice:${RELEASE_TAG}
            docker push gresearchdev/armada-jobservice:${RELEASE_TAG}
            
            docker pull gresearchdev/armada-lookout-ingester-dev:${TAG}
            docker tag gresearchdev/armada-lookout-ingester-dev:${TAG} gresearchdev/armada-lookout-ingester:${RELEASE_TAG}
            docker push gresearchdev/armada-lookout-ingester:${RELEASE_TAG}
            
            docker pull gresearchdev/armada-event-ingester-dev:${TAG}
            docker tag gresearchdev/armada-event-ingester-dev:${TAG} gresearchdev/armada-event-ingester:${RELEASE_TAG}
            docker push gresearchdev/armada-event-ingester:${RELEASE_TAG}

  release-charts:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.07.1
      resource_class: medium
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/armadaproject/armada
    steps:
      - checkout

      - install-helm-client

      - checkout-charts

      - update-charts

  release-dotnet-client:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.07.1
      resource_class: xlarge
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/armadaproject/armada
    steps:
      - checkout

      - restore_cache: # restore dependencies
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}

      - run:
          name: Download dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            make download # no-op if we restored from cache            

      - run:
          name: Push dotnet clients to nuget
          command: |
            RELEASE_TAG=${CIRCLE_TAG#"v"} make push-nuget

      - store_artifacts:
          path: bin/client/DotNet

workflows:
  version: 2
  build_and_deploy:
    jobs:
      -  build_and_integration_tests
      - release-armadactl:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-docker-images:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-charts:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-dotnet-client:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
